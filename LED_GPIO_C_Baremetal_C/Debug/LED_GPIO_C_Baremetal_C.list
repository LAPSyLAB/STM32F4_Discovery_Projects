
LED_GPIO_C_Baremetal_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007740  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080078c8  080078c8  000178c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007928  08007928  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08007928  08007928  00017928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007930  08007930  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007930  08007930  00017930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007934  08007934  00017934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08007938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          00001c10  20000180  20000180  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001d90  20001d90  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000139d4  00000000  00000000  000201f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000036ca  00000000  00000000  00033bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001190  00000000  00000000  00037298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d6a  00000000  00000000  00038428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023e2f  00000000  00000000  00039192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000182c0  00000000  00000000  0005cfc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c9d70  00000000  00000000  00075281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000048a0  00000000  00000000  0013eff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  00143894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080078b0 	.word	0x080078b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	080078b0 	.word	0x080078b0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fbd7 	bl	8000c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f82b 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f927 	bl	8000724 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d6:	f000 f891 	bl	80005fc <MX_I2C1_Init>
  MX_I2S3_Init();
 80004da:	f000 f8bd 	bl	8000658 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004de:	f000 f8eb 	bl	80006b8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004e2:	f006 fcb7 	bl	8006e54 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  RCC->AHB1ENR |= 0x08;                 // Enable clock for GPIOD
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <main+0x5c>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <main+0x5c>)
 80004ec:	f043 0308 	orr.w	r3, r3, #8
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOD->MODER |= 0x01000000;        // MODE Register: bit 12 == out
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <main+0x60>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <main+0x60>)
 80004f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004fc:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    GPIOD->ODR ^= 0x1000;            // Toggle PD12
 80004fe:	4b09      	ldr	r3, [pc, #36]	; (8000524 <main+0x60>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a08      	ldr	r2, [pc, #32]	; (8000524 <main+0x60>)
 8000504:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000508:	6153      	str	r3, [r2, #20]

	/* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    for (int i=0; i<0x1000000; i++) {};    // waste some time
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	e002      	b.n	8000516 <main+0x52>
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	3301      	adds	r3, #1
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800051c:	dbf8      	blt.n	8000510 <main+0x4c>
	    GPIOD->ODR ^= 0x1000;            // Toggle PD12
 800051e:	e7ee      	b.n	80004fe <main+0x3a>
 8000520:	40023800 	.word	0x40023800
 8000524:	40020c00 	.word	0x40020c00

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	; 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2230      	movs	r2, #48	; 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f007 f98e 	bl	8007858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	4b28      	ldr	r3, [pc, #160]	; (80005f4 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	4a27      	ldr	r2, [pc, #156]	; (80005f4 <SystemClock_Config+0xcc>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	; 0x40
 800055c:	4b25      	ldr	r3, [pc, #148]	; (80005f4 <SystemClock_Config+0xcc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a21      	ldr	r2, [pc, #132]	; (80005f8 <SystemClock_Config+0xd0>)
 8000572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <SystemClock_Config+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000584:	2301      	movs	r3, #1
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000598:	2308      	movs	r3, #8
 800059a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800059c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a6:	2307      	movs	r3, #7
 80005a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 fe2a 	bl	8003208 <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ba:	f000 f9b1 	bl	8000920 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2302      	movs	r3, #2
 80005c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	2105      	movs	r1, #5
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 f88b 	bl	80036f8 <HAL_RCC_ClockConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005e8:	f000 f99a 	bl	8000920 <Error_Handler>
  }
}
 80005ec:	bf00      	nop
 80005ee:	3750      	adds	r7, #80	; 0x50
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_I2C1_Init+0x50>)
 8000602:	4a13      	ldr	r2, [pc, #76]	; (8000650 <MX_I2C1_Init+0x54>)
 8000604:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_I2C1_Init+0x50>)
 8000608:	4a12      	ldr	r2, [pc, #72]	; (8000654 <MX_I2C1_Init+0x58>)
 800060a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_I2C1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_I2C1_Init+0x50>)
 800061a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800061e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_I2C1_Init+0x50>)
 800063a:	f000 fe7d 	bl	8001338 <HAL_I2C_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000644:	f000 f96c 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000019c 	.word	0x2000019c
 8000650:	40005400 	.word	0x40005400
 8000654:	000186a0 	.word	0x000186a0

08000658 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <MX_I2S3_Init+0x54>)
 800065e:	4a14      	ldr	r2, [pc, #80]	; (80006b0 <MX_I2S3_Init+0x58>)
 8000660:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_I2S3_Init+0x54>)
 8000664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000668:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_I2S3_Init+0x54>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000670:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_I2S3_Init+0x54>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <MX_I2S3_Init+0x54>)
 8000678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800067c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_I2S3_Init+0x54>)
 8000680:	4a0c      	ldr	r2, [pc, #48]	; (80006b4 <MX_I2S3_Init+0x5c>)
 8000682:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_I2S3_Init+0x54>)
 8000686:	2200      	movs	r2, #0
 8000688:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_I2S3_Init+0x54>)
 800068c:	2200      	movs	r2, #0
 800068e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_I2S3_Init+0x54>)
 8000692:	2200      	movs	r2, #0
 8000694:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_I2S3_Init+0x54>)
 8000698:	f000 ff92 	bl	80015c0 <HAL_I2S_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006a2:	f000 f93d 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200001f0 	.word	0x200001f0
 80006b0:	40003c00 	.word	0x40003c00
 80006b4:	00017700 	.word	0x00017700

080006b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_SPI1_Init+0x64>)
 80006be:	4a18      	ldr	r2, [pc, #96]	; (8000720 <MX_SPI1_Init+0x68>)
 80006c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <MX_SPI1_Init+0x64>)
 80006c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_SPI1_Init+0x64>)
 80006e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_SPI1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_SPI1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_SPI1_Init+0x64>)
 8000704:	220a      	movs	r2, #10
 8000706:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_SPI1_Init+0x64>)
 800070a:	f003 fb41 	bl	8003d90 <HAL_SPI_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000714:	f000 f904 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000238 	.word	0x20000238
 8000720:	40013000 	.word	0x40013000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	4b72      	ldr	r3, [pc, #456]	; (8000908 <MX_GPIO_Init+0x1e4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a71      	ldr	r2, [pc, #452]	; (8000908 <MX_GPIO_Init+0x1e4>)
 8000744:	f043 0310 	orr.w	r3, r3, #16
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b6f      	ldr	r3, [pc, #444]	; (8000908 <MX_GPIO_Init+0x1e4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	4b6b      	ldr	r3, [pc, #428]	; (8000908 <MX_GPIO_Init+0x1e4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a6a      	ldr	r2, [pc, #424]	; (8000908 <MX_GPIO_Init+0x1e4>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b68      	ldr	r3, [pc, #416]	; (8000908 <MX_GPIO_Init+0x1e4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b64      	ldr	r3, [pc, #400]	; (8000908 <MX_GPIO_Init+0x1e4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a63      	ldr	r2, [pc, #396]	; (8000908 <MX_GPIO_Init+0x1e4>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b61      	ldr	r3, [pc, #388]	; (8000908 <MX_GPIO_Init+0x1e4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b5d      	ldr	r3, [pc, #372]	; (8000908 <MX_GPIO_Init+0x1e4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a5c      	ldr	r2, [pc, #368]	; (8000908 <MX_GPIO_Init+0x1e4>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b5a      	ldr	r3, [pc, #360]	; (8000908 <MX_GPIO_Init+0x1e4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b56      	ldr	r3, [pc, #344]	; (8000908 <MX_GPIO_Init+0x1e4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a55      	ldr	r2, [pc, #340]	; (8000908 <MX_GPIO_Init+0x1e4>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b53      	ldr	r3, [pc, #332]	; (8000908 <MX_GPIO_Init+0x1e4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b4f      	ldr	r3, [pc, #316]	; (8000908 <MX_GPIO_Init+0x1e4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a4e      	ldr	r2, [pc, #312]	; (8000908 <MX_GPIO_Init+0x1e4>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b4c      	ldr	r3, [pc, #304]	; (8000908 <MX_GPIO_Init+0x1e4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2108      	movs	r1, #8
 80007e6:	4849      	ldr	r0, [pc, #292]	; (800090c <MX_GPIO_Init+0x1e8>)
 80007e8:	f000 fd8c 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2101      	movs	r1, #1
 80007f0:	4847      	ldr	r0, [pc, #284]	; (8000910 <MX_GPIO_Init+0x1ec>)
 80007f2:	f000 fd87 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007f6:	2200      	movs	r2, #0
 80007f8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007fc:	4845      	ldr	r0, [pc, #276]	; (8000914 <MX_GPIO_Init+0x1f0>)
 80007fe:	f000 fd81 	bl	8001304 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000802:	2308      	movs	r3, #8
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	483c      	ldr	r0, [pc, #240]	; (800090c <MX_GPIO_Init+0x1e8>)
 800081a:	f000 fbd7 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800081e:	2301      	movs	r3, #1
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4836      	ldr	r0, [pc, #216]	; (8000910 <MX_GPIO_Init+0x1ec>)
 8000836:	f000 fbc9 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800083a:	2308      	movs	r3, #8
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800084a:	2305      	movs	r3, #5
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	482e      	ldr	r0, [pc, #184]	; (8000910 <MX_GPIO_Init+0x1ec>)
 8000856:	f000 fbb9 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800085a:	2301      	movs	r3, #1
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800085e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	482a      	ldr	r0, [pc, #168]	; (8000918 <MX_GPIO_Init+0x1f4>)
 8000870:	f000 fbac 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000874:	2304      	movs	r3, #4
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4825      	ldr	r0, [pc, #148]	; (800091c <MX_GPIO_Init+0x1f8>)
 8000888:	f000 fba0 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800088c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089e:	2305      	movs	r3, #5
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	481c      	ldr	r0, [pc, #112]	; (800091c <MX_GPIO_Init+0x1f8>)
 80008aa:	f000 fb8f 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ae:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008b2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4813      	ldr	r0, [pc, #76]	; (8000914 <MX_GPIO_Init+0x1f0>)
 80008c8:	f000 fb80 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008cc:	2320      	movs	r3, #32
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	480d      	ldr	r0, [pc, #52]	; (8000914 <MX_GPIO_Init+0x1f0>)
 80008e0:	f000 fb74 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008e4:	2302      	movs	r3, #2
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008e8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_GPIO_Init+0x1e8>)
 80008fa:	f000 fb67 	bl	8000fcc <HAL_GPIO_Init>

}
 80008fe:	bf00      	nop
 8000900:	3730      	adds	r7, #48	; 0x30
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800
 800090c:	40021000 	.word	0x40021000
 8000910:	40020800 	.word	0x40020800
 8000914:	40020c00 	.word	0x40020c00
 8000918:	40020000 	.word	0x40020000
 800091c:	40020400 	.word	0x40020400

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	e7fe      	b.n	8000928 <Error_Handler+0x8>
	...

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <HAL_MspInit+0x4c>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000940:	6453      	str	r3, [r2, #68]	; 0x44
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	4a08      	ldr	r2, [pc, #32]	; (8000978 <HAL_MspInit+0x4c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800096a:	2007      	movs	r0, #7
 800096c:	f000 faec 	bl	8000f48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800

0800097c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <HAL_I2C_MspInit+0x84>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d12c      	bne.n	80009f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <HAL_I2C_MspInit+0x88>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a17      	ldr	r2, [pc, #92]	; (8000a04 <HAL_I2C_MspInit+0x88>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_I2C_MspInit+0x88>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ba:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c0:	2312      	movs	r3, #18
 80009c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009cc:	2304      	movs	r3, #4
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	480c      	ldr	r0, [pc, #48]	; (8000a08 <HAL_I2C_MspInit+0x8c>)
 80009d8:	f000 faf8 	bl	8000fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <HAL_I2C_MspInit+0x88>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <HAL_I2C_MspInit+0x88>)
 80009e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ea:	6413      	str	r3, [r2, #64]	; 0x40
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <HAL_I2C_MspInit+0x88>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009f8:	bf00      	nop
 80009fa:	3728      	adds	r7, #40	; 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40005400 	.word	0x40005400
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020400 	.word	0x40020400

08000a0c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08e      	sub	sp, #56	; 0x38
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a31      	ldr	r2, [pc, #196]	; (8000afc <HAL_I2S_MspInit+0xf0>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d15a      	bne.n	8000af2 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a40:	23c0      	movs	r3, #192	; 0xc0
 8000a42:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f003 f85f 	bl	8003b10 <HAL_RCCEx_PeriphCLKConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a58:	f7ff ff62 	bl	8000920 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <HAL_I2S_MspInit+0xf4>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	4a26      	ldr	r2, [pc, #152]	; (8000b00 <HAL_I2S_MspInit+0xf4>)
 8000a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6c:	4b24      	ldr	r3, [pc, #144]	; (8000b00 <HAL_I2S_MspInit+0xf4>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <HAL_I2S_MspInit+0xf4>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a80:	4a1f      	ldr	r2, [pc, #124]	; (8000b00 <HAL_I2S_MspInit+0xf4>)
 8000a82:	f043 0301 	orr.w	r3, r3, #1
 8000a86:	6313      	str	r3, [r2, #48]	; 0x30
 8000a88:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <HAL_I2S_MspInit+0xf4>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <HAL_I2S_MspInit+0xf4>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9c:	4a18      	ldr	r2, [pc, #96]	; (8000b00 <HAL_I2S_MspInit+0xf4>)
 8000a9e:	f043 0304 	orr.w	r3, r3, #4
 8000aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <HAL_I2S_MspInit+0xf4>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	f003 0304 	and.w	r3, r3, #4
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ab0:	2310      	movs	r3, #16
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ac0:	2306      	movs	r3, #6
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480e      	ldr	r0, [pc, #56]	; (8000b04 <HAL_I2S_MspInit+0xf8>)
 8000acc:	f000 fa7e 	bl	8000fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ad0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ae2:	2306      	movs	r3, #6
 8000ae4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aea:	4619      	mov	r1, r3
 8000aec:	4806      	ldr	r0, [pc, #24]	; (8000b08 <HAL_I2S_MspInit+0xfc>)
 8000aee:	f000 fa6d 	bl	8000fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000af2:	bf00      	nop
 8000af4:	3738      	adds	r7, #56	; 0x38
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40003c00 	.word	0x40003c00
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020000 	.word	0x40020000
 8000b08:	40020800 	.word	0x40020800

08000b0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <HAL_SPI_MspInit+0x84>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d12b      	bne.n	8000b86 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <HAL_SPI_MspInit+0x88>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <HAL_SPI_MspInit+0x88>)
 8000b38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_SPI_MspInit+0x88>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_SPI_MspInit+0x88>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <HAL_SPI_MspInit+0x88>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_SPI_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b66:	23e0      	movs	r3, #224	; 0xe0
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b76:	2305      	movs	r3, #5
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <HAL_SPI_MspInit+0x8c>)
 8000b82:	f000 fa23 	bl	8000fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40013000 	.word	0x40013000
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020000 	.word	0x40020000

08000b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <NMI_Handler+0x4>

08000ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <HardFault_Handler+0x4>

08000ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <MemManage_Handler+0x4>

08000bae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <BusFault_Handler+0x4>

08000bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <UsageFault_Handler+0x4>

08000bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be8:	f000 f89a 	bl	8000d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <OTG_FS_IRQHandler+0x10>)
 8000bf6:	f001 fad3 	bl	80021a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20001768 	.word	0x20001768

08000c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <SystemInit+0x20>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <SystemInit+0x20>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c2e:	490e      	ldr	r1, [pc, #56]	; (8000c68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c44:	4c0b      	ldr	r4, [pc, #44]	; (8000c74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c52:	f7ff ffd7 	bl	8000c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c56:	f006 fe07 	bl	8007868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5a:	f7ff fc33 	bl	80004c4 <main>
  bx  lr    
 8000c5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c68:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000c6c:	08007938 	.word	0x08007938
  ldr r2, =_sbss
 8000c70:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000c74:	20001d90 	.word	0x20001d90

08000c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC_IRQHandler>
	...

08000c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <HAL_Init+0x40>)
 8000c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_Init+0x40>)
 8000c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <HAL_Init+0x40>)
 8000c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 f94f 	bl	8000f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000caa:	2000      	movs	r0, #0
 8000cac:	f000 f808 	bl	8000cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb0:	f7ff fe3c 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023c00 	.word	0x40023c00

08000cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_InitTick+0x54>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_InitTick+0x58>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f967 	bl	8000fb2 <HAL_SYSTICK_Config>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00e      	b.n	8000d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b0f      	cmp	r3, #15
 8000cf2:	d80a      	bhi.n	8000d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfc:	f000 f92f 	bl	8000f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d00:	4a06      	ldr	r2, [pc, #24]	; (8000d1c <HAL_InitTick+0x5c>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e000      	b.n	8000d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000000 	.word	0x20000000
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20000004 	.word	0x20000004

08000d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_IncTick+0x20>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_IncTick+0x24>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <HAL_IncTick+0x24>)
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000290 	.word	0x20000290

08000d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <HAL_GetTick+0x14>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000290 	.word	0x20000290

08000d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d68:	f7ff ffee 	bl	8000d48 <HAL_GetTick>
 8000d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d78:	d005      	beq.n	8000d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <HAL_Delay+0x44>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4413      	add	r3, r2
 8000d84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d86:	bf00      	nop
 8000d88:	f7ff ffde 	bl	8000d48 <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d8f7      	bhi.n	8000d88 <HAL_Delay+0x28>
  {
  }
}
 8000d98:	bf00      	nop
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008

08000da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dda:	4a04      	ldr	r2, [pc, #16]	; (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	60d3      	str	r3, [r2, #12]
}
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <__NVIC_GetPriorityGrouping+0x18>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	0a1b      	lsrs	r3, r3, #8
 8000dfa:	f003 0307 	and.w	r3, r3, #7
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	db0b      	blt.n	8000e36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	f003 021f 	and.w	r2, r3, #31
 8000e24:	4907      	ldr	r1, [pc, #28]	; (8000e44 <__NVIC_EnableIRQ+0x38>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	095b      	lsrs	r3, r3, #5
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000e100 	.word	0xe000e100

08000e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	db0a      	blt.n	8000e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	490c      	ldr	r1, [pc, #48]	; (8000e94 <__NVIC_SetPriority+0x4c>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	0112      	lsls	r2, r2, #4
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e70:	e00a      	b.n	8000e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4908      	ldr	r1, [pc, #32]	; (8000e98 <__NVIC_SetPriority+0x50>)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	3b04      	subs	r3, #4
 8000e80:	0112      	lsls	r2, r2, #4
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	440b      	add	r3, r1
 8000e86:	761a      	strb	r2, [r3, #24]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000e100 	.word	0xe000e100
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	; 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f1c3 0307 	rsb	r3, r3, #7
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	bf28      	it	cs
 8000eba:	2304      	movcs	r3, #4
 8000ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	2b06      	cmp	r3, #6
 8000ec4:	d902      	bls.n	8000ecc <NVIC_EncodePriority+0x30>
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3b03      	subs	r3, #3
 8000eca:	e000      	b.n	8000ece <NVIC_EncodePriority+0x32>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43da      	mvns	r2, r3
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	401a      	ands	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	43d9      	mvns	r1, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	4313      	orrs	r3, r2
         );
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3724      	adds	r7, #36	; 0x24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f14:	d301      	bcc.n	8000f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00f      	b.n	8000f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <SysTick_Config+0x40>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f22:	210f      	movs	r1, #15
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f7ff ff8e 	bl	8000e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <SysTick_Config+0x40>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <SysTick_Config+0x40>)
 8000f34:	2207      	movs	r2, #7
 8000f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	e000e010 	.word	0xe000e010

08000f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ff29 	bl	8000da8 <__NVIC_SetPriorityGrouping>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b086      	sub	sp, #24
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
 8000f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f70:	f7ff ff3e 	bl	8000df0 <__NVIC_GetPriorityGrouping>
 8000f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	68b9      	ldr	r1, [r7, #8]
 8000f7a:	6978      	ldr	r0, [r7, #20]
 8000f7c:	f7ff ff8e 	bl	8000e9c <NVIC_EncodePriority>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff5d 	bl	8000e48 <__NVIC_SetPriority>
}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff31 	bl	8000e0c <__NVIC_EnableIRQ>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffa2 	bl	8000f04 <SysTick_Config>
 8000fc0:	4603      	mov	r3, r0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
 8000fe6:	e16b      	b.n	80012c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	429a      	cmp	r2, r3
 8001002:	f040 815a 	bne.w	80012ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b01      	cmp	r3, #1
 8001010:	d005      	beq.n	800101e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101a:	2b02      	cmp	r3, #2
 800101c:	d130      	bne.n	8001080 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	68da      	ldr	r2, [r3, #12]
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001054:	2201      	movs	r2, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	091b      	lsrs	r3, r3, #4
 800106a:	f003 0201 	and.w	r2, r3, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b03      	cmp	r3, #3
 800108a:	d017      	beq.n	80010bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d123      	bne.n	8001110 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	08da      	lsrs	r2, r3, #3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3208      	adds	r2, #8
 80010d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	220f      	movs	r2, #15
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	691a      	ldr	r2, [r3, #16]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	69b9      	ldr	r1, [r7, #24]
 800110c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0203 	and.w	r2, r3, #3
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 80b4 	beq.w	80012ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b60      	ldr	r3, [pc, #384]	; (80012d8 <HAL_GPIO_Init+0x30c>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a5f      	ldr	r2, [pc, #380]	; (80012d8 <HAL_GPIO_Init+0x30c>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b5d      	ldr	r3, [pc, #372]	; (80012d8 <HAL_GPIO_Init+0x30c>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800116e:	4a5b      	ldr	r2, [pc, #364]	; (80012dc <HAL_GPIO_Init+0x310>)
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3302      	adds	r3, #2
 8001176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a52      	ldr	r2, [pc, #328]	; (80012e0 <HAL_GPIO_Init+0x314>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d02b      	beq.n	80011f2 <HAL_GPIO_Init+0x226>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a51      	ldr	r2, [pc, #324]	; (80012e4 <HAL_GPIO_Init+0x318>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d025      	beq.n	80011ee <HAL_GPIO_Init+0x222>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a50      	ldr	r2, [pc, #320]	; (80012e8 <HAL_GPIO_Init+0x31c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d01f      	beq.n	80011ea <HAL_GPIO_Init+0x21e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4f      	ldr	r2, [pc, #316]	; (80012ec <HAL_GPIO_Init+0x320>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d019      	beq.n	80011e6 <HAL_GPIO_Init+0x21a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4e      	ldr	r2, [pc, #312]	; (80012f0 <HAL_GPIO_Init+0x324>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d013      	beq.n	80011e2 <HAL_GPIO_Init+0x216>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4d      	ldr	r2, [pc, #308]	; (80012f4 <HAL_GPIO_Init+0x328>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d00d      	beq.n	80011de <HAL_GPIO_Init+0x212>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4c      	ldr	r2, [pc, #304]	; (80012f8 <HAL_GPIO_Init+0x32c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d007      	beq.n	80011da <HAL_GPIO_Init+0x20e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4b      	ldr	r2, [pc, #300]	; (80012fc <HAL_GPIO_Init+0x330>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d101      	bne.n	80011d6 <HAL_GPIO_Init+0x20a>
 80011d2:	2307      	movs	r3, #7
 80011d4:	e00e      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011d6:	2308      	movs	r3, #8
 80011d8:	e00c      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011da:	2306      	movs	r3, #6
 80011dc:	e00a      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011de:	2305      	movs	r3, #5
 80011e0:	e008      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011e2:	2304      	movs	r3, #4
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011e6:	2303      	movs	r3, #3
 80011e8:	e004      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011f2:	2300      	movs	r3, #0
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	f002 0203 	and.w	r2, r2, #3
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4093      	lsls	r3, r2
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001204:	4935      	ldr	r1, [pc, #212]	; (80012dc <HAL_GPIO_Init+0x310>)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001212:	4b3b      	ldr	r3, [pc, #236]	; (8001300 <HAL_GPIO_Init+0x334>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001236:	4a32      	ldr	r2, [pc, #200]	; (8001300 <HAL_GPIO_Init+0x334>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800123c:	4b30      	ldr	r3, [pc, #192]	; (8001300 <HAL_GPIO_Init+0x334>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001260:	4a27      	ldr	r2, [pc, #156]	; (8001300 <HAL_GPIO_Init+0x334>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <HAL_GPIO_Init+0x334>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128a:	4a1d      	ldr	r2, [pc, #116]	; (8001300 <HAL_GPIO_Init+0x334>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_GPIO_Init+0x334>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b4:	4a12      	ldr	r2, [pc, #72]	; (8001300 <HAL_GPIO_Init+0x334>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3301      	adds	r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	2b0f      	cmp	r3, #15
 80012c4:	f67f ae90 	bls.w	8000fe8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40013800 	.word	0x40013800
 80012e0:	40020000 	.word	0x40020000
 80012e4:	40020400 	.word	0x40020400
 80012e8:	40020800 	.word	0x40020800
 80012ec:	40020c00 	.word	0x40020c00
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40021400 	.word	0x40021400
 80012f8:	40021800 	.word	0x40021800
 80012fc:	40021c00 	.word	0x40021c00
 8001300:	40013c00 	.word	0x40013c00

08001304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
 8001310:	4613      	mov	r3, r2
 8001312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001314:	787b      	ldrb	r3, [r7, #1]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800131a:	887a      	ldrh	r2, [r7, #2]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001320:	e003      	b.n	800132a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001322:	887b      	ldrh	r3, [r7, #2]
 8001324:	041a      	lsls	r2, r3, #16
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	619a      	str	r2, [r3, #24]
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e12b      	b.n	80015a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d106      	bne.n	8001364 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff fb0c 	bl	800097c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2224      	movs	r2, #36	; 0x24
 8001368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0201 	bic.w	r2, r2, #1
 800137a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800138a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800139a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800139c:	f002 fba4 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 80013a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	4a81      	ldr	r2, [pc, #516]	; (80015ac <HAL_I2C_Init+0x274>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d807      	bhi.n	80013bc <HAL_I2C_Init+0x84>
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4a80      	ldr	r2, [pc, #512]	; (80015b0 <HAL_I2C_Init+0x278>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	bf94      	ite	ls
 80013b4:	2301      	movls	r3, #1
 80013b6:	2300      	movhi	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	e006      	b.n	80013ca <HAL_I2C_Init+0x92>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4a7d      	ldr	r2, [pc, #500]	; (80015b4 <HAL_I2C_Init+0x27c>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	bf94      	ite	ls
 80013c4:	2301      	movls	r3, #1
 80013c6:	2300      	movhi	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e0e7      	b.n	80015a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4a78      	ldr	r2, [pc, #480]	; (80015b8 <HAL_I2C_Init+0x280>)
 80013d6:	fba2 2303 	umull	r2, r3, r2, r3
 80013da:	0c9b      	lsrs	r3, r3, #18
 80013dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68ba      	ldr	r2, [r7, #8]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	4a6a      	ldr	r2, [pc, #424]	; (80015ac <HAL_I2C_Init+0x274>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d802      	bhi.n	800140c <HAL_I2C_Init+0xd4>
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	3301      	adds	r3, #1
 800140a:	e009      	b.n	8001420 <HAL_I2C_Init+0xe8>
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001412:	fb02 f303 	mul.w	r3, r2, r3
 8001416:	4a69      	ldr	r2, [pc, #420]	; (80015bc <HAL_I2C_Init+0x284>)
 8001418:	fba2 2303 	umull	r2, r3, r2, r3
 800141c:	099b      	lsrs	r3, r3, #6
 800141e:	3301      	adds	r3, #1
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6812      	ldr	r2, [r2, #0]
 8001424:	430b      	orrs	r3, r1
 8001426:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001432:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	495c      	ldr	r1, [pc, #368]	; (80015ac <HAL_I2C_Init+0x274>)
 800143c:	428b      	cmp	r3, r1
 800143e:	d819      	bhi.n	8001474 <HAL_I2C_Init+0x13c>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	1e59      	subs	r1, r3, #1
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	fbb1 f3f3 	udiv	r3, r1, r3
 800144e:	1c59      	adds	r1, r3, #1
 8001450:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001454:	400b      	ands	r3, r1
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00a      	beq.n	8001470 <HAL_I2C_Init+0x138>
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	1e59      	subs	r1, r3, #1
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	fbb1 f3f3 	udiv	r3, r1, r3
 8001468:	3301      	adds	r3, #1
 800146a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800146e:	e051      	b.n	8001514 <HAL_I2C_Init+0x1dc>
 8001470:	2304      	movs	r3, #4
 8001472:	e04f      	b.n	8001514 <HAL_I2C_Init+0x1dc>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d111      	bne.n	80014a0 <HAL_I2C_Init+0x168>
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	1e58      	subs	r0, r3, #1
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6859      	ldr	r1, [r3, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	440b      	add	r3, r1
 800148a:	fbb0 f3f3 	udiv	r3, r0, r3
 800148e:	3301      	adds	r3, #1
 8001490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001494:	2b00      	cmp	r3, #0
 8001496:	bf0c      	ite	eq
 8001498:	2301      	moveq	r3, #1
 800149a:	2300      	movne	r3, #0
 800149c:	b2db      	uxtb	r3, r3
 800149e:	e012      	b.n	80014c6 <HAL_I2C_Init+0x18e>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	1e58      	subs	r0, r3, #1
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6859      	ldr	r1, [r3, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	0099      	lsls	r1, r3, #2
 80014b0:	440b      	add	r3, r1
 80014b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014b6:	3301      	adds	r3, #1
 80014b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014bc:	2b00      	cmp	r3, #0
 80014be:	bf0c      	ite	eq
 80014c0:	2301      	moveq	r3, #1
 80014c2:	2300      	movne	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_I2C_Init+0x196>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e022      	b.n	8001514 <HAL_I2C_Init+0x1dc>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10e      	bne.n	80014f4 <HAL_I2C_Init+0x1bc>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	1e58      	subs	r0, r3, #1
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6859      	ldr	r1, [r3, #4]
 80014de:	460b      	mov	r3, r1
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	440b      	add	r3, r1
 80014e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e8:	3301      	adds	r3, #1
 80014ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014f2:	e00f      	b.n	8001514 <HAL_I2C_Init+0x1dc>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	1e58      	subs	r0, r3, #1
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6859      	ldr	r1, [r3, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	0099      	lsls	r1, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	fbb0 f3f3 	udiv	r3, r0, r3
 800150a:	3301      	adds	r3, #1
 800150c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001510:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	6809      	ldr	r1, [r1, #0]
 8001518:	4313      	orrs	r3, r2
 800151a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69da      	ldr	r2, [r3, #28]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	431a      	orrs	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001542:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6911      	ldr	r1, [r2, #16]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	68d2      	ldr	r2, [r2, #12]
 800154e:	4311      	orrs	r1, r2
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	430b      	orrs	r3, r1
 8001556:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	695a      	ldr	r2, [r3, #20]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 0201 	orr.w	r2, r2, #1
 8001582:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2220      	movs	r2, #32
 800158e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	000186a0 	.word	0x000186a0
 80015b0:	001e847f 	.word	0x001e847f
 80015b4:	003d08ff 	.word	0x003d08ff
 80015b8:	431bde83 	.word	0x431bde83
 80015bc:	10624dd3 	.word	0x10624dd3

080015c0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e128      	b.n	8001824 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d109      	bne.n	80015f2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a90      	ldr	r2, [pc, #576]	; (800182c <HAL_I2S_Init+0x26c>)
 80015ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff fa0d 	bl	8000a0c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2202      	movs	r2, #2
 80015f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001608:	f023 030f 	bic.w	r3, r3, #15
 800160c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2202      	movs	r2, #2
 8001614:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d060      	beq.n	80016e0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d102      	bne.n	800162c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001626:	2310      	movs	r3, #16
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	e001      	b.n	8001630 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800162c:	2320      	movs	r3, #32
 800162e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2b20      	cmp	r3, #32
 8001636:	d802      	bhi.n	800163e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800163e:	2001      	movs	r0, #1
 8001640:	f002 fb48 	bl	8003cd4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001644:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800164e:	d125      	bne.n	800169c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d010      	beq.n	800167a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001662:	4613      	mov	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	461a      	mov	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	fbb2 f3f3 	udiv	r3, r2, r3
 8001674:	3305      	adds	r3, #5
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	e01f      	b.n	80016ba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	fbb2 f2f3 	udiv	r2, r2, r3
 8001684:	4613      	mov	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	461a      	mov	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	fbb2 f3f3 	udiv	r3, r2, r3
 8001696:	3305      	adds	r3, #5
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	e00e      	b.n	80016ba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	461a      	mov	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b6:	3305      	adds	r3, #5
 80016b8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	4a5c      	ldr	r2, [pc, #368]	; (8001830 <HAL_I2S_Init+0x270>)
 80016be:	fba2 2303 	umull	r2, r3, r2, r3
 80016c2:	08db      	lsrs	r3, r3, #3
 80016c4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	085b      	lsrs	r3, r3, #1
 80016d6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	61bb      	str	r3, [r7, #24]
 80016de:	e003      	b.n	80016e8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80016e0:	2302      	movs	r3, #2
 80016e2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d902      	bls.n	80016f4 <HAL_I2S_Init+0x134>
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	2bff      	cmp	r3, #255	; 0xff
 80016f2:	d907      	bls.n	8001704 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f8:	f043 0210 	orr.w	r2, r3, #16
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e08f      	b.n	8001824 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691a      	ldr	r2, [r3, #16]
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	ea42 0103 	orr.w	r1, r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	69fa      	ldr	r2, [r7, #28]
 8001714:	430a      	orrs	r2, r1
 8001716:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001722:	f023 030f 	bic.w	r3, r3, #15
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6851      	ldr	r1, [r2, #4]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6892      	ldr	r2, [r2, #8]
 800172e:	4311      	orrs	r1, r2
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	68d2      	ldr	r2, [r2, #12]
 8001734:	4311      	orrs	r1, r2
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6992      	ldr	r2, [r2, #24]
 800173a:	430a      	orrs	r2, r1
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001746:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d161      	bne.n	8001814 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a38      	ldr	r2, [pc, #224]	; (8001834 <HAL_I2S_Init+0x274>)
 8001754:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a37      	ldr	r2, [pc, #220]	; (8001838 <HAL_I2S_Init+0x278>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d101      	bne.n	8001764 <HAL_I2S_Init+0x1a4>
 8001760:	4b36      	ldr	r3, [pc, #216]	; (800183c <HAL_I2S_Init+0x27c>)
 8001762:	e001      	b.n	8001768 <HAL_I2S_Init+0x1a8>
 8001764:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	4932      	ldr	r1, [pc, #200]	; (8001838 <HAL_I2S_Init+0x278>)
 8001770:	428a      	cmp	r2, r1
 8001772:	d101      	bne.n	8001778 <HAL_I2S_Init+0x1b8>
 8001774:	4a31      	ldr	r2, [pc, #196]	; (800183c <HAL_I2S_Init+0x27c>)
 8001776:	e001      	b.n	800177c <HAL_I2S_Init+0x1bc>
 8001778:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800177c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001780:	f023 030f 	bic.w	r3, r3, #15
 8001784:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a2b      	ldr	r2, [pc, #172]	; (8001838 <HAL_I2S_Init+0x278>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d101      	bne.n	8001794 <HAL_I2S_Init+0x1d4>
 8001790:	4b2a      	ldr	r3, [pc, #168]	; (800183c <HAL_I2S_Init+0x27c>)
 8001792:	e001      	b.n	8001798 <HAL_I2S_Init+0x1d8>
 8001794:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001798:	2202      	movs	r2, #2
 800179a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a25      	ldr	r2, [pc, #148]	; (8001838 <HAL_I2S_Init+0x278>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d101      	bne.n	80017aa <HAL_I2S_Init+0x1ea>
 80017a6:	4b25      	ldr	r3, [pc, #148]	; (800183c <HAL_I2S_Init+0x27c>)
 80017a8:	e001      	b.n	80017ae <HAL_I2S_Init+0x1ee>
 80017aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017ae:	69db      	ldr	r3, [r3, #28]
 80017b0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017ba:	d003      	beq.n	80017c4 <HAL_I2S_Init+0x204>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d103      	bne.n	80017cc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80017c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	e001      	b.n	80017d0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80017cc:	2300      	movs	r3, #0
 80017ce:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80017da:	4313      	orrs	r3, r2
 80017dc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80017ee:	4313      	orrs	r3, r2
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	897b      	ldrh	r3, [r7, #10]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017fc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <HAL_I2S_Init+0x278>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d101      	bne.n	800180c <HAL_I2S_Init+0x24c>
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <HAL_I2S_Init+0x27c>)
 800180a:	e001      	b.n	8001810 <HAL_I2S_Init+0x250>
 800180c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001810:	897a      	ldrh	r2, [r7, #10]
 8001812:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3720      	adds	r7, #32
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	08001937 	.word	0x08001937
 8001830:	cccccccd 	.word	0xcccccccd
 8001834:	08001a4d 	.word	0x08001a4d
 8001838:	40003800 	.word	0x40003800
 800183c:	40003400 	.word	0x40003400

08001840 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	881a      	ldrh	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	1c9a      	adds	r2, r3, #2
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189e:	b29b      	uxth	r3, r3
 80018a0:	3b01      	subs	r3, #1
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10e      	bne.n	80018d0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80018c0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ffb8 	bl	8001840 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68da      	ldr	r2, [r3, #12]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ea:	b292      	uxth	r2, r2
 80018ec:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	1c9a      	adds	r2, r3, #2
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	3b01      	subs	r3, #1
 8001900:	b29a      	uxth	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800190a:	b29b      	uxth	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	d10e      	bne.n	800192e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800191e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ff93 	bl	8001854 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b04      	cmp	r3, #4
 8001950:	d13a      	bne.n	80019c8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b01      	cmp	r3, #1
 800195a:	d109      	bne.n	8001970 <I2S_IRQHandler+0x3a>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001966:	2b40      	cmp	r3, #64	; 0x40
 8001968:	d102      	bne.n	8001970 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffb4 	bl	80018d8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001976:	2b40      	cmp	r3, #64	; 0x40
 8001978:	d126      	bne.n	80019c8 <I2S_IRQHandler+0x92>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0320 	and.w	r3, r3, #32
 8001984:	2b20      	cmp	r3, #32
 8001986:	d11f      	bne.n	80019c8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001996:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f043 0202 	orr.w	r2, r3, #2
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ff50 	bl	8001868 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d136      	bne.n	8001a42 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d109      	bne.n	80019f2 <I2S_IRQHandler+0xbc>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e8:	2b80      	cmp	r3, #128	; 0x80
 80019ea:	d102      	bne.n	80019f2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff ff45 	bl	800187c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d122      	bne.n	8001a42 <I2S_IRQHandler+0x10c>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0320 	and.w	r3, r3, #32
 8001a06:	2b20      	cmp	r3, #32
 8001a08:	d11b      	bne.n	8001a42 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a18:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a34:	f043 0204 	orr.w	r2, r3, #4
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ff13 	bl	8001868 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001a42:	bf00      	nop
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a92      	ldr	r2, [pc, #584]	; (8001cac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d101      	bne.n	8001a6a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001a66:	4b92      	ldr	r3, [pc, #584]	; (8001cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001a68:	e001      	b.n	8001a6e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001a6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a8b      	ldr	r2, [pc, #556]	; (8001cac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d101      	bne.n	8001a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001a84:	4b8a      	ldr	r3, [pc, #552]	; (8001cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001a86:	e001      	b.n	8001a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001a88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a98:	d004      	beq.n	8001aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f040 8099 	bne.w	8001bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d107      	bne.n	8001abe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d002      	beq.n	8001abe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f925 	bl	8001d08 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d107      	bne.n	8001ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f9c8 	bl	8001e68 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ade:	2b40      	cmp	r3, #64	; 0x40
 8001ae0:	d13a      	bne.n	8001b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	f003 0320 	and.w	r3, r3, #32
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d035      	beq.n	8001b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a6e      	ldr	r2, [pc, #440]	; (8001cac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d101      	bne.n	8001afa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001af6:	4b6e      	ldr	r3, [pc, #440]	; (8001cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001af8:	e001      	b.n	8001afe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001afa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4969      	ldr	r1, [pc, #420]	; (8001cac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b06:	428b      	cmp	r3, r1
 8001b08:	d101      	bne.n	8001b0e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001b0a:	4b69      	ldr	r3, [pc, #420]	; (8001cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b0c:	e001      	b.n	8001b12 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001b0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b16:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b26:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	f043 0202 	orr.w	r2, r3, #2
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff fe88 	bl	8001868 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	f040 80c3 	bne.w	8001cea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f003 0320 	and.w	r3, r3, #32
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 80bd 	beq.w	8001cea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b7e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a49      	ldr	r2, [pc, #292]	; (8001cac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d101      	bne.n	8001b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001b8a:	4b49      	ldr	r3, [pc, #292]	; (8001cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b8c:	e001      	b.n	8001b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001b8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4944      	ldr	r1, [pc, #272]	; (8001cac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b9a:	428b      	cmp	r3, r1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001b9e:	4b44      	ldr	r3, [pc, #272]	; (8001cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ba0:	e001      	b.n	8001ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001ba2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ba6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001baa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f043 0204 	orr.w	r2, r3, #4
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff fe4a 	bl	8001868 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001bd4:	e089      	b.n	8001cea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d107      	bne.n	8001bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f8be 	bl	8001d6c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d107      	bne.n	8001c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f8fd 	bl	8001e04 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c10:	2b40      	cmp	r3, #64	; 0x40
 8001c12:	d12f      	bne.n	8001c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f003 0320 	and.w	r3, r3, #32
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d02a      	beq.n	8001c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c2c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1e      	ldr	r2, [pc, #120]	; (8001cac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d101      	bne.n	8001c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001c38:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c3a:	e001      	b.n	8001c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001c3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4919      	ldr	r1, [pc, #100]	; (8001cac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c48:	428b      	cmp	r3, r1
 8001c4a:	d101      	bne.n	8001c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001c4c:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c4e:	e001      	b.n	8001c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001c50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c58:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	f043 0202 	orr.w	r2, r3, #2
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff fdfa 	bl	8001868 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d136      	bne.n	8001cec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d031      	beq.n	8001cec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a07      	ldr	r2, [pc, #28]	; (8001cac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d101      	bne.n	8001c96 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c94:	e001      	b.n	8001c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001c96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4902      	ldr	r1, [pc, #8]	; (8001cac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ca2:	428b      	cmp	r3, r1
 8001ca4:	d106      	bne.n	8001cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001ca6:	4b02      	ldr	r3, [pc, #8]	; (8001cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ca8:	e006      	b.n	8001cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001caa:	bf00      	nop
 8001cac:	40003800 	.word	0x40003800
 8001cb0:	40003400 	.word	0x40003400
 8001cb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cb8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001cbc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ccc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	f043 0204 	orr.w	r2, r3, #4
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff fdc0 	bl	8001868 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ce8:	e000      	b.n	8001cec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001cea:	bf00      	nop
}
 8001cec:	bf00      	nop
 8001cee:	3720      	adds	r7, #32
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	1c99      	adds	r1, r3, #2
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6251      	str	r1, [r2, #36]	; 0x24
 8001d1a:	881a      	ldrh	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d113      	bne.n	8001d62 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d48:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d106      	bne.n	8001d62 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ffc9 	bl	8001cf4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	1c99      	adds	r1, r3, #2
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6251      	str	r1, [r2, #36]	; 0x24
 8001d7e:	8819      	ldrh	r1, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a1d      	ldr	r2, [pc, #116]	; (8001dfc <I2SEx_TxISR_I2SExt+0x90>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d101      	bne.n	8001d8e <I2SEx_TxISR_I2SExt+0x22>
 8001d8a:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <I2SEx_TxISR_I2SExt+0x94>)
 8001d8c:	e001      	b.n	8001d92 <I2SEx_TxISR_I2SExt+0x26>
 8001d8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d92:	460a      	mov	r2, r1
 8001d94:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d121      	bne.n	8001df2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <I2SEx_TxISR_I2SExt+0x90>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d101      	bne.n	8001dbc <I2SEx_TxISR_I2SExt+0x50>
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <I2SEx_TxISR_I2SExt+0x94>)
 8001dba:	e001      	b.n	8001dc0 <I2SEx_TxISR_I2SExt+0x54>
 8001dbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	490d      	ldr	r1, [pc, #52]	; (8001dfc <I2SEx_TxISR_I2SExt+0x90>)
 8001dc8:	428b      	cmp	r3, r1
 8001dca:	d101      	bne.n	8001dd0 <I2SEx_TxISR_I2SExt+0x64>
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <I2SEx_TxISR_I2SExt+0x94>)
 8001dce:	e001      	b.n	8001dd4 <I2SEx_TxISR_I2SExt+0x68>
 8001dd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001dd8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d106      	bne.n	8001df2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff ff81 	bl	8001cf4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40003800 	.word	0x40003800
 8001e00:	40003400 	.word	0x40003400

08001e04 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68d8      	ldr	r0, [r3, #12]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	1c99      	adds	r1, r3, #2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001e1c:	b282      	uxth	r2, r0
 8001e1e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	3b01      	subs	r3, #1
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d113      	bne.n	8001e60 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e46:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d106      	bne.n	8001e60 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ff4a 	bl	8001cf4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a20      	ldr	r2, [pc, #128]	; (8001ef8 <I2SEx_RxISR_I2SExt+0x90>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d101      	bne.n	8001e7e <I2SEx_RxISR_I2SExt+0x16>
 8001e7a:	4b20      	ldr	r3, [pc, #128]	; (8001efc <I2SEx_RxISR_I2SExt+0x94>)
 8001e7c:	e001      	b.n	8001e82 <I2SEx_RxISR_I2SExt+0x1a>
 8001e7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e82:	68d8      	ldr	r0, [r3, #12]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	1c99      	adds	r1, r3, #2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001e8e:	b282      	uxth	r2, r0
 8001e90:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d121      	bne.n	8001eee <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a12      	ldr	r2, [pc, #72]	; (8001ef8 <I2SEx_RxISR_I2SExt+0x90>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d101      	bne.n	8001eb8 <I2SEx_RxISR_I2SExt+0x50>
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <I2SEx_RxISR_I2SExt+0x94>)
 8001eb6:	e001      	b.n	8001ebc <I2SEx_RxISR_I2SExt+0x54>
 8001eb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	490d      	ldr	r1, [pc, #52]	; (8001ef8 <I2SEx_RxISR_I2SExt+0x90>)
 8001ec4:	428b      	cmp	r3, r1
 8001ec6:	d101      	bne.n	8001ecc <I2SEx_RxISR_I2SExt+0x64>
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <I2SEx_RxISR_I2SExt+0x94>)
 8001eca:	e001      	b.n	8001ed0 <I2SEx_RxISR_I2SExt+0x68>
 8001ecc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ed0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ed4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d106      	bne.n	8001eee <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff ff03 	bl	8001cf4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40003800 	.word	0x40003800
 8001efc:	40003400 	.word	0x40003400

08001f00 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f02:	b08f      	sub	sp, #60	; 0x3c
 8001f04:	af0a      	add	r7, sp, #40	; 0x28
 8001f06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e10f      	b.n	8002132 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d106      	bne.n	8001f32 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f005 f971 	bl	8007214 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2203      	movs	r2, #3
 8001f36:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d102      	bne.n	8001f4c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f002 f8ba 	bl	80040ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	687e      	ldr	r6, [r7, #4]
 8001f5e:	466d      	mov	r5, sp
 8001f60:	f106 0410 	add.w	r4, r6, #16
 8001f64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f70:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f74:	1d33      	adds	r3, r6, #4
 8001f76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f78:	6838      	ldr	r0, [r7, #0]
 8001f7a:	f001 ff92 	bl	8003ea2 <USB_CoreInit>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0d0      	b.n	8002132 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f002 f8a8 	bl	80040ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	73fb      	strb	r3, [r7, #15]
 8001fa0:	e04a      	b.n	8002038 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	1a9b      	subs	r3, r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	440b      	add	r3, r1
 8001fb0:	333d      	adds	r3, #61	; 0x3d
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fb6:	7bfa      	ldrb	r2, [r7, #15]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	1a9b      	subs	r3, r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	333c      	adds	r3, #60	; 0x3c
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	b298      	uxth	r0, r3
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	1a9b      	subs	r3, r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	440b      	add	r3, r1
 8001fdc:	3342      	adds	r3, #66	; 0x42
 8001fde:	4602      	mov	r2, r0
 8001fe0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fe2:	7bfa      	ldrb	r2, [r7, #15]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	1a9b      	subs	r3, r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	333f      	adds	r3, #63	; 0x3f
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	1a9b      	subs	r3, r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	3344      	adds	r3, #68	; 0x44
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	1a9b      	subs	r3, r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	3348      	adds	r3, #72	; 0x48
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	1a9b      	subs	r3, r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	3350      	adds	r3, #80	; 0x50
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002032:	7bfb      	ldrb	r3, [r7, #15]
 8002034:	3301      	adds	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	7bfa      	ldrb	r2, [r7, #15]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	429a      	cmp	r2, r3
 8002040:	d3af      	bcc.n	8001fa2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002042:	2300      	movs	r3, #0
 8002044:	73fb      	strb	r3, [r7, #15]
 8002046:	e044      	b.n	80020d2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	1a9b      	subs	r3, r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800205e:	7bfa      	ldrb	r2, [r7, #15]
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	1a9b      	subs	r3, r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002070:	7bfa      	ldrb	r2, [r7, #15]
 8002072:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002074:	7bfa      	ldrb	r2, [r7, #15]
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	1a9b      	subs	r3, r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800208a:	7bfa      	ldrb	r2, [r7, #15]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	1a9b      	subs	r3, r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	1a9b      	subs	r3, r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	3301      	adds	r3, #1
 80020d0:	73fb      	strb	r3, [r7, #15]
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d3b5      	bcc.n	8002048 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	687e      	ldr	r6, [r7, #4]
 80020e4:	466d      	mov	r5, sp
 80020e6:	f106 0410 	add.w	r4, r6, #16
 80020ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80020fa:	1d33      	adds	r3, r6, #4
 80020fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020fe:	6838      	ldr	r0, [r7, #0]
 8002100:	f002 f840 	bl	8004184 <USB_DevInit>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2202      	movs	r2, #2
 800210e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e00d      	b.n	8002132 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f003 f8bc 	bl	80052a8 <USB_DevDisconnect>

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800213a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_PCD_Start+0x1c>
 8002152:	2302      	movs	r3, #2
 8002154:	e020      	b.n	8002198 <HAL_PCD_Start+0x5e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	2b01      	cmp	r3, #1
 8002164:	d109      	bne.n	800217a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800216a:	2b01      	cmp	r3, #1
 800216c:	d005      	beq.n	800217a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002172:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f001 ff92 	bl	80040a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f003 f86c 	bl	8005266 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021a0:	b590      	push	{r4, r7, lr}
 80021a2:	b08d      	sub	sp, #52	; 0x34
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f003 f92a 	bl	8005410 <USB_GetMode>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f040 839d 	bne.w	80028fe <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f003 f88e 	bl	80052ea <USB_ReadInterrupts>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 8393 	beq.w	80028fc <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f003 f885 	bl	80052ea <USB_ReadInterrupts>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d107      	bne.n	80021fa <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695a      	ldr	r2, [r3, #20]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f002 0202 	and.w	r2, r2, #2
 80021f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f003 f873 	bl	80052ea <USB_ReadInterrupts>
 8002204:	4603      	mov	r3, r0
 8002206:	f003 0310 	and.w	r3, r3, #16
 800220a:	2b10      	cmp	r3, #16
 800220c:	d161      	bne.n	80022d2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699a      	ldr	r2, [r3, #24]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0210 	bic.w	r2, r2, #16
 800221c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	f003 020f 	and.w	r2, r3, #15
 800222a:	4613      	mov	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	3304      	adds	r3, #4
 800223c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	0c5b      	lsrs	r3, r3, #17
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	2b02      	cmp	r3, #2
 8002248:	d124      	bne.n	8002294 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002250:	4013      	ands	r3, r2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d035      	beq.n	80022c2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002260:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002264:	b29b      	uxth	r3, r3
 8002266:	461a      	mov	r2, r3
 8002268:	6a38      	ldr	r0, [r7, #32]
 800226a:	f002 feaa 	bl	8004fc2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800227a:	441a      	add	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	699a      	ldr	r2, [r3, #24]
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	091b      	lsrs	r3, r3, #4
 8002288:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800228c:	441a      	add	r2, r3
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	619a      	str	r2, [r3, #24]
 8002292:	e016      	b.n	80022c2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	0c5b      	lsrs	r3, r3, #17
 8002298:	f003 030f 	and.w	r3, r3, #15
 800229c:	2b06      	cmp	r3, #6
 800229e:	d110      	bne.n	80022c2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022a6:	2208      	movs	r2, #8
 80022a8:	4619      	mov	r1, r3
 80022aa:	6a38      	ldr	r0, [r7, #32]
 80022ac:	f002 fe89 	bl	8004fc2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	699a      	ldr	r2, [r3, #24]
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	091b      	lsrs	r3, r3, #4
 80022b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022bc:	441a      	add	r2, r3
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	699a      	ldr	r2, [r3, #24]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 0210 	orr.w	r2, r2, #16
 80022d0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 f807 	bl	80052ea <USB_ReadInterrupts>
 80022dc:	4603      	mov	r3, r0
 80022de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022e6:	d16e      	bne.n	80023c6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f003 f80d 	bl	8005310 <USB_ReadDevAllOutEpInterrupt>
 80022f6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80022f8:	e062      	b.n	80023c0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80022fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b00      	cmp	r3, #0
 8002302:	d057      	beq.n	80023b4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	4611      	mov	r1, r2
 800230e:	4618      	mov	r0, r3
 8002310:	f003 f832 	bl	8005378 <USB_ReadDevOutEPInterrupt>
 8002314:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00c      	beq.n	800233a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	4413      	add	r3, r2
 8002328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800232c:	461a      	mov	r2, r3
 800232e:	2301      	movs	r3, #1
 8002330:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002332:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 fdb1 	bl	8002e9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00c      	beq.n	800235e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	015a      	lsls	r2, r3, #5
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	4413      	add	r3, r2
 800234c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002350:	461a      	mov	r2, r3
 8002352:	2308      	movs	r3, #8
 8002354:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002356:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 feab 	bl	80030b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	f003 0310 	and.w	r3, r3, #16
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	4413      	add	r3, r2
 8002370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002374:	461a      	mov	r2, r3
 8002376:	2310      	movs	r3, #16
 8002378:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	f003 0320 	and.w	r3, r3, #32
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	015a      	lsls	r2, r3, #5
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	4413      	add	r3, r2
 800238c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002390:	461a      	mov	r2, r3
 8002392:	2320      	movs	r3, #32
 8002394:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d009      	beq.n	80023b4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ac:	461a      	mov	r2, r3
 80023ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023b2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	3301      	adds	r3, #1
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023bc:	085b      	lsrs	r3, r3, #1
 80023be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d199      	bne.n	80022fa <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f002 ff8d 	bl	80052ea <USB_ReadInterrupts>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023da:	f040 80c0 	bne.w	800255e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f002 ffae 	bl	8005344 <USB_ReadDevAllInEpInterrupt>
 80023e8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80023ee:	e0b2      	b.n	8002556 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80023f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 80a7 	beq.w	800254a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	4611      	mov	r1, r2
 8002406:	4618      	mov	r0, r3
 8002408:	f002 ffd4 	bl	80053b4 <USB_ReadDevInEPInterrupt>
 800240c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d057      	beq.n	80024c8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	2201      	movs	r2, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800242c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	43db      	mvns	r3, r3
 8002432:	69f9      	ldr	r1, [r7, #28]
 8002434:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002438:	4013      	ands	r3, r2
 800243a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	4413      	add	r3, r2
 8002444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002448:	461a      	mov	r2, r3
 800244a:	2301      	movs	r3, #1
 800244c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d132      	bne.n	80024bc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245a:	4613      	mov	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	3348      	adds	r3, #72	; 0x48
 8002466:	6819      	ldr	r1, [r3, #0]
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246c:	4613      	mov	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4403      	add	r3, r0
 8002476:	3344      	adds	r3, #68	; 0x44
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4419      	add	r1, r3
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002480:	4613      	mov	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	1a9b      	subs	r3, r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4403      	add	r3, r0
 800248a:	3348      	adds	r3, #72	; 0x48
 800248c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	2b00      	cmp	r3, #0
 8002492:	d113      	bne.n	80024bc <HAL_PCD_IRQHandler+0x31c>
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002498:	4613      	mov	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	3350      	adds	r3, #80	; 0x50
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d108      	bne.n	80024bc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024b4:	461a      	mov	r2, r3
 80024b6:	2101      	movs	r1, #1
 80024b8:	f002 ffdc 	bl	8005474 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	4619      	mov	r1, r3
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f004 ff35 	bl	8007332 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d008      	beq.n	80024e4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024de:	461a      	mov	r2, r3
 80024e0:	2308      	movs	r3, #8
 80024e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d008      	beq.n	8002500 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024fa:	461a      	mov	r2, r3
 80024fc:	2310      	movs	r3, #16
 80024fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d008      	beq.n	800251c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	015a      	lsls	r2, r3, #5
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	4413      	add	r3, r2
 8002512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002516:	461a      	mov	r2, r3
 8002518:	2340      	movs	r3, #64	; 0x40
 800251a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d008      	beq.n	8002538 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	015a      	lsls	r2, r3, #5
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	4413      	add	r3, r2
 800252e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002532:	461a      	mov	r2, r3
 8002534:	2302      	movs	r3, #2
 8002536:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002542:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 fc1b 	bl	8002d80 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	3301      	adds	r3, #1
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002552:	085b      	lsrs	r3, r3, #1
 8002554:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002558:	2b00      	cmp	r3, #0
 800255a:	f47f af49 	bne.w	80023f0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f002 fec1 	bl	80052ea <USB_ReadInterrupts>
 8002568:	4603      	mov	r3, r0
 800256a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800256e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002572:	d122      	bne.n	80025ba <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	69fa      	ldr	r2, [r7, #28]
 800257e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002582:	f023 0301 	bic.w	r3, r3, #1
 8002586:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800258e:	2b01      	cmp	r3, #1
 8002590:	d108      	bne.n	80025a4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800259a:	2100      	movs	r1, #0
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fe27 	bl	80031f0 <HAL_PCDEx_LPM_Callback>
 80025a2:	e002      	b.n	80025aa <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f004 ff3b 	bl	8007420 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695a      	ldr	r2, [r3, #20]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80025b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f002 fe93 	bl	80052ea <USB_ReadInterrupts>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025ce:	d112      	bne.n	80025f6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d102      	bne.n	80025e6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f004 fef7 	bl	80073d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80025f4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f002 fe75 	bl	80052ea <USB_ReadInterrupts>
 8002600:	4603      	mov	r3, r0
 8002602:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800260a:	f040 80c7 	bne.w	800279c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800261c:	f023 0301 	bic.w	r3, r3, #1
 8002620:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2110      	movs	r1, #16
 8002628:	4618      	mov	r0, r3
 800262a:	f001 ff0f 	bl	800444c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800262e:	2300      	movs	r3, #0
 8002630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002632:	e056      	b.n	80026e2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	4413      	add	r3, r2
 800263c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002640:	461a      	mov	r2, r3
 8002642:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002646:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	4413      	add	r3, r2
 8002650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002658:	0151      	lsls	r1, r2, #5
 800265a:	69fa      	ldr	r2, [r7, #28]
 800265c:	440a      	add	r2, r1
 800265e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002662:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002666:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	4413      	add	r3, r2
 8002670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002678:	0151      	lsls	r1, r2, #5
 800267a:	69fa      	ldr	r2, [r7, #28]
 800267c:	440a      	add	r2, r1
 800267e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002682:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002686:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	4413      	add	r3, r2
 8002690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002694:	461a      	mov	r2, r3
 8002696:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800269a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800269c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ac:	0151      	lsls	r1, r2, #5
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	440a      	add	r2, r1
 80026b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026ba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80026bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026cc:	0151      	lsls	r1, r2, #5
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	440a      	add	r2, r1
 80026d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026da:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026de:	3301      	adds	r3, #1
 80026e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d3a3      	bcc.n	8002634 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	69fa      	ldr	r2, [r7, #28]
 80026f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026fa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80026fe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	2b00      	cmp	r3, #0
 8002706:	d016      	beq.n	8002736 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800270e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002712:	69fa      	ldr	r2, [r7, #28]
 8002714:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002718:	f043 030b 	orr.w	r3, r3, #11
 800271c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800272e:	f043 030b 	orr.w	r3, r3, #11
 8002732:	6453      	str	r3, [r2, #68]	; 0x44
 8002734:	e015      	b.n	8002762 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	69fa      	ldr	r2, [r7, #28]
 8002740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002744:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002748:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800274c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	69fa      	ldr	r2, [r7, #28]
 8002758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800275c:	f043 030b 	orr.w	r3, r3, #11
 8002760:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002770:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002774:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002786:	461a      	mov	r2, r3
 8002788:	f002 fe74 	bl	8005474 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800279a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f002 fda2 	bl	80052ea <USB_ReadInterrupts>
 80027a6:	4603      	mov	r3, r0
 80027a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027b0:	d124      	bne.n	80027fc <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f002 fe38 	bl	800542c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f001 fea0 	bl	8004506 <USB_GetDevSpeed>
 80027c6:	4603      	mov	r3, r0
 80027c8:	461a      	mov	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681c      	ldr	r4, [r3, #0]
 80027d2:	f001 f97d 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 80027d6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	4620      	mov	r0, r4
 80027e2:	f001 fbbf 	bl	8003f64 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f004 fdcb 	bl	8007382 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695a      	ldr	r2, [r3, #20]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80027fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f002 fd72 	bl	80052ea <USB_ReadInterrupts>
 8002806:	4603      	mov	r3, r0
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b08      	cmp	r3, #8
 800280e:	d10a      	bne.n	8002826 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f004 fda8 	bl	8007366 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f002 0208 	and.w	r2, r2, #8
 8002824:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f002 fd5d 	bl	80052ea <USB_ReadInterrupts>
 8002830:	4603      	mov	r3, r0
 8002832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800283a:	d10f      	bne.n	800285c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	b2db      	uxtb	r3, r3
 8002844:	4619      	mov	r1, r3
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f004 fe0a 	bl	8007460 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800285a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f002 fd42 	bl	80052ea <USB_ReadInterrupts>
 8002866:	4603      	mov	r3, r0
 8002868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800286c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002870:	d10f      	bne.n	8002892 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	b2db      	uxtb	r3, r3
 800287a:	4619      	mov	r1, r3
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f004 fddd 	bl	800743c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	695a      	ldr	r2, [r3, #20]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002890:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f002 fd27 	bl	80052ea <USB_ReadInterrupts>
 800289c:	4603      	mov	r3, r0
 800289e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80028a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a6:	d10a      	bne.n	80028be <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f004 fdeb 	bl	8007484 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695a      	ldr	r2, [r3, #20]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80028bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f002 fd11 	bl	80052ea <USB_ReadInterrupts>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d115      	bne.n	80028fe <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f004 fddb 	bl	80074a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6859      	ldr	r1, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	e000      	b.n	80028fe <HAL_PCD_IRQHandler+0x75e>
      return;
 80028fc:	bf00      	nop
    }
  }
}
 80028fe:	3734      	adds	r7, #52	; 0x34
 8002900:	46bd      	mov	sp, r7
 8002902:	bd90      	pop	{r4, r7, pc}

08002904 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_PCD_SetAddress+0x1a>
 800291a:	2302      	movs	r3, #2
 800291c:	e013      	b.n	8002946 <HAL_PCD_SetAddress+0x42>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	78fa      	ldrb	r2, [r7, #3]
 800292a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	4611      	mov	r1, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f002 fc6f 	bl	800521a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	4608      	mov	r0, r1
 8002958:	4611      	mov	r1, r2
 800295a:	461a      	mov	r2, r3
 800295c:	4603      	mov	r3, r0
 800295e:	70fb      	strb	r3, [r7, #3]
 8002960:	460b      	mov	r3, r1
 8002962:	803b      	strh	r3, [r7, #0]
 8002964:	4613      	mov	r3, r2
 8002966:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800296c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002970:	2b00      	cmp	r3, #0
 8002972:	da0f      	bge.n	8002994 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	f003 020f 	and.w	r2, r3, #15
 800297a:	4613      	mov	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	1a9b      	subs	r3, r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	3338      	adds	r3, #56	; 0x38
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	4413      	add	r3, r2
 8002988:	3304      	adds	r3, #4
 800298a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	705a      	strb	r2, [r3, #1]
 8002992:	e00f      	b.n	80029b4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	f003 020f 	and.w	r2, r3, #15
 800299a:	4613      	mov	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	4413      	add	r3, r2
 80029aa:	3304      	adds	r3, #4
 80029ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029b4:	78fb      	ldrb	r3, [r7, #3]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029c0:	883a      	ldrh	r2, [r7, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	78ba      	ldrb	r2, [r7, #2]
 80029ca:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	785b      	ldrb	r3, [r3, #1]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d004      	beq.n	80029de <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029de:	78bb      	ldrb	r3, [r7, #2]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d102      	bne.n	80029ea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_PCD_EP_Open+0xaa>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e00e      	b.n	8002a16 <HAL_PCD_EP_Open+0xc8>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68f9      	ldr	r1, [r7, #12]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f001 fda2 	bl	8004550 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002a14:	7afb      	ldrb	r3, [r7, #11]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	460b      	mov	r3, r1
 8002a28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	da0f      	bge.n	8002a52 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a32:	78fb      	ldrb	r3, [r7, #3]
 8002a34:	f003 020f 	and.w	r2, r3, #15
 8002a38:	4613      	mov	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	3338      	adds	r3, #56	; 0x38
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	4413      	add	r3, r2
 8002a46:	3304      	adds	r3, #4
 8002a48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	705a      	strb	r2, [r3, #1]
 8002a50:	e00f      	b.n	8002a72 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a52:	78fb      	ldrb	r3, [r7, #3]
 8002a54:	f003 020f 	and.w	r2, r3, #15
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	4413      	add	r3, r2
 8002a68:	3304      	adds	r3, #4
 8002a6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_PCD_EP_Close+0x6e>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e00e      	b.n	8002aaa <HAL_PCD_EP_Close+0x8c>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68f9      	ldr	r1, [r7, #12]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f001 fde0 	bl	8004660 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b086      	sub	sp, #24
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	603b      	str	r3, [r7, #0]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ac2:	7afb      	ldrb	r3, [r7, #11]
 8002ac4:	f003 020f 	and.w	r2, r3, #15
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	1a9b      	subs	r3, r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3304      	adds	r3, #4
 8002ada:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	2200      	movs	r2, #0
 8002aec:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2200      	movs	r2, #0
 8002af2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002af4:	7afb      	ldrb	r3, [r7, #11]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d102      	bne.n	8002b0e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b0e:	7afb      	ldrb	r3, [r7, #11]
 8002b10:	f003 030f 	and.w	r3, r3, #15
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d109      	bne.n	8002b2c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6818      	ldr	r0, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	461a      	mov	r2, r3
 8002b24:	6979      	ldr	r1, [r7, #20]
 8002b26:	f002 f8bb 	bl	8004ca0 <USB_EP0StartXfer>
 8002b2a:	e008      	b.n	8002b3e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	6979      	ldr	r1, [r7, #20]
 8002b3a:	f001 fe6d 	bl	8004818 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	f003 020f 	and.w	r2, r3, #15
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002b6a:	681b      	ldr	r3, [r3, #0]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	607a      	str	r2, [r7, #4]
 8002b82:	603b      	str	r3, [r7, #0]
 8002b84:	460b      	mov	r3, r1
 8002b86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b88:	7afb      	ldrb	r3, [r7, #11]
 8002b8a:	f003 020f 	and.w	r2, r3, #15
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	3338      	adds	r3, #56	; 0x38
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bb8:	7afb      	ldrb	r3, [r7, #11]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d102      	bne.n	8002bd2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bd2:	7afb      	ldrb	r3, [r7, #11]
 8002bd4:	f003 030f 	and.w	r3, r3, #15
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d109      	bne.n	8002bf0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6818      	ldr	r0, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	6979      	ldr	r1, [r7, #20]
 8002bea:	f002 f859 	bl	8004ca0 <USB_EP0StartXfer>
 8002bee:	e008      	b.n	8002c02 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	6979      	ldr	r1, [r7, #20]
 8002bfe:	f001 fe0b 	bl	8004818 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c18:	78fb      	ldrb	r3, [r7, #3]
 8002c1a:	f003 020f 	and.w	r2, r3, #15
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d901      	bls.n	8002c2a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e050      	b.n	8002ccc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	da0f      	bge.n	8002c52 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	f003 020f 	and.w	r2, r3, #15
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	3338      	adds	r3, #56	; 0x38
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	4413      	add	r3, r2
 8002c46:	3304      	adds	r3, #4
 8002c48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	705a      	strb	r2, [r3, #1]
 8002c50:	e00d      	b.n	8002c6e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c52:	78fa      	ldrb	r2, [r7, #3]
 8002c54:	4613      	mov	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	1a9b      	subs	r3, r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	4413      	add	r3, r2
 8002c64:	3304      	adds	r3, #4
 8002c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2201      	movs	r2, #1
 8002c72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_PCD_EP_SetStall+0x82>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e01e      	b.n	8002ccc <HAL_PCD_EP_SetStall+0xc0>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68f9      	ldr	r1, [r7, #12]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f002 f9e8 	bl	8005072 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	f003 030f 	and.w	r3, r3, #15
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10a      	bne.n	8002cc2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6818      	ldr	r0, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	b2d9      	uxtb	r1, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	f002 fbd9 	bl	8005474 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	f003 020f 	and.w	r2, r3, #15
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d901      	bls.n	8002cf2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e042      	b.n	8002d78 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	da0f      	bge.n	8002d1a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	f003 020f 	and.w	r2, r3, #15
 8002d00:	4613      	mov	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	3338      	adds	r3, #56	; 0x38
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3304      	adds	r3, #4
 8002d10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2201      	movs	r2, #1
 8002d16:	705a      	strb	r2, [r3, #1]
 8002d18:	e00f      	b.n	8002d3a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d1a:	78fb      	ldrb	r3, [r7, #3]
 8002d1c:	f003 020f 	and.w	r2, r3, #15
 8002d20:	4613      	mov	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	4413      	add	r3, r2
 8002d30:	3304      	adds	r3, #4
 8002d32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_PCD_EP_ClrStall+0x86>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e00e      	b.n	8002d78 <HAL_PCD_EP_ClrStall+0xa4>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68f9      	ldr	r1, [r7, #12]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f002 f9f0 	bl	800514e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	; 0x28
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	4613      	mov	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	3338      	adds	r3, #56	; 0x38
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	4413      	add	r3, r2
 8002da4:	3304      	adds	r3, #4
 8002da6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	699a      	ldr	r2, [r3, #24]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d901      	bls.n	8002db8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e06c      	b.n	8002e92 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	695a      	ldr	r2, [r3, #20]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	69fa      	ldr	r2, [r7, #28]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d902      	bls.n	8002dd4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	3303      	adds	r3, #3
 8002dd8:	089b      	lsrs	r3, r3, #2
 8002dda:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ddc:	e02b      	b.n	8002e36 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	695a      	ldr	r2, [r3, #20]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	69fa      	ldr	r2, [r7, #28]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d902      	bls.n	8002dfa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3303      	adds	r3, #3
 8002dfe:	089b      	lsrs	r3, r3, #2
 8002e00:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	68d9      	ldr	r1, [r3, #12]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	4603      	mov	r3, r0
 8002e18:	6978      	ldr	r0, [r7, #20]
 8002e1a:	f002 f894 	bl	8004f46 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	441a      	add	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	699a      	ldr	r2, [r3, #24]
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	441a      	add	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d809      	bhi.n	8002e60 <PCD_WriteEmptyTxFifo+0xe0>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	699a      	ldr	r2, [r3, #24]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d203      	bcs.n	8002e60 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1be      	bne.n	8002dde <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	695a      	ldr	r2, [r3, #20]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d811      	bhi.n	8002e90 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	2201      	movs	r2, #1
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	6939      	ldr	r1, [r7, #16]
 8002e88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3720      	adds	r7, #32
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	333c      	adds	r3, #60	; 0x3c
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	f040 80a0 	bne.w	8003014 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d015      	beq.n	8002f0a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4a72      	ldr	r2, [pc, #456]	; (80030ac <PCD_EP_OutXfrComplete_int+0x210>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	f240 80dd 	bls.w	80030a2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 80d7 	beq.w	80030a2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f00:	461a      	mov	r2, r3
 8002f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f06:	6093      	str	r3, [r2, #8]
 8002f08:	e0cb      	b.n	80030a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	f003 0320 	and.w	r3, r3, #32
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d009      	beq.n	8002f28 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f20:	461a      	mov	r2, r3
 8002f22:	2320      	movs	r3, #32
 8002f24:	6093      	str	r3, [r2, #8]
 8002f26:	e0bc      	b.n	80030a2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f040 80b7 	bne.w	80030a2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4a5d      	ldr	r2, [pc, #372]	; (80030ac <PCD_EP_OutXfrComplete_int+0x210>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d90f      	bls.n	8002f5c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f52:	461a      	mov	r2, r3
 8002f54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f58:	6093      	str	r3, [r2, #8]
 8002f5a:	e0a2      	b.n	80030a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f6e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	0159      	lsls	r1, r3, #5
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	440b      	add	r3, r1
 8002f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002f82:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	1a9b      	subs	r3, r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4403      	add	r3, r0
 8002f92:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002f96:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002faa:	6819      	ldr	r1, [r3, #0]
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4403      	add	r3, r0
 8002fba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4419      	add	r1, r3
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4403      	add	r3, r0
 8002fd0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fd4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d114      	bne.n	8003006 <PCD_EP_OutXfrComplete_int+0x16a>
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	1a9b      	subs	r3, r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d108      	bne.n	8003006 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6818      	ldr	r0, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ffe:	461a      	mov	r2, r3
 8003000:	2101      	movs	r1, #1
 8003002:	f002 fa37 	bl	8005474 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	4619      	mov	r1, r3
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f004 f975 	bl	80072fc <HAL_PCD_DataOutStageCallback>
 8003012:	e046      	b.n	80030a2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4a26      	ldr	r2, [pc, #152]	; (80030b0 <PCD_EP_OutXfrComplete_int+0x214>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d124      	bne.n	8003066 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	4413      	add	r3, r2
 800302e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003032:	461a      	mov	r2, r3
 8003034:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003038:	6093      	str	r3, [r2, #8]
 800303a:	e032      	b.n	80030a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	d008      	beq.n	8003058 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	015a      	lsls	r2, r3, #5
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4413      	add	r3, r2
 800304e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003052:	461a      	mov	r2, r3
 8003054:	2320      	movs	r3, #32
 8003056:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	4619      	mov	r1, r3
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f004 f94c 	bl	80072fc <HAL_PCD_DataOutStageCallback>
 8003064:	e01d      	b.n	80030a2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d114      	bne.n	8003096 <PCD_EP_OutXfrComplete_int+0x1fa>
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d108      	bne.n	8003096 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800308e:	461a      	mov	r2, r3
 8003090:	2100      	movs	r1, #0
 8003092:	f002 f9ef 	bl	8005474 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	b2db      	uxtb	r3, r3
 800309a:	4619      	mov	r1, r3
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f004 f92d 	bl	80072fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	4f54300a 	.word	0x4f54300a
 80030b0:	4f54310a 	.word	0x4f54310a

080030b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	333c      	adds	r3, #60	; 0x3c
 80030cc:	3304      	adds	r3, #4
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4a15      	ldr	r2, [pc, #84]	; (800313c <PCD_EP_OutSetupPacket_int+0x88>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d90e      	bls.n	8003108 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d009      	beq.n	8003108 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	015a      	lsls	r2, r3, #5
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4413      	add	r3, r2
 80030fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003100:	461a      	mov	r2, r3
 8003102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003106:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f004 f8e5 	bl	80072d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4a0a      	ldr	r2, [pc, #40]	; (800313c <PCD_EP_OutSetupPacket_int+0x88>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d90c      	bls.n	8003130 <PCD_EP_OutSetupPacket_int+0x7c>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d108      	bne.n	8003130 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003128:	461a      	mov	r2, r3
 800312a:	2101      	movs	r1, #1
 800312c:	f002 f9a2 	bl	8005474 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	4f54300a 	.word	0x4f54300a

08003140 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	70fb      	strb	r3, [r7, #3]
 800314c:	4613      	mov	r3, r2
 800314e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d107      	bne.n	800316e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800315e:	883b      	ldrh	r3, [r7, #0]
 8003160:	0419      	lsls	r1, r3, #16
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	430a      	orrs	r2, r1
 800316a:	629a      	str	r2, [r3, #40]	; 0x28
 800316c:	e028      	b.n	80031c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	0c1b      	lsrs	r3, r3, #16
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	4413      	add	r3, r2
 800317a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800317c:	2300      	movs	r3, #0
 800317e:	73fb      	strb	r3, [r7, #15]
 8003180:	e00d      	b.n	800319e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	3340      	adds	r3, #64	; 0x40
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	0c1b      	lsrs	r3, r3, #16
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	4413      	add	r3, r2
 8003196:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003198:	7bfb      	ldrb	r3, [r7, #15]
 800319a:	3301      	adds	r3, #1
 800319c:	73fb      	strb	r3, [r7, #15]
 800319e:	7bfa      	ldrb	r2, [r7, #15]
 80031a0:	78fb      	ldrb	r3, [r7, #3]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d3ec      	bcc.n	8003182 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80031a8:	883b      	ldrh	r3, [r7, #0]
 80031aa:	0418      	lsls	r0, r3, #16
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6819      	ldr	r1, [r3, #0]
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	4302      	orrs	r2, r0
 80031b8:	3340      	adds	r3, #64	; 0x40
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	460b      	mov	r3, r1
 80031d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	887a      	ldrh	r2, [r7, #2]
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e267      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d075      	beq.n	8003312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003226:	4b88      	ldr	r3, [pc, #544]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	2b04      	cmp	r3, #4
 8003230:	d00c      	beq.n	800324c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003232:	4b85      	ldr	r3, [pc, #532]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800323a:	2b08      	cmp	r3, #8
 800323c:	d112      	bne.n	8003264 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800323e:	4b82      	ldr	r3, [pc, #520]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800324a:	d10b      	bne.n	8003264 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324c:	4b7e      	ldr	r3, [pc, #504]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d05b      	beq.n	8003310 <HAL_RCC_OscConfig+0x108>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d157      	bne.n	8003310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e242      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326c:	d106      	bne.n	800327c <HAL_RCC_OscConfig+0x74>
 800326e:	4b76      	ldr	r3, [pc, #472]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a75      	ldr	r2, [pc, #468]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	e01d      	b.n	80032b8 <HAL_RCC_OscConfig+0xb0>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003284:	d10c      	bne.n	80032a0 <HAL_RCC_OscConfig+0x98>
 8003286:	4b70      	ldr	r3, [pc, #448]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a6f      	ldr	r2, [pc, #444]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 800328c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	4b6d      	ldr	r3, [pc, #436]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a6c      	ldr	r2, [pc, #432]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	e00b      	b.n	80032b8 <HAL_RCC_OscConfig+0xb0>
 80032a0:	4b69      	ldr	r3, [pc, #420]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a68      	ldr	r2, [pc, #416]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 80032a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	4b66      	ldr	r3, [pc, #408]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a65      	ldr	r2, [pc, #404]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 80032b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d013      	beq.n	80032e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7fd fd42 	bl	8000d48 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c8:	f7fd fd3e 	bl	8000d48 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	; 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e207      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032da:	4b5b      	ldr	r3, [pc, #364]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0xc0>
 80032e6:	e014      	b.n	8003312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e8:	f7fd fd2e 	bl	8000d48 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f0:	f7fd fd2a 	bl	8000d48 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b64      	cmp	r3, #100	; 0x64
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e1f3      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003302:	4b51      	ldr	r3, [pc, #324]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0xe8>
 800330e:	e000      	b.n	8003312 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d063      	beq.n	80033e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800331e:	4b4a      	ldr	r3, [pc, #296]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 030c 	and.w	r3, r3, #12
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00b      	beq.n	8003342 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800332a:	4b47      	ldr	r3, [pc, #284]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003332:	2b08      	cmp	r3, #8
 8003334:	d11c      	bne.n	8003370 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003336:	4b44      	ldr	r3, [pc, #272]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d116      	bne.n	8003370 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003342:	4b41      	ldr	r3, [pc, #260]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d005      	beq.n	800335a <HAL_RCC_OscConfig+0x152>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d001      	beq.n	800335a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e1c7      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335a:	4b3b      	ldr	r3, [pc, #236]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	4937      	ldr	r1, [pc, #220]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 800336a:	4313      	orrs	r3, r2
 800336c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336e:	e03a      	b.n	80033e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d020      	beq.n	80033ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003378:	4b34      	ldr	r3, [pc, #208]	; (800344c <HAL_RCC_OscConfig+0x244>)
 800337a:	2201      	movs	r2, #1
 800337c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337e:	f7fd fce3 	bl	8000d48 <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003386:	f7fd fcdf 	bl	8000d48 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e1a8      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003398:	4b2b      	ldr	r3, [pc, #172]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0f0      	beq.n	8003386 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a4:	4b28      	ldr	r3, [pc, #160]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4925      	ldr	r1, [pc, #148]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	600b      	str	r3, [r1, #0]
 80033b8:	e015      	b.n	80033e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ba:	4b24      	ldr	r3, [pc, #144]	; (800344c <HAL_RCC_OscConfig+0x244>)
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c0:	f7fd fcc2 	bl	8000d48 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c8:	f7fd fcbe 	bl	8000d48 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e187      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033da:	4b1b      	ldr	r3, [pc, #108]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d036      	beq.n	8003460 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d016      	beq.n	8003428 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033fa:	4b15      	ldr	r3, [pc, #84]	; (8003450 <HAL_RCC_OscConfig+0x248>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003400:	f7fd fca2 	bl	8000d48 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003408:	f7fd fc9e 	bl	8000d48 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e167      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800341a:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 800341c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0x200>
 8003426:	e01b      	b.n	8003460 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003428:	4b09      	ldr	r3, [pc, #36]	; (8003450 <HAL_RCC_OscConfig+0x248>)
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342e:	f7fd fc8b 	bl	8000d48 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003434:	e00e      	b.n	8003454 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003436:	f7fd fc87 	bl	8000d48 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d907      	bls.n	8003454 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e150      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
 8003448:	40023800 	.word	0x40023800
 800344c:	42470000 	.word	0x42470000
 8003450:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003454:	4b88      	ldr	r3, [pc, #544]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1ea      	bne.n	8003436 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 8097 	beq.w	800359c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800346e:	2300      	movs	r3, #0
 8003470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003472:	4b81      	ldr	r3, [pc, #516]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10f      	bne.n	800349e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	4b7d      	ldr	r3, [pc, #500]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	4a7c      	ldr	r2, [pc, #496]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348c:	6413      	str	r3, [r2, #64]	; 0x40
 800348e:	4b7a      	ldr	r3, [pc, #488]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800349a:	2301      	movs	r3, #1
 800349c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349e:	4b77      	ldr	r3, [pc, #476]	; (800367c <HAL_RCC_OscConfig+0x474>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d118      	bne.n	80034dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034aa:	4b74      	ldr	r3, [pc, #464]	; (800367c <HAL_RCC_OscConfig+0x474>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a73      	ldr	r2, [pc, #460]	; (800367c <HAL_RCC_OscConfig+0x474>)
 80034b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b6:	f7fd fc47 	bl	8000d48 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034be:	f7fd fc43 	bl	8000d48 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e10c      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d0:	4b6a      	ldr	r3, [pc, #424]	; (800367c <HAL_RCC_OscConfig+0x474>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f0      	beq.n	80034be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d106      	bne.n	80034f2 <HAL_RCC_OscConfig+0x2ea>
 80034e4:	4b64      	ldr	r3, [pc, #400]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	4a63      	ldr	r2, [pc, #396]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	6713      	str	r3, [r2, #112]	; 0x70
 80034f0:	e01c      	b.n	800352c <HAL_RCC_OscConfig+0x324>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b05      	cmp	r3, #5
 80034f8:	d10c      	bne.n	8003514 <HAL_RCC_OscConfig+0x30c>
 80034fa:	4b5f      	ldr	r3, [pc, #380]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fe:	4a5e      	ldr	r2, [pc, #376]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003500:	f043 0304 	orr.w	r3, r3, #4
 8003504:	6713      	str	r3, [r2, #112]	; 0x70
 8003506:	4b5c      	ldr	r3, [pc, #368]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	4a5b      	ldr	r2, [pc, #364]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	6713      	str	r3, [r2, #112]	; 0x70
 8003512:	e00b      	b.n	800352c <HAL_RCC_OscConfig+0x324>
 8003514:	4b58      	ldr	r3, [pc, #352]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003518:	4a57      	ldr	r2, [pc, #348]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 800351a:	f023 0301 	bic.w	r3, r3, #1
 800351e:	6713      	str	r3, [r2, #112]	; 0x70
 8003520:	4b55      	ldr	r3, [pc, #340]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	4a54      	ldr	r2, [pc, #336]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003526:	f023 0304 	bic.w	r3, r3, #4
 800352a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d015      	beq.n	8003560 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003534:	f7fd fc08 	bl	8000d48 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353a:	e00a      	b.n	8003552 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800353c:	f7fd fc04 	bl	8000d48 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	f241 3288 	movw	r2, #5000	; 0x1388
 800354a:	4293      	cmp	r3, r2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e0cb      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003552:	4b49      	ldr	r3, [pc, #292]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0ee      	beq.n	800353c <HAL_RCC_OscConfig+0x334>
 800355e:	e014      	b.n	800358a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003560:	f7fd fbf2 	bl	8000d48 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003566:	e00a      	b.n	800357e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003568:	f7fd fbee 	bl	8000d48 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	f241 3288 	movw	r2, #5000	; 0x1388
 8003576:	4293      	cmp	r3, r2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e0b5      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800357e:	4b3e      	ldr	r3, [pc, #248]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1ee      	bne.n	8003568 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800358a:	7dfb      	ldrb	r3, [r7, #23]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d105      	bne.n	800359c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003590:	4b39      	ldr	r3, [pc, #228]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	4a38      	ldr	r2, [pc, #224]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80a1 	beq.w	80036e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035a6:	4b34      	ldr	r3, [pc, #208]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d05c      	beq.n	800366c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d141      	bne.n	800363e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ba:	4b31      	ldr	r3, [pc, #196]	; (8003680 <HAL_RCC_OscConfig+0x478>)
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c0:	f7fd fbc2 	bl	8000d48 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c8:	f7fd fbbe 	bl	8000d48 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e087      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035da:	4b27      	ldr	r3, [pc, #156]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69da      	ldr	r2, [r3, #28]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	019b      	lsls	r3, r3, #6
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	085b      	lsrs	r3, r3, #1
 80035fe:	3b01      	subs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	061b      	lsls	r3, r3, #24
 800360a:	491b      	ldr	r1, [pc, #108]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 800360c:	4313      	orrs	r3, r2
 800360e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003610:	4b1b      	ldr	r3, [pc, #108]	; (8003680 <HAL_RCC_OscConfig+0x478>)
 8003612:	2201      	movs	r2, #1
 8003614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003616:	f7fd fb97 	bl	8000d48 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800361e:	f7fd fb93 	bl	8000d48 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e05c      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003630:	4b11      	ldr	r3, [pc, #68]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0f0      	beq.n	800361e <HAL_RCC_OscConfig+0x416>
 800363c:	e054      	b.n	80036e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363e:	4b10      	ldr	r3, [pc, #64]	; (8003680 <HAL_RCC_OscConfig+0x478>)
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003644:	f7fd fb80 	bl	8000d48 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364c:	f7fd fb7c 	bl	8000d48 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e045      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365e:	4b06      	ldr	r3, [pc, #24]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x444>
 800366a:	e03d      	b.n	80036e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d107      	bne.n	8003684 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e038      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
 8003678:	40023800 	.word	0x40023800
 800367c:	40007000 	.word	0x40007000
 8003680:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003684:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <HAL_RCC_OscConfig+0x4ec>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d028      	beq.n	80036e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800369c:	429a      	cmp	r2, r3
 800369e:	d121      	bne.n	80036e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d11a      	bne.n	80036e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036b4:	4013      	ands	r3, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036bc:	4293      	cmp	r3, r2
 80036be:	d111      	bne.n	80036e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ca:	085b      	lsrs	r3, r3, #1
 80036cc:	3b01      	subs	r3, #1
 80036ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d107      	bne.n	80036e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40023800 	.word	0x40023800

080036f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0cc      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800370c:	4b68      	ldr	r3, [pc, #416]	; (80038b0 <HAL_RCC_ClockConfig+0x1b8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d90c      	bls.n	8003734 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371a:	4b65      	ldr	r3, [pc, #404]	; (80038b0 <HAL_RCC_ClockConfig+0x1b8>)
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003722:	4b63      	ldr	r3, [pc, #396]	; (80038b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d001      	beq.n	8003734 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0b8      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d020      	beq.n	8003782 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800374c:	4b59      	ldr	r3, [pc, #356]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	4a58      	ldr	r2, [pc, #352]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003756:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	2b00      	cmp	r3, #0
 8003762:	d005      	beq.n	8003770 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003764:	4b53      	ldr	r3, [pc, #332]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	4a52      	ldr	r2, [pc, #328]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800376e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003770:	4b50      	ldr	r3, [pc, #320]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	494d      	ldr	r1, [pc, #308]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	4313      	orrs	r3, r2
 8003780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d044      	beq.n	8003818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d107      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003796:	4b47      	ldr	r3, [pc, #284]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d119      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e07f      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d003      	beq.n	80037b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d107      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b6:	4b3f      	ldr	r3, [pc, #252]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e06f      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c6:	4b3b      	ldr	r3, [pc, #236]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e067      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037d6:	4b37      	ldr	r3, [pc, #220]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f023 0203 	bic.w	r2, r3, #3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	4934      	ldr	r1, [pc, #208]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037e8:	f7fd faae 	bl	8000d48 <HAL_GetTick>
 80037ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ee:	e00a      	b.n	8003806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f0:	f7fd faaa 	bl	8000d48 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fe:	4293      	cmp	r3, r2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e04f      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003806:	4b2b      	ldr	r3, [pc, #172]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 020c 	and.w	r2, r3, #12
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	429a      	cmp	r2, r3
 8003816:	d1eb      	bne.n	80037f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003818:	4b25      	ldr	r3, [pc, #148]	; (80038b0 <HAL_RCC_ClockConfig+0x1b8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d20c      	bcs.n	8003840 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003826:	4b22      	ldr	r3, [pc, #136]	; (80038b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800382e:	4b20      	ldr	r3, [pc, #128]	; (80038b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d001      	beq.n	8003840 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e032      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d008      	beq.n	800385e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800384c:	4b19      	ldr	r3, [pc, #100]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	4916      	ldr	r1, [pc, #88]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	4313      	orrs	r3, r2
 800385c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d009      	beq.n	800387e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800386a:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	490e      	ldr	r1, [pc, #56]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	4313      	orrs	r3, r2
 800387c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800387e:	f000 f821 	bl	80038c4 <HAL_RCC_GetSysClockFreq>
 8003882:	4602      	mov	r2, r0
 8003884:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	490a      	ldr	r1, [pc, #40]	; (80038b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003890:	5ccb      	ldrb	r3, [r1, r3]
 8003892:	fa22 f303 	lsr.w	r3, r2, r3
 8003896:	4a09      	ldr	r2, [pc, #36]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800389a:	4b09      	ldr	r3, [pc, #36]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fd fa0e 	bl	8000cc0 <HAL_InitTick>

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40023c00 	.word	0x40023c00
 80038b4:	40023800 	.word	0x40023800
 80038b8:	08007910 	.word	0x08007910
 80038bc:	20000000 	.word	0x20000000
 80038c0:	20000004 	.word	0x20000004

080038c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c8:	b094      	sub	sp, #80	; 0x50
 80038ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	647b      	str	r3, [r7, #68]	; 0x44
 80038d0:	2300      	movs	r3, #0
 80038d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038d4:	2300      	movs	r3, #0
 80038d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038dc:	4b79      	ldr	r3, [pc, #484]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 030c 	and.w	r3, r3, #12
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d00d      	beq.n	8003904 <HAL_RCC_GetSysClockFreq+0x40>
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	f200 80e1 	bhi.w	8003ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <HAL_RCC_GetSysClockFreq+0x34>
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d003      	beq.n	80038fe <HAL_RCC_GetSysClockFreq+0x3a>
 80038f6:	e0db      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038f8:	4b73      	ldr	r3, [pc, #460]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 80038fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80038fc:	e0db      	b.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038fe:	4b73      	ldr	r3, [pc, #460]	; (8003acc <HAL_RCC_GetSysClockFreq+0x208>)
 8003900:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003902:	e0d8      	b.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003904:	4b6f      	ldr	r3, [pc, #444]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800390c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800390e:	4b6d      	ldr	r3, [pc, #436]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d063      	beq.n	80039e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800391a:	4b6a      	ldr	r3, [pc, #424]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	099b      	lsrs	r3, r3, #6
 8003920:	2200      	movs	r2, #0
 8003922:	63bb      	str	r3, [r7, #56]	; 0x38
 8003924:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800392c:	633b      	str	r3, [r7, #48]	; 0x30
 800392e:	2300      	movs	r3, #0
 8003930:	637b      	str	r3, [r7, #52]	; 0x34
 8003932:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003936:	4622      	mov	r2, r4
 8003938:	462b      	mov	r3, r5
 800393a:	f04f 0000 	mov.w	r0, #0
 800393e:	f04f 0100 	mov.w	r1, #0
 8003942:	0159      	lsls	r1, r3, #5
 8003944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003948:	0150      	lsls	r0, r2, #5
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	4621      	mov	r1, r4
 8003950:	1a51      	subs	r1, r2, r1
 8003952:	6139      	str	r1, [r7, #16]
 8003954:	4629      	mov	r1, r5
 8003956:	eb63 0301 	sbc.w	r3, r3, r1
 800395a:	617b      	str	r3, [r7, #20]
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003968:	4659      	mov	r1, fp
 800396a:	018b      	lsls	r3, r1, #6
 800396c:	4651      	mov	r1, sl
 800396e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003972:	4651      	mov	r1, sl
 8003974:	018a      	lsls	r2, r1, #6
 8003976:	4651      	mov	r1, sl
 8003978:	ebb2 0801 	subs.w	r8, r2, r1
 800397c:	4659      	mov	r1, fp
 800397e:	eb63 0901 	sbc.w	r9, r3, r1
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800398e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003992:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003996:	4690      	mov	r8, r2
 8003998:	4699      	mov	r9, r3
 800399a:	4623      	mov	r3, r4
 800399c:	eb18 0303 	adds.w	r3, r8, r3
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	462b      	mov	r3, r5
 80039a4:	eb49 0303 	adc.w	r3, r9, r3
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	f04f 0200 	mov.w	r2, #0
 80039ae:	f04f 0300 	mov.w	r3, #0
 80039b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039b6:	4629      	mov	r1, r5
 80039b8:	024b      	lsls	r3, r1, #9
 80039ba:	4621      	mov	r1, r4
 80039bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039c0:	4621      	mov	r1, r4
 80039c2:	024a      	lsls	r2, r1, #9
 80039c4:	4610      	mov	r0, r2
 80039c6:	4619      	mov	r1, r3
 80039c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ca:	2200      	movs	r2, #0
 80039cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039d4:	f7fc fbf8 	bl	80001c8 <__aeabi_uldivmod>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4613      	mov	r3, r2
 80039de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039e0:	e058      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e2:	4b38      	ldr	r3, [pc, #224]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	099b      	lsrs	r3, r3, #6
 80039e8:	2200      	movs	r2, #0
 80039ea:	4618      	mov	r0, r3
 80039ec:	4611      	mov	r1, r2
 80039ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039f2:	623b      	str	r3, [r7, #32]
 80039f4:	2300      	movs	r3, #0
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
 80039f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039fc:	4642      	mov	r2, r8
 80039fe:	464b      	mov	r3, r9
 8003a00:	f04f 0000 	mov.w	r0, #0
 8003a04:	f04f 0100 	mov.w	r1, #0
 8003a08:	0159      	lsls	r1, r3, #5
 8003a0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a0e:	0150      	lsls	r0, r2, #5
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4641      	mov	r1, r8
 8003a16:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a1a:	4649      	mov	r1, r9
 8003a1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a34:	ebb2 040a 	subs.w	r4, r2, sl
 8003a38:	eb63 050b 	sbc.w	r5, r3, fp
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	00eb      	lsls	r3, r5, #3
 8003a46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a4a:	00e2      	lsls	r2, r4, #3
 8003a4c:	4614      	mov	r4, r2
 8003a4e:	461d      	mov	r5, r3
 8003a50:	4643      	mov	r3, r8
 8003a52:	18e3      	adds	r3, r4, r3
 8003a54:	603b      	str	r3, [r7, #0]
 8003a56:	464b      	mov	r3, r9
 8003a58:	eb45 0303 	adc.w	r3, r5, r3
 8003a5c:	607b      	str	r3, [r7, #4]
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	028b      	lsls	r3, r1, #10
 8003a6e:	4621      	mov	r1, r4
 8003a70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a74:	4621      	mov	r1, r4
 8003a76:	028a      	lsls	r2, r1, #10
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a7e:	2200      	movs	r2, #0
 8003a80:	61bb      	str	r3, [r7, #24]
 8003a82:	61fa      	str	r2, [r7, #28]
 8003a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a88:	f7fc fb9e 	bl	80001c8 <__aeabi_uldivmod>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4613      	mov	r3, r2
 8003a92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a94:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	0c1b      	lsrs	r3, r3, #16
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003aa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003aae:	e002      	b.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ab0:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ab2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3750      	adds	r7, #80	; 0x50
 8003abc:	46bd      	mov	sp, r7
 8003abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	00f42400 	.word	0x00f42400
 8003acc:	007a1200 	.word	0x007a1200

08003ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad4:	4b03      	ldr	r3, [pc, #12]	; (8003ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	20000000 	.word	0x20000000

08003ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003aec:	f7ff fff0 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8003af0:	4602      	mov	r2, r0
 8003af2:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	0a9b      	lsrs	r3, r3, #10
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	4903      	ldr	r1, [pc, #12]	; (8003b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003afe:	5ccb      	ldrb	r3, [r1, r3]
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	08007920 	.word	0x08007920

08003b10 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d105      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d035      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b38:	4b62      	ldr	r3, [pc, #392]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b3e:	f7fd f903 	bl	8000d48 <HAL_GetTick>
 8003b42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b44:	e008      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b46:	f7fd f8ff 	bl	8000d48 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e0b0      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b58:	4b5b      	ldr	r3, [pc, #364]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1f0      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	019a      	lsls	r2, r3, #6
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	071b      	lsls	r3, r3, #28
 8003b70:	4955      	ldr	r1, [pc, #340]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b78:	4b52      	ldr	r3, [pc, #328]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b7e:	f7fd f8e3 	bl	8000d48 <HAL_GetTick>
 8003b82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b84:	e008      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b86:	f7fd f8df 	bl	8000d48 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e090      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b98:	4b4b      	ldr	r3, [pc, #300]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0f0      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 8083 	beq.w	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	4b44      	ldr	r3, [pc, #272]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	4a43      	ldr	r2, [pc, #268]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc2:	4b41      	ldr	r3, [pc, #260]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003bce:	4b3f      	ldr	r3, [pc, #252]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a3e      	ldr	r2, [pc, #248]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bda:	f7fd f8b5 	bl	8000d48 <HAL_GetTick>
 8003bde:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003be2:	f7fd f8b1 	bl	8000d48 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e062      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003bf4:	4b35      	ldr	r3, [pc, #212]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0f0      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c00:	4b31      	ldr	r3, [pc, #196]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c08:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d02f      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d028      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c1e:	4b2a      	ldr	r3, [pc, #168]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c26:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c28:	4b29      	ldr	r3, [pc, #164]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c2e:	4b28      	ldr	r3, [pc, #160]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c34:	4a24      	ldr	r2, [pc, #144]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c3a:	4b23      	ldr	r3, [pc, #140]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d114      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c46:	f7fd f87f 	bl	8000d48 <HAL_GetTick>
 8003c4a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4c:	e00a      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c4e:	f7fd f87b 	bl	8000d48 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e02a      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c64:	4b18      	ldr	r3, [pc, #96]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0ee      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c7c:	d10d      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003c7e:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c92:	490d      	ldr	r1, [pc, #52]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	608b      	str	r3, [r1, #8]
 8003c98:	e005      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	4a0a      	ldr	r2, [pc, #40]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ca0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ca4:	6093      	str	r3, [r2, #8]
 8003ca6:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ca8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb2:	4905      	ldr	r1, [pc, #20]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	42470068 	.word	0x42470068
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	40007000 	.word	0x40007000
 8003cd0:	42470e40 	.word	0x42470e40

08003cd4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d13e      	bne.n	8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003cf2:	4b23      	ldr	r3, [pc, #140]	; (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d005      	beq.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d12f      	bne.n	8003d68 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003d08:	4b1e      	ldr	r3, [pc, #120]	; (8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003d0a:	617b      	str	r3, [r7, #20]
          break;
 8003d0c:	e02f      	b.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003d0e:	4b1c      	ldr	r3, [pc, #112]	; (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d1a:	d108      	bne.n	8003d2e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003d1c:	4b18      	ldr	r3, [pc, #96]	; (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d24:	4a18      	ldr	r2, [pc, #96]	; (8003d88 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2a:	613b      	str	r3, [r7, #16]
 8003d2c:	e007      	b.n	8003d3e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003d2e:	4b14      	ldr	r3, [pc, #80]	; (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d36:	4a15      	ldr	r2, [pc, #84]	; (8003d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003d3e:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d44:	099b      	lsrs	r3, r3, #6
 8003d46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	fb02 f303 	mul.w	r3, r2, r3
 8003d50:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003d52:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d58:	0f1b      	lsrs	r3, r3, #28
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d64:	617b      	str	r3, [r7, #20]
          break;
 8003d66:	e002      	b.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]
          break;
 8003d6c:	bf00      	nop
        }
      }
      break;
 8003d6e:	bf00      	nop
    }
  }
  return frequency;
 8003d70:	697b      	ldr	r3, [r7, #20]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	371c      	adds	r7, #28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40023800 	.word	0x40023800
 8003d84:	00bb8000 	.word	0x00bb8000
 8003d88:	007a1200 	.word	0x007a1200
 8003d8c:	00f42400 	.word	0x00f42400

08003d90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e07b      	b.n	8003e9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d108      	bne.n	8003dbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003db2:	d009      	beq.n	8003dc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	61da      	str	r2, [r3, #28]
 8003dba:	e005      	b.n	8003dc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fc fe92 	bl	8000b0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dfe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4c:	ea42 0103 	orr.w	r1, r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	0c1b      	lsrs	r3, r3, #16
 8003e66:	f003 0104 	and.w	r1, r3, #4
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	f003 0210 	and.w	r2, r3, #16
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69da      	ldr	r2, [r3, #28]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	f107 001c 	add.w	r0, r7, #28
 8003eb0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d122      	bne.n	8003f00 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d105      	bne.n	8003ef4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f001 fb1b 	bl	8005530 <USB_CoreReset>
 8003efa:	4603      	mov	r3, r0
 8003efc:	73fb      	strb	r3, [r7, #15]
 8003efe:	e01a      	b.n	8003f36 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f001 fb0f 	bl	8005530 <USB_CoreReset>
 8003f12:	4603      	mov	r3, r0
 8003f14:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d106      	bne.n	8003f2a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	639a      	str	r2, [r3, #56]	; 0x38
 8003f28:	e005      	b.n	8003f36 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d10b      	bne.n	8003f54 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f043 0206 	orr.w	r2, r3, #6
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f043 0220 	orr.w	r2, r3, #32
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f60:	b004      	add	sp, #16
 8003f62:	4770      	bx	lr

08003f64 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003f72:	79fb      	ldrb	r3, [r7, #7]
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d165      	bne.n	8004044 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4a41      	ldr	r2, [pc, #260]	; (8004080 <USB_SetTurnaroundTime+0x11c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d906      	bls.n	8003f8e <USB_SetTurnaroundTime+0x2a>
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4a40      	ldr	r2, [pc, #256]	; (8004084 <USB_SetTurnaroundTime+0x120>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d202      	bcs.n	8003f8e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003f88:	230f      	movs	r3, #15
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	e062      	b.n	8004054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	4a3c      	ldr	r2, [pc, #240]	; (8004084 <USB_SetTurnaroundTime+0x120>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d306      	bcc.n	8003fa4 <USB_SetTurnaroundTime+0x40>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	4a3b      	ldr	r2, [pc, #236]	; (8004088 <USB_SetTurnaroundTime+0x124>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d202      	bcs.n	8003fa4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003f9e:	230e      	movs	r3, #14
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	e057      	b.n	8004054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	4a38      	ldr	r2, [pc, #224]	; (8004088 <USB_SetTurnaroundTime+0x124>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d306      	bcc.n	8003fba <USB_SetTurnaroundTime+0x56>
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	4a37      	ldr	r2, [pc, #220]	; (800408c <USB_SetTurnaroundTime+0x128>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d202      	bcs.n	8003fba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003fb4:	230d      	movs	r3, #13
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	e04c      	b.n	8004054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	4a33      	ldr	r2, [pc, #204]	; (800408c <USB_SetTurnaroundTime+0x128>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d306      	bcc.n	8003fd0 <USB_SetTurnaroundTime+0x6c>
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	4a32      	ldr	r2, [pc, #200]	; (8004090 <USB_SetTurnaroundTime+0x12c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d802      	bhi.n	8003fd0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003fca:	230c      	movs	r3, #12
 8003fcc:	617b      	str	r3, [r7, #20]
 8003fce:	e041      	b.n	8004054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4a2f      	ldr	r2, [pc, #188]	; (8004090 <USB_SetTurnaroundTime+0x12c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d906      	bls.n	8003fe6 <USB_SetTurnaroundTime+0x82>
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4a2e      	ldr	r2, [pc, #184]	; (8004094 <USB_SetTurnaroundTime+0x130>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d802      	bhi.n	8003fe6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003fe0:	230b      	movs	r3, #11
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	e036      	b.n	8004054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	4a2a      	ldr	r2, [pc, #168]	; (8004094 <USB_SetTurnaroundTime+0x130>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d906      	bls.n	8003ffc <USB_SetTurnaroundTime+0x98>
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4a29      	ldr	r2, [pc, #164]	; (8004098 <USB_SetTurnaroundTime+0x134>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d802      	bhi.n	8003ffc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003ff6:	230a      	movs	r3, #10
 8003ff8:	617b      	str	r3, [r7, #20]
 8003ffa:	e02b      	b.n	8004054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4a26      	ldr	r2, [pc, #152]	; (8004098 <USB_SetTurnaroundTime+0x134>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d906      	bls.n	8004012 <USB_SetTurnaroundTime+0xae>
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	4a25      	ldr	r2, [pc, #148]	; (800409c <USB_SetTurnaroundTime+0x138>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d202      	bcs.n	8004012 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800400c:	2309      	movs	r3, #9
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	e020      	b.n	8004054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	4a21      	ldr	r2, [pc, #132]	; (800409c <USB_SetTurnaroundTime+0x138>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d306      	bcc.n	8004028 <USB_SetTurnaroundTime+0xc4>
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	4a20      	ldr	r2, [pc, #128]	; (80040a0 <USB_SetTurnaroundTime+0x13c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d802      	bhi.n	8004028 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004022:	2308      	movs	r3, #8
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	e015      	b.n	8004054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4a1d      	ldr	r2, [pc, #116]	; (80040a0 <USB_SetTurnaroundTime+0x13c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d906      	bls.n	800403e <USB_SetTurnaroundTime+0xda>
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	4a1c      	ldr	r2, [pc, #112]	; (80040a4 <USB_SetTurnaroundTime+0x140>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d202      	bcs.n	800403e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004038:	2307      	movs	r3, #7
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	e00a      	b.n	8004054 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800403e:	2306      	movs	r3, #6
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	e007      	b.n	8004054 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004044:	79fb      	ldrb	r3, [r7, #7]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d102      	bne.n	8004050 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800404a:	2309      	movs	r3, #9
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	e001      	b.n	8004054 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004050:	2309      	movs	r3, #9
 8004052:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	029b      	lsls	r3, r3, #10
 8004068:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800406c:	431a      	orrs	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	371c      	adds	r7, #28
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	00d8acbf 	.word	0x00d8acbf
 8004084:	00e4e1c0 	.word	0x00e4e1c0
 8004088:	00f42400 	.word	0x00f42400
 800408c:	01067380 	.word	0x01067380
 8004090:	011a499f 	.word	0x011a499f
 8004094:	01312cff 	.word	0x01312cff
 8004098:	014ca43f 	.word	0x014ca43f
 800409c:	016e3600 	.word	0x016e3600
 80040a0:	01a6ab1f 	.word	0x01a6ab1f
 80040a4:	01e84800 	.word	0x01e84800

080040a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f043 0201 	orr.w	r2, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f023 0201 	bic.w	r2, r3, #1
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	460b      	mov	r3, r1
 80040f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d115      	bne.n	800413a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800411a:	2001      	movs	r0, #1
 800411c:	f7fc fe20 	bl	8000d60 <HAL_Delay>
      ms++;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3301      	adds	r3, #1
 8004124:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f001 f972 	bl	8005410 <USB_GetMode>
 800412c:	4603      	mov	r3, r0
 800412e:	2b01      	cmp	r3, #1
 8004130:	d01e      	beq.n	8004170 <USB_SetCurrentMode+0x84>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b31      	cmp	r3, #49	; 0x31
 8004136:	d9f0      	bls.n	800411a <USB_SetCurrentMode+0x2e>
 8004138:	e01a      	b.n	8004170 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800413a:	78fb      	ldrb	r3, [r7, #3]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d115      	bne.n	800416c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800414c:	2001      	movs	r0, #1
 800414e:	f7fc fe07 	bl	8000d60 <HAL_Delay>
      ms++;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	3301      	adds	r3, #1
 8004156:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f001 f959 	bl	8005410 <USB_GetMode>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d005      	beq.n	8004170 <USB_SetCurrentMode+0x84>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2b31      	cmp	r3, #49	; 0x31
 8004168:	d9f0      	bls.n	800414c <USB_SetCurrentMode+0x60>
 800416a:	e001      	b.n	8004170 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e005      	b.n	800417c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b32      	cmp	r3, #50	; 0x32
 8004174:	d101      	bne.n	800417a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004184:	b084      	sub	sp, #16
 8004186:	b580      	push	{r7, lr}
 8004188:	b086      	sub	sp, #24
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
 800418e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004192:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800419e:	2300      	movs	r3, #0
 80041a0:	613b      	str	r3, [r7, #16]
 80041a2:	e009      	b.n	80041b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	3340      	adds	r3, #64	; 0x40
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	2200      	movs	r2, #0
 80041b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	3301      	adds	r3, #1
 80041b6:	613b      	str	r3, [r7, #16]
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2b0e      	cmp	r3, #14
 80041bc:	d9f2      	bls.n	80041a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80041be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d11c      	bne.n	80041fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041d2:	f043 0302 	orr.w	r3, r3, #2
 80041d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	639a      	str	r2, [r3, #56]	; 0x38
 80041fc:	e00b      	b.n	8004216 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800421c:	461a      	mov	r2, r3
 800421e:	2300      	movs	r3, #0
 8004220:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004228:	4619      	mov	r1, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004230:	461a      	mov	r2, r3
 8004232:	680b      	ldr	r3, [r1, #0]
 8004234:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004238:	2b01      	cmp	r3, #1
 800423a:	d10c      	bne.n	8004256 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800423c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423e:	2b00      	cmp	r3, #0
 8004240:	d104      	bne.n	800424c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004242:	2100      	movs	r1, #0
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f945 	bl	80044d4 <USB_SetDevSpeed>
 800424a:	e008      	b.n	800425e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800424c:	2101      	movs	r1, #1
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f940 	bl	80044d4 <USB_SetDevSpeed>
 8004254:	e003      	b.n	800425e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004256:	2103      	movs	r1, #3
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f93b 	bl	80044d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800425e:	2110      	movs	r1, #16
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f8f3 	bl	800444c <USB_FlushTxFifo>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f90f 	bl	8004494 <USB_FlushRxFifo>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004286:	461a      	mov	r2, r3
 8004288:	2300      	movs	r3, #0
 800428a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004292:	461a      	mov	r2, r3
 8004294:	2300      	movs	r3, #0
 8004296:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429e:	461a      	mov	r2, r3
 80042a0:	2300      	movs	r3, #0
 80042a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042a4:	2300      	movs	r3, #0
 80042a6:	613b      	str	r3, [r7, #16]
 80042a8:	e043      	b.n	8004332 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042c0:	d118      	bne.n	80042f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10a      	bne.n	80042de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d4:	461a      	mov	r2, r3
 80042d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	e013      	b.n	8004306 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ea:	461a      	mov	r2, r3
 80042ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	e008      	b.n	8004306 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004300:	461a      	mov	r2, r3
 8004302:	2300      	movs	r3, #0
 8004304:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004312:	461a      	mov	r2, r3
 8004314:	2300      	movs	r3, #0
 8004316:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004324:	461a      	mov	r2, r3
 8004326:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800432a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	3301      	adds	r3, #1
 8004330:	613b      	str	r3, [r7, #16]
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	429a      	cmp	r2, r3
 8004338:	d3b7      	bcc.n	80042aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800433a:	2300      	movs	r3, #0
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	e043      	b.n	80043c8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004352:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004356:	d118      	bne.n	800438a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10a      	bne.n	8004374 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436a:	461a      	mov	r2, r3
 800436c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	e013      	b.n	800439c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004380:	461a      	mov	r2, r3
 8004382:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004386:	6013      	str	r3, [r2, #0]
 8004388:	e008      	b.n	800439c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4413      	add	r3, r2
 8004392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004396:	461a      	mov	r2, r3
 8004398:	2300      	movs	r3, #0
 800439a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a8:	461a      	mov	r2, r3
 80043aa:	2300      	movs	r3, #0
 80043ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ba:	461a      	mov	r2, r3
 80043bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	3301      	adds	r3, #1
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d3b7      	bcc.n	8004340 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80043f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80043f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d105      	bne.n	8004404 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	f043 0210 	orr.w	r2, r3, #16
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699a      	ldr	r2, [r3, #24]
 8004408:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <USB_DevInit+0x2c4>)
 800440a:	4313      	orrs	r3, r2
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d005      	beq.n	8004422 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f043 0208 	orr.w	r2, r3, #8
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004424:	2b01      	cmp	r3, #1
 8004426:	d107      	bne.n	8004438 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004430:	f043 0304 	orr.w	r3, r3, #4
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004438:	7dfb      	ldrb	r3, [r7, #23]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004444:	b004      	add	sp, #16
 8004446:	4770      	bx	lr
 8004448:	803c3800 	.word	0x803c3800

0800444c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	019b      	lsls	r3, r3, #6
 800445e:	f043 0220 	orr.w	r2, r3, #32
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3301      	adds	r3, #1
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	4a08      	ldr	r2, [pc, #32]	; (8004490 <USB_FlushTxFifo+0x44>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d901      	bls.n	8004476 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e006      	b.n	8004484 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f003 0320 	and.w	r3, r3, #32
 800447e:	2b20      	cmp	r3, #32
 8004480:	d0f1      	beq.n	8004466 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	00030d40 	.word	0x00030d40

08004494 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2210      	movs	r2, #16
 80044a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3301      	adds	r3, #1
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	4a08      	ldr	r2, [pc, #32]	; (80044d0 <USB_FlushRxFifo+0x3c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e006      	b.n	80044c4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f003 0310 	and.w	r3, r3, #16
 80044be:	2b10      	cmp	r3, #16
 80044c0:	d0f1      	beq.n	80044a6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	00030d40 	.word	0x00030d40

080044d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	78fb      	ldrb	r3, [r7, #3]
 80044ee:	68f9      	ldr	r1, [r7, #12]
 80044f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044f4:	4313      	orrs	r3, r2
 80044f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004506:	b480      	push	{r7}
 8004508:	b087      	sub	sp, #28
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 0306 	and.w	r3, r3, #6
 800451e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d102      	bne.n	800452c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004526:	2300      	movs	r3, #0
 8004528:	75fb      	strb	r3, [r7, #23]
 800452a:	e00a      	b.n	8004542 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b02      	cmp	r3, #2
 8004530:	d002      	beq.n	8004538 <USB_GetDevSpeed+0x32>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2b06      	cmp	r3, #6
 8004536:	d102      	bne.n	800453e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004538:	2302      	movs	r3, #2
 800453a:	75fb      	strb	r3, [r7, #23]
 800453c:	e001      	b.n	8004542 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800453e:	230f      	movs	r3, #15
 8004540:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004542:	7dfb      	ldrb	r3, [r7, #23]
}
 8004544:	4618      	mov	r0, r3
 8004546:	371c      	adds	r7, #28
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	785b      	ldrb	r3, [r3, #1]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d13a      	bne.n	80045e2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004572:	69da      	ldr	r2, [r3, #28]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	f003 030f 	and.w	r3, r3, #15
 800457c:	2101      	movs	r1, #1
 800457e:	fa01 f303 	lsl.w	r3, r1, r3
 8004582:	b29b      	uxth	r3, r3
 8004584:	68f9      	ldr	r1, [r7, #12]
 8004586:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800458a:	4313      	orrs	r3, r2
 800458c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4413      	add	r3, r2
 8004596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d155      	bne.n	8004650 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	78db      	ldrb	r3, [r3, #3]
 80045be:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80045c0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	059b      	lsls	r3, r3, #22
 80045c6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80045c8:	4313      	orrs	r3, r2
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	0151      	lsls	r1, r2, #5
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	440a      	add	r2, r1
 80045d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	e036      	b.n	8004650 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e8:	69da      	ldr	r2, [r3, #28]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	2101      	movs	r1, #1
 80045f4:	fa01 f303 	lsl.w	r3, r1, r3
 80045f8:	041b      	lsls	r3, r3, #16
 80045fa:	68f9      	ldr	r1, [r7, #12]
 80045fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004600:	4313      	orrs	r3, r2
 8004602:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d11a      	bne.n	8004650 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	78db      	ldrb	r3, [r3, #3]
 8004634:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004636:	430b      	orrs	r3, r1
 8004638:	4313      	orrs	r3, r2
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	0151      	lsls	r1, r2, #5
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	440a      	add	r2, r1
 8004642:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800464a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800464e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
	...

08004660 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	785b      	ldrb	r3, [r3, #1]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d161      	bne.n	8004740 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800468e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004692:	d11f      	bne.n	80046d4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	0151      	lsls	r1, r2, #5
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	440a      	add	r2, r1
 80046aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046b2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	0151      	lsls	r1, r2, #5
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	440a      	add	r2, r1
 80046ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	2101      	movs	r1, #1
 80046e6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	43db      	mvns	r3, r3
 80046ee:	68f9      	ldr	r1, [r7, #12]
 80046f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046f4:	4013      	ands	r3, r2
 80046f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fe:	69da      	ldr	r2, [r3, #28]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	f003 030f 	and.w	r3, r3, #15
 8004708:	2101      	movs	r1, #1
 800470a:	fa01 f303 	lsl.w	r3, r1, r3
 800470e:	b29b      	uxth	r3, r3
 8004710:	43db      	mvns	r3, r3
 8004712:	68f9      	ldr	r1, [r7, #12]
 8004714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004718:	4013      	ands	r3, r2
 800471a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	0159      	lsls	r1, r3, #5
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	440b      	add	r3, r1
 8004732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004736:	4619      	mov	r1, r3
 8004738:	4b35      	ldr	r3, [pc, #212]	; (8004810 <USB_DeactivateEndpoint+0x1b0>)
 800473a:	4013      	ands	r3, r2
 800473c:	600b      	str	r3, [r1, #0]
 800473e:	e060      	b.n	8004802 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004752:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004756:	d11f      	bne.n	8004798 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4413      	add	r3, r2
 8004760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	0151      	lsls	r1, r2, #5
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	440a      	add	r2, r1
 800476e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004772:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004776:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	0151      	lsls	r1, r2, #5
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	440a      	add	r2, r1
 800478e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004792:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004796:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	f003 030f 	and.w	r3, r3, #15
 80047a8:	2101      	movs	r1, #1
 80047aa:	fa01 f303 	lsl.w	r3, r1, r3
 80047ae:	041b      	lsls	r3, r3, #16
 80047b0:	43db      	mvns	r3, r3
 80047b2:	68f9      	ldr	r1, [r7, #12]
 80047b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047b8:	4013      	ands	r3, r2
 80047ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c2:	69da      	ldr	r2, [r3, #28]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	f003 030f 	and.w	r3, r3, #15
 80047cc:	2101      	movs	r1, #1
 80047ce:	fa01 f303 	lsl.w	r3, r1, r3
 80047d2:	041b      	lsls	r3, r3, #16
 80047d4:	43db      	mvns	r3, r3
 80047d6:	68f9      	ldr	r1, [r7, #12]
 80047d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047dc:	4013      	ands	r3, r2
 80047de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	0159      	lsls	r1, r3, #5
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	440b      	add	r3, r1
 80047f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fa:	4619      	mov	r1, r3
 80047fc:	4b05      	ldr	r3, [pc, #20]	; (8004814 <USB_DeactivateEndpoint+0x1b4>)
 80047fe:	4013      	ands	r3, r2
 8004800:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	ec337800 	.word	0xec337800
 8004814:	eff37800 	.word	0xeff37800

08004818 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08a      	sub	sp, #40	; 0x28
 800481c:	af02      	add	r7, sp, #8
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	4613      	mov	r3, r2
 8004824:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	785b      	ldrb	r3, [r3, #1]
 8004834:	2b01      	cmp	r3, #1
 8004836:	f040 815c 	bne.w	8004af2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d132      	bne.n	80048a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	0151      	lsls	r1, r2, #5
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	440a      	add	r2, r1
 8004858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800485c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004860:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004864:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	4413      	add	r3, r2
 800486e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	0151      	lsls	r1, r2, #5
 8004878:	69fa      	ldr	r2, [r7, #28]
 800487a:	440a      	add	r2, r1
 800487c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004880:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004884:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	0151      	lsls	r1, r2, #5
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	440a      	add	r2, r1
 800489c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048a0:	0cdb      	lsrs	r3, r3, #19
 80048a2:	04db      	lsls	r3, r3, #19
 80048a4:	6113      	str	r3, [r2, #16]
 80048a6:	e074      	b.n	8004992 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	0151      	lsls	r1, r2, #5
 80048ba:	69fa      	ldr	r2, [r7, #28]
 80048bc:	440a      	add	r2, r1
 80048be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048c2:	0cdb      	lsrs	r3, r3, #19
 80048c4:	04db      	lsls	r3, r3, #19
 80048c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	0151      	lsls	r1, r2, #5
 80048da:	69fa      	ldr	r2, [r7, #28]
 80048dc:	440a      	add	r2, r1
 80048de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	6959      	ldr	r1, [r3, #20]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	440b      	add	r3, r1
 8004904:	1e59      	subs	r1, r3, #1
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	fbb1 f3f3 	udiv	r3, r1, r3
 800490e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004910:	4b9d      	ldr	r3, [pc, #628]	; (8004b88 <USB_EPStartXfer+0x370>)
 8004912:	400b      	ands	r3, r1
 8004914:	69b9      	ldr	r1, [r7, #24]
 8004916:	0148      	lsls	r0, r1, #5
 8004918:	69f9      	ldr	r1, [r7, #28]
 800491a:	4401      	add	r1, r0
 800491c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004920:	4313      	orrs	r3, r2
 8004922:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800493a:	69b9      	ldr	r1, [r7, #24]
 800493c:	0148      	lsls	r0, r1, #5
 800493e:	69f9      	ldr	r1, [r7, #28]
 8004940:	4401      	add	r1, r0
 8004942:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004946:	4313      	orrs	r3, r2
 8004948:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	78db      	ldrb	r3, [r3, #3]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d11f      	bne.n	8004992 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	0151      	lsls	r1, r2, #5
 8004964:	69fa      	ldr	r2, [r7, #28]
 8004966:	440a      	add	r2, r1
 8004968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800496c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004970:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	4413      	add	r3, r2
 800497a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	0151      	lsls	r1, r2, #5
 8004984:	69fa      	ldr	r2, [r7, #28]
 8004986:	440a      	add	r2, r1
 8004988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800498c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004990:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d14b      	bne.n	8004a30 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d009      	beq.n	80049b4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ac:	461a      	mov	r2, r3
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	78db      	ldrb	r3, [r3, #3]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d128      	bne.n	8004a0e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d110      	bne.n	80049ee <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	0151      	lsls	r1, r2, #5
 80049de:	69fa      	ldr	r2, [r7, #28]
 80049e0:	440a      	add	r2, r1
 80049e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	e00f      	b.n	8004a0e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	0151      	lsls	r1, r2, #5
 8004a00:	69fa      	ldr	r2, [r7, #28]
 8004a02:	440a      	add	r2, r1
 8004a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a0c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	0151      	lsls	r1, r2, #5
 8004a20:	69fa      	ldr	r2, [r7, #28]
 8004a22:	440a      	add	r2, r1
 8004a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a2c:	6013      	str	r3, [r2, #0]
 8004a2e:	e12f      	b.n	8004c90 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	0151      	lsls	r1, r2, #5
 8004a42:	69fa      	ldr	r2, [r7, #28]
 8004a44:	440a      	add	r2, r1
 8004a46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a4e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	78db      	ldrb	r3, [r3, #3]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d015      	beq.n	8004a84 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 8117 	beq.w	8004c90 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	2101      	movs	r1, #1
 8004a74:	fa01 f303 	lsl.w	r3, r1, r3
 8004a78:	69f9      	ldr	r1, [r7, #28]
 8004a7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	634b      	str	r3, [r1, #52]	; 0x34
 8004a82:	e105      	b.n	8004c90 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d110      	bne.n	8004ab6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	0151      	lsls	r1, r2, #5
 8004aa6:	69fa      	ldr	r2, [r7, #28]
 8004aa8:	440a      	add	r2, r1
 8004aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	e00f      	b.n	8004ad6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	0151      	lsls	r1, r2, #5
 8004ac8:	69fa      	ldr	r2, [r7, #28]
 8004aca:	440a      	add	r2, r1
 8004acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	68d9      	ldr	r1, [r3, #12]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	781a      	ldrb	r2, [r3, #0]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	b298      	uxth	r0, r3
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	4603      	mov	r3, r0
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 fa2b 	bl	8004f46 <USB_WritePacket>
 8004af0:	e0ce      	b.n	8004c90 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	0151      	lsls	r1, r2, #5
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	440a      	add	r2, r1
 8004b08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b0c:	0cdb      	lsrs	r3, r3, #19
 8004b0e:	04db      	lsls	r3, r3, #19
 8004b10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	0151      	lsls	r1, r2, #5
 8004b24:	69fa      	ldr	r2, [r7, #28]
 8004b26:	440a      	add	r2, r1
 8004b28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b34:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d126      	bne.n	8004b8c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4a:	691a      	ldr	r2, [r3, #16]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b54:	69b9      	ldr	r1, [r7, #24]
 8004b56:	0148      	lsls	r0, r1, #5
 8004b58:	69f9      	ldr	r1, [r7, #28]
 8004b5a:	4401      	add	r1, r0
 8004b5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b60:	4313      	orrs	r3, r2
 8004b62:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	0151      	lsls	r1, r2, #5
 8004b76:	69fa      	ldr	r2, [r7, #28]
 8004b78:	440a      	add	r2, r1
 8004b7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b82:	6113      	str	r3, [r2, #16]
 8004b84:	e036      	b.n	8004bf4 <USB_EPStartXfer+0x3dc>
 8004b86:	bf00      	nop
 8004b88:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	695a      	ldr	r2, [r3, #20]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	4413      	add	r3, r2
 8004b96:	1e5a      	subs	r2, r3, #1
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	8afb      	ldrh	r3, [r7, #22]
 8004bb2:	04d9      	lsls	r1, r3, #19
 8004bb4:	4b39      	ldr	r3, [pc, #228]	; (8004c9c <USB_EPStartXfer+0x484>)
 8004bb6:	400b      	ands	r3, r1
 8004bb8:	69b9      	ldr	r1, [r7, #24]
 8004bba:	0148      	lsls	r0, r1, #5
 8004bbc:	69f9      	ldr	r1, [r7, #28]
 8004bbe:	4401      	add	r1, r0
 8004bc0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd4:	691a      	ldr	r2, [r3, #16]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	8af9      	ldrh	r1, [r7, #22]
 8004bdc:	fb01 f303 	mul.w	r3, r1, r3
 8004be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004be4:	69b9      	ldr	r1, [r7, #24]
 8004be6:	0148      	lsls	r0, r1, #5
 8004be8:	69f9      	ldr	r1, [r7, #28]
 8004bea:	4401      	add	r1, r0
 8004bec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d10d      	bne.n	8004c16 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d009      	beq.n	8004c16 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	68d9      	ldr	r1, [r3, #12]
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c12:	460a      	mov	r2, r1
 8004c14:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	78db      	ldrb	r3, [r3, #3]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d128      	bne.n	8004c70 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d110      	bne.n	8004c50 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	0151      	lsls	r1, r2, #5
 8004c40:	69fa      	ldr	r2, [r7, #28]
 8004c42:	440a      	add	r2, r1
 8004c44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	e00f      	b.n	8004c70 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	0151      	lsls	r1, r2, #5
 8004c62:	69fa      	ldr	r2, [r7, #28]
 8004c64:	440a      	add	r2, r1
 8004c66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c6e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	0151      	lsls	r1, r2, #5
 8004c82:	69fa      	ldr	r2, [r7, #28]
 8004c84:	440a      	add	r2, r1
 8004c86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3720      	adds	r7, #32
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	1ff80000 	.word	0x1ff80000

08004ca0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	4613      	mov	r3, r2
 8004cac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	785b      	ldrb	r3, [r3, #1]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	f040 80cd 	bne.w	8004e5c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d132      	bne.n	8004d30 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	0151      	lsls	r1, r2, #5
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	440a      	add	r2, r1
 8004ce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ce4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ce8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	0151      	lsls	r1, r2, #5
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	440a      	add	r2, r1
 8004d04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	0151      	lsls	r1, r2, #5
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	440a      	add	r2, r1
 8004d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d28:	0cdb      	lsrs	r3, r3, #19
 8004d2a:	04db      	lsls	r3, r3, #19
 8004d2c:	6113      	str	r3, [r2, #16]
 8004d2e:	e04e      	b.n	8004dce <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	0151      	lsls	r1, r2, #5
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	440a      	add	r2, r1
 8004d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d4a:	0cdb      	lsrs	r3, r3, #19
 8004d4c:	04db      	lsls	r3, r3, #19
 8004d4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	0151      	lsls	r1, r2, #5
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	440a      	add	r2, r1
 8004d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d72:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	695a      	ldr	r2, [r3, #20]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d903      	bls.n	8004d88 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	0151      	lsls	r1, r2, #5
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	440a      	add	r2, r1
 8004d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004da6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db4:	691a      	ldr	r2, [r3, #16]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dbe:	6939      	ldr	r1, [r7, #16]
 8004dc0:	0148      	lsls	r0, r1, #5
 8004dc2:	6979      	ldr	r1, [r7, #20]
 8004dc4:	4401      	add	r1, r0
 8004dc6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004dce:	79fb      	ldrb	r3, [r7, #7]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d11e      	bne.n	8004e12 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d009      	beq.n	8004df0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de8:	461a      	mov	r2, r3
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	0151      	lsls	r1, r2, #5
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	440a      	add	r2, r1
 8004e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	e092      	b.n	8004f38 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	0151      	lsls	r1, r2, #5
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	440a      	add	r2, r1
 8004e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e30:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d07e      	beq.n	8004f38 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e50:	6979      	ldr	r1, [r7, #20]
 8004e52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e56:	4313      	orrs	r3, r2
 8004e58:	634b      	str	r3, [r1, #52]	; 0x34
 8004e5a:	e06d      	b.n	8004f38 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	0151      	lsls	r1, r2, #5
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	440a      	add	r2, r1
 8004e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e76:	0cdb      	lsrs	r3, r3, #19
 8004e78:	04db      	lsls	r3, r3, #19
 8004e7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	0151      	lsls	r1, r2, #5
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	440a      	add	r2, r1
 8004e92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e9e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	0151      	lsls	r1, r2, #5
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	440a      	add	r2, r1
 8004ec6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ece:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004edc:	691a      	ldr	r2, [r3, #16]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ee6:	6939      	ldr	r1, [r7, #16]
 8004ee8:	0148      	lsls	r0, r1, #5
 8004eea:	6979      	ldr	r1, [r7, #20]
 8004eec:	4401      	add	r1, r0
 8004eee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d10d      	bne.n	8004f18 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d009      	beq.n	8004f18 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	68d9      	ldr	r1, [r3, #12]
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f14:	460a      	mov	r2, r1
 8004f16:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	0151      	lsls	r1, r2, #5
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	440a      	add	r2, r1
 8004f2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b089      	sub	sp, #36	; 0x24
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	60f8      	str	r0, [r7, #12]
 8004f4e:	60b9      	str	r1, [r7, #8]
 8004f50:	4611      	mov	r1, r2
 8004f52:	461a      	mov	r2, r3
 8004f54:	460b      	mov	r3, r1
 8004f56:	71fb      	strb	r3, [r7, #7]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d123      	bne.n	8004fb4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f6c:	88bb      	ldrh	r3, [r7, #4]
 8004f6e:	3303      	adds	r3, #3
 8004f70:	089b      	lsrs	r3, r3, #2
 8004f72:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f74:	2300      	movs	r3, #0
 8004f76:	61bb      	str	r3, [r7, #24]
 8004f78:	e018      	b.n	8004fac <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f7a:	79fb      	ldrb	r3, [r7, #7]
 8004f7c:	031a      	lsls	r2, r3, #12
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f86:	461a      	mov	r2, r3
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	3301      	adds	r3, #1
 8004f92:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	3301      	adds	r3, #1
 8004f98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	61bb      	str	r3, [r7, #24]
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d3e2      	bcc.n	8004f7a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3724      	adds	r7, #36	; 0x24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b08b      	sub	sp, #44	; 0x2c
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004fd8:	88fb      	ldrh	r3, [r7, #6]
 8004fda:	089b      	lsrs	r3, r3, #2
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004fe0:	88fb      	ldrh	r3, [r7, #6]
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004fe8:	2300      	movs	r3, #0
 8004fea:	623b      	str	r3, [r7, #32]
 8004fec:	e014      	b.n	8005018 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	601a      	str	r2, [r3, #0]
    pDest++;
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	3301      	adds	r3, #1
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	3301      	adds	r3, #1
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	3301      	adds	r3, #1
 8005010:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	3301      	adds	r3, #1
 8005016:	623b      	str	r3, [r7, #32]
 8005018:	6a3a      	ldr	r2, [r7, #32]
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	429a      	cmp	r2, r3
 800501e:	d3e6      	bcc.n	8004fee <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005020:	8bfb      	ldrh	r3, [r7, #30]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d01e      	beq.n	8005064 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005026:	2300      	movs	r3, #0
 8005028:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005030:	461a      	mov	r2, r3
 8005032:	f107 0310 	add.w	r3, r7, #16
 8005036:	6812      	ldr	r2, [r2, #0]
 8005038:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	b2db      	uxtb	r3, r3
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	fa22 f303 	lsr.w	r3, r2, r3
 8005046:	b2da      	uxtb	r2, r3
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	701a      	strb	r2, [r3, #0]
      i++;
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	3301      	adds	r3, #1
 8005050:	623b      	str	r3, [r7, #32]
      pDest++;
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	3301      	adds	r3, #1
 8005056:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005058:	8bfb      	ldrh	r3, [r7, #30]
 800505a:	3b01      	subs	r3, #1
 800505c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800505e:	8bfb      	ldrh	r3, [r7, #30]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1ea      	bne.n	800503a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005066:	4618      	mov	r0, r3
 8005068:	372c      	adds	r7, #44	; 0x2c
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005072:	b480      	push	{r7}
 8005074:	b085      	sub	sp, #20
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	785b      	ldrb	r3, [r3, #1]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d12c      	bne.n	80050e8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	db12      	blt.n	80050c6 <USB_EPSetStall+0x54>
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00f      	beq.n	80050c6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	0151      	lsls	r1, r2, #5
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	440a      	add	r2, r1
 80050bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050c4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	0151      	lsls	r1, r2, #5
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	440a      	add	r2, r1
 80050dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	e02b      	b.n	8005140 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	db12      	blt.n	8005120 <USB_EPSetStall+0xae>
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00f      	beq.n	8005120 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	0151      	lsls	r1, r2, #5
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	440a      	add	r2, r1
 8005116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800511a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800511e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4413      	add	r3, r2
 8005128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	0151      	lsls	r1, r2, #5
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	440a      	add	r2, r1
 8005136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800513a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800513e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800514e:	b480      	push	{r7}
 8005150:	b085      	sub	sp, #20
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	785b      	ldrb	r3, [r3, #1]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d128      	bne.n	80051bc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	0151      	lsls	r1, r2, #5
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	440a      	add	r2, r1
 8005180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005184:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005188:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	78db      	ldrb	r3, [r3, #3]
 800518e:	2b03      	cmp	r3, #3
 8005190:	d003      	beq.n	800519a <USB_EPClearStall+0x4c>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	78db      	ldrb	r3, [r3, #3]
 8005196:	2b02      	cmp	r3, #2
 8005198:	d138      	bne.n	800520c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	0151      	lsls	r1, r2, #5
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	440a      	add	r2, r1
 80051b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	e027      	b.n	800520c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	0151      	lsls	r1, r2, #5
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	440a      	add	r2, r1
 80051d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	78db      	ldrb	r3, [r3, #3]
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d003      	beq.n	80051ec <USB_EPClearStall+0x9e>
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	78db      	ldrb	r3, [r3, #3]
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d10f      	bne.n	800520c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	0151      	lsls	r1, r2, #5
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	440a      	add	r2, r1
 8005202:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800520a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800521a:	b480      	push	{r7}
 800521c:	b085      	sub	sp, #20
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	460b      	mov	r3, r1
 8005224:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005238:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800523c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	78fb      	ldrb	r3, [r7, #3]
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800524e:	68f9      	ldr	r1, [r7, #12]
 8005250:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005254:	4313      	orrs	r3, r2
 8005256:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005266:	b480      	push	{r7}
 8005268:	b085      	sub	sp, #20
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005280:	f023 0303 	bic.w	r3, r3, #3
 8005284:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005294:	f023 0302 	bic.w	r3, r3, #2
 8005298:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80052c2:	f023 0303 	bic.w	r3, r3, #3
 80052c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052d6:	f043 0302 	orr.w	r3, r3, #2
 80052da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b085      	sub	sp, #20
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4013      	ands	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005302:	68fb      	ldr	r3, [r7, #12]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	4013      	ands	r3, r2
 8005332:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	0c1b      	lsrs	r3, r3, #16
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	4013      	ands	r3, r2
 8005366:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	b29b      	uxth	r3, r3
}
 800536c:	4618      	mov	r0, r3
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	460b      	mov	r3, r1
 8005382:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	4013      	ands	r3, r2
 80053a4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80053a6:	68bb      	ldr	r3, [r7, #8]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b087      	sub	sp, #28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	460b      	mov	r3, r1
 80053be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80053d8:	78fb      	ldrb	r3, [r7, #3]
 80053da:	f003 030f 	and.w	r3, r3, #15
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	fa22 f303 	lsr.w	r3, r2, r3
 80053e4:	01db      	lsls	r3, r3, #7
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80053ee:	78fb      	ldrb	r3, [r7, #3]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	4013      	ands	r3, r2
 8005400:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005402:	68bb      	ldr	r3, [r7, #8]
}
 8005404:	4618      	mov	r0, r3
 8005406:	371c      	adds	r7, #28
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	f003 0301 	and.w	r3, r3, #1
}
 8005420:	4618      	mov	r0, r3
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005446:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800544a:	f023 0307 	bic.w	r3, r3, #7
 800544e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800545e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005462:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
	...

08005474 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	460b      	mov	r3, r1
 800547e:	607a      	str	r2, [r7, #4]
 8005480:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	333c      	adds	r3, #60	; 0x3c
 800548a:	3304      	adds	r3, #4
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	4a26      	ldr	r2, [pc, #152]	; (800552c <USB_EP0_OutStart+0xb8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d90a      	bls.n	80054ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054a8:	d101      	bne.n	80054ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	e037      	b.n	800551e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b4:	461a      	mov	r2, r3
 80054b6:	2300      	movs	r3, #0
 80054b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054dc:	f043 0318 	orr.w	r3, r3, #24
 80054e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054f0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80054f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80054f6:	7afb      	ldrb	r3, [r7, #11]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d10f      	bne.n	800551c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005502:	461a      	mov	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005516:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800551a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	4f54300a 	.word	0x4f54300a

08005530 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	3301      	adds	r3, #1
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	4a13      	ldr	r2, [pc, #76]	; (8005590 <USB_CoreReset+0x60>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d901      	bls.n	800554c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e01a      	b.n	8005582 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	daf3      	bge.n	800553c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	f043 0201 	orr.w	r2, r3, #1
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3301      	adds	r3, #1
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	4a09      	ldr	r2, [pc, #36]	; (8005590 <USB_CoreReset+0x60>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d901      	bls.n	8005574 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e006      	b.n	8005582 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b01      	cmp	r3, #1
 800557e:	d0f1      	beq.n	8005564 <USB_CoreReset+0x34>

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	00030d40 	.word	0x00030d40

08005594 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	460b      	mov	r3, r1
 800559e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80055a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80055a4:	f002 f914 	bl	80077d0 <USBD_static_malloc>
 80055a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d105      	bne.n	80055bc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80055b8:	2302      	movs	r3, #2
 80055ba:	e066      	b.n	800568a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	7c1b      	ldrb	r3, [r3, #16]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d119      	bne.n	8005600 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80055cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055d0:	2202      	movs	r2, #2
 80055d2:	2181      	movs	r1, #129	; 0x81
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f001 ffd8 	bl	800758a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80055e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055e4:	2202      	movs	r2, #2
 80055e6:	2101      	movs	r1, #1
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f001 ffce 	bl	800758a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2210      	movs	r2, #16
 80055fa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80055fe:	e016      	b.n	800562e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005600:	2340      	movs	r3, #64	; 0x40
 8005602:	2202      	movs	r2, #2
 8005604:	2181      	movs	r1, #129	; 0x81
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f001 ffbf 	bl	800758a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005612:	2340      	movs	r3, #64	; 0x40
 8005614:	2202      	movs	r2, #2
 8005616:	2101      	movs	r1, #1
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f001 ffb6 	bl	800758a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2210      	movs	r2, #16
 800562a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800562e:	2308      	movs	r3, #8
 8005630:	2203      	movs	r2, #3
 8005632:	2182      	movs	r1, #130	; 0x82
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f001 ffa8 	bl	800758a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	7c1b      	ldrb	r3, [r3, #16]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d109      	bne.n	8005678 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800566a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800566e:	2101      	movs	r1, #1
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f002 f879 	bl	8007768 <USBD_LL_PrepareReceive>
 8005676:	e007      	b.n	8005688 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800567e:	2340      	movs	r3, #64	; 0x40
 8005680:	2101      	movs	r1, #1
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f002 f870 	bl	8007768 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b082      	sub	sp, #8
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	460b      	mov	r3, r1
 800569c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800569e:	2181      	movs	r1, #129	; 0x81
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f001 ff98 	bl	80075d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80056ac:	2101      	movs	r1, #1
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f001 ff91 	bl	80075d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80056bc:	2182      	movs	r1, #130	; 0x82
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f001 ff89 	bl	80075d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00e      	beq.n	80056fc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056ee:	4618      	mov	r0, r3
 80056f0:	f002 f87c 	bl	80077ec <USBD_static_free>
    pdev->pClassData = NULL;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005718:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800572c:	2303      	movs	r3, #3
 800572e:	e0af      	b.n	8005890 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005738:	2b00      	cmp	r3, #0
 800573a:	d03f      	beq.n	80057bc <USBD_CDC_Setup+0xb4>
 800573c:	2b20      	cmp	r3, #32
 800573e:	f040 809f 	bne.w	8005880 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	88db      	ldrh	r3, [r3, #6]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d02e      	beq.n	80057a8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	b25b      	sxtb	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	da16      	bge.n	8005782 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005760:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	88d2      	ldrh	r2, [r2, #6]
 8005766:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	88db      	ldrh	r3, [r3, #6]
 800576c:	2b07      	cmp	r3, #7
 800576e:	bf28      	it	cs
 8005770:	2307      	movcs	r3, #7
 8005772:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	89fa      	ldrh	r2, [r7, #14]
 8005778:	4619      	mov	r1, r3
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f001 fae9 	bl	8006d52 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005780:	e085      	b.n	800588e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	785a      	ldrb	r2, [r3, #1]
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	88db      	ldrh	r3, [r3, #6]
 8005790:	b2da      	uxtb	r2, r3
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005798:	6939      	ldr	r1, [r7, #16]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	88db      	ldrh	r3, [r3, #6]
 800579e:	461a      	mov	r2, r3
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f001 fb02 	bl	8006daa <USBD_CtlPrepareRx>
      break;
 80057a6:	e072      	b.n	800588e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	7850      	ldrb	r0, [r2, #1]
 80057b4:	2200      	movs	r2, #0
 80057b6:	6839      	ldr	r1, [r7, #0]
 80057b8:	4798      	blx	r3
      break;
 80057ba:	e068      	b.n	800588e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	785b      	ldrb	r3, [r3, #1]
 80057c0:	2b0b      	cmp	r3, #11
 80057c2:	d852      	bhi.n	800586a <USBD_CDC_Setup+0x162>
 80057c4:	a201      	add	r2, pc, #4	; (adr r2, 80057cc <USBD_CDC_Setup+0xc4>)
 80057c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ca:	bf00      	nop
 80057cc:	080057fd 	.word	0x080057fd
 80057d0:	08005879 	.word	0x08005879
 80057d4:	0800586b 	.word	0x0800586b
 80057d8:	0800586b 	.word	0x0800586b
 80057dc:	0800586b 	.word	0x0800586b
 80057e0:	0800586b 	.word	0x0800586b
 80057e4:	0800586b 	.word	0x0800586b
 80057e8:	0800586b 	.word	0x0800586b
 80057ec:	0800586b 	.word	0x0800586b
 80057f0:	0800586b 	.word	0x0800586b
 80057f4:	08005827 	.word	0x08005827
 80057f8:	08005851 	.word	0x08005851
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b03      	cmp	r3, #3
 8005806:	d107      	bne.n	8005818 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005808:	f107 030a 	add.w	r3, r7, #10
 800580c:	2202      	movs	r2, #2
 800580e:	4619      	mov	r1, r3
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f001 fa9e 	bl	8006d52 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005816:	e032      	b.n	800587e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005818:	6839      	ldr	r1, [r7, #0]
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f001 fa28 	bl	8006c70 <USBD_CtlError>
            ret = USBD_FAIL;
 8005820:	2303      	movs	r3, #3
 8005822:	75fb      	strb	r3, [r7, #23]
          break;
 8005824:	e02b      	b.n	800587e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b03      	cmp	r3, #3
 8005830:	d107      	bne.n	8005842 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005832:	f107 030d 	add.w	r3, r7, #13
 8005836:	2201      	movs	r2, #1
 8005838:	4619      	mov	r1, r3
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f001 fa89 	bl	8006d52 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005840:	e01d      	b.n	800587e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005842:	6839      	ldr	r1, [r7, #0]
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f001 fa13 	bl	8006c70 <USBD_CtlError>
            ret = USBD_FAIL;
 800584a:	2303      	movs	r3, #3
 800584c:	75fb      	strb	r3, [r7, #23]
          break;
 800584e:	e016      	b.n	800587e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b03      	cmp	r3, #3
 800585a:	d00f      	beq.n	800587c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800585c:	6839      	ldr	r1, [r7, #0]
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f001 fa06 	bl	8006c70 <USBD_CtlError>
            ret = USBD_FAIL;
 8005864:	2303      	movs	r3, #3
 8005866:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005868:	e008      	b.n	800587c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800586a:	6839      	ldr	r1, [r7, #0]
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f001 f9ff 	bl	8006c70 <USBD_CtlError>
          ret = USBD_FAIL;
 8005872:	2303      	movs	r3, #3
 8005874:	75fb      	strb	r3, [r7, #23]
          break;
 8005876:	e002      	b.n	800587e <USBD_CDC_Setup+0x176>
          break;
 8005878:	bf00      	nop
 800587a:	e008      	b.n	800588e <USBD_CDC_Setup+0x186>
          break;
 800587c:	bf00      	nop
      }
      break;
 800587e:	e006      	b.n	800588e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005880:	6839      	ldr	r1, [r7, #0]
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f001 f9f4 	bl	8006c70 <USBD_CtlError>
      ret = USBD_FAIL;
 8005888:	2303      	movs	r3, #3
 800588a:	75fb      	strb	r3, [r7, #23]
      break;
 800588c:	bf00      	nop
  }

  return (uint8_t)ret;
 800588e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3718      	adds	r7, #24
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80058aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e04f      	b.n	800595a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80058c2:	78fa      	ldrb	r2, [r7, #3]
 80058c4:	6879      	ldr	r1, [r7, #4]
 80058c6:	4613      	mov	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	440b      	add	r3, r1
 80058d0:	3318      	adds	r3, #24
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d029      	beq.n	800592c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80058d8:	78fa      	ldrb	r2, [r7, #3]
 80058da:	6879      	ldr	r1, [r7, #4]
 80058dc:	4613      	mov	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	440b      	add	r3, r1
 80058e6:	3318      	adds	r3, #24
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	78f9      	ldrb	r1, [r7, #3]
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	460b      	mov	r3, r1
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	1a5b      	subs	r3, r3, r1
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4403      	add	r3, r0
 80058f8:	3344      	adds	r3, #68	; 0x44
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8005900:	fb01 f303 	mul.w	r3, r1, r3
 8005904:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005906:	2b00      	cmp	r3, #0
 8005908:	d110      	bne.n	800592c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800590a:	78fa      	ldrb	r2, [r7, #3]
 800590c:	6879      	ldr	r1, [r7, #4]
 800590e:	4613      	mov	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	440b      	add	r3, r1
 8005918:	3318      	adds	r3, #24
 800591a:	2200      	movs	r2, #0
 800591c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800591e:	78f9      	ldrb	r1, [r7, #3]
 8005920:	2300      	movs	r3, #0
 8005922:	2200      	movs	r2, #0
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f001 fefe 	bl	8007726 <USBD_LL_Transmit>
 800592a:	e015      	b.n	8005958 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2200      	movs	r2, #0
 8005930:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00b      	beq.n	8005958 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005954:	78fa      	ldrb	r2, [r7, #3]
 8005956:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b084      	sub	sp, #16
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	460b      	mov	r3, r1
 800596c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005974:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005980:	2303      	movs	r3, #3
 8005982:	e015      	b.n	80059b0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005984:	78fb      	ldrb	r3, [r7, #3]
 8005986:	4619      	mov	r1, r3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f001 ff0e 	bl	80077aa <USBD_LL_GetRxDataSize>
 800598e:	4602      	mov	r2, r0
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80059aa:	4611      	mov	r1, r2
 80059ac:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059c6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e01b      	b.n	8005a0a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d015      	beq.n	8005a08 <USBD_CDC_EP0_RxReady+0x50>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80059e2:	2bff      	cmp	r3, #255	; 0xff
 80059e4:	d010      	beq.n	8005a08 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80059f4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80059fc:	b292      	uxth	r2, r2
 80059fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	22ff      	movs	r2, #255	; 0xff
 8005a04:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
	...

08005a14 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2243      	movs	r2, #67	; 0x43
 8005a20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005a22:	4b03      	ldr	r3, [pc, #12]	; (8005a30 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	20000094 	.word	0x20000094

08005a34 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2243      	movs	r2, #67	; 0x43
 8005a40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005a42:	4b03      	ldr	r3, [pc, #12]	; (8005a50 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	20000050 	.word	0x20000050

08005a54 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2243      	movs	r2, #67	; 0x43
 8005a60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005a62:	4b03      	ldr	r3, [pc, #12]	; (8005a70 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	200000d8 	.word	0x200000d8

08005a74 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	220a      	movs	r2, #10
 8005a80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005a82:	4b03      	ldr	r3, [pc, #12]	; (8005a90 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	2000000c 	.word	0x2000000c

08005a94 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e004      	b.n	8005ab2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b087      	sub	sp, #28
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ad0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e008      	b.n	8005aee <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b085      	sub	sp, #20
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b0a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e004      	b.n	8005b20 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3714      	adds	r7, #20
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b3a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e016      	b.n	8005b78 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	7c1b      	ldrb	r3, [r3, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d109      	bne.n	8005b66 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f001 fe02 	bl	8007768 <USBD_LL_PrepareReceive>
 8005b64:	e007      	b.n	8005b76 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b6c:	2340      	movs	r3, #64	; 0x40
 8005b6e:	2101      	movs	r1, #1
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f001 fdf9 	bl	8007768 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e01f      	b.n	8005bd8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	79fa      	ldrb	r2, [r7, #7]
 8005bca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f001 fc75 	bl	80074bc <USBD_LL_Init>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005bea:	2300      	movs	r3, #0
 8005bec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e016      	b.n	8005c26 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00b      	beq.n	8005c24 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	f107 020e 	add.w	r2, r7, #14
 8005c18:	4610      	mov	r0, r2
 8005c1a:	4798      	blx	r3
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b082      	sub	sp, #8
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f001 fc8c 	bl	8007554 <USBD_LL_Start>
 8005c3c:	4603      	mov	r3, r0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	460b      	mov	r3, r1
 8005c66:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d009      	beq.n	8005c8a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	78fa      	ldrb	r2, [r7, #3]
 8005c80:	4611      	mov	r1, r2
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	4798      	blx	r3
 8005c86:	4603      	mov	r3, r0
 8005c88:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d007      	beq.n	8005cba <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	78fa      	ldrb	r2, [r7, #3]
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	4798      	blx	r3
  }

  return USBD_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005cd4:	6839      	ldr	r1, [r7, #0]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 ff90 	bl	8006bfc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005cea:	461a      	mov	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005cf8:	f003 031f 	and.w	r3, r3, #31
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d01a      	beq.n	8005d36 <USBD_LL_SetupStage+0x72>
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d822      	bhi.n	8005d4a <USBD_LL_SetupStage+0x86>
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d002      	beq.n	8005d0e <USBD_LL_SetupStage+0x4a>
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d00a      	beq.n	8005d22 <USBD_LL_SetupStage+0x5e>
 8005d0c:	e01d      	b.n	8005d4a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d14:	4619      	mov	r1, r3
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fa62 	bl	80061e0 <USBD_StdDevReq>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d20:	e020      	b.n	8005d64 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d28:	4619      	mov	r1, r3
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fac6 	bl	80062bc <USBD_StdItfReq>
 8005d30:	4603      	mov	r3, r0
 8005d32:	73fb      	strb	r3, [r7, #15]
      break;
 8005d34:	e016      	b.n	8005d64 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fb05 	bl	800634e <USBD_StdEPReq>
 8005d44:	4603      	mov	r3, r0
 8005d46:	73fb      	strb	r3, [r7, #15]
      break;
 8005d48:	e00c      	b.n	8005d64 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	4619      	mov	r1, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f001 fc5b 	bl	8007614 <USBD_LL_StallEP>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	73fb      	strb	r3, [r7, #15]
      break;
 8005d62:	bf00      	nop
  }

  return ret;
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b086      	sub	sp, #24
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	60f8      	str	r0, [r7, #12]
 8005d76:	460b      	mov	r3, r1
 8005d78:	607a      	str	r2, [r7, #4]
 8005d7a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005d7c:	7afb      	ldrb	r3, [r7, #11]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d138      	bne.n	8005df4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005d88:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d90:	2b03      	cmp	r3, #3
 8005d92:	d14a      	bne.n	8005e2a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d913      	bls.n	8005dc8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	1ad2      	subs	r2, r2, r3
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	68da      	ldr	r2, [r3, #12]
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	4293      	cmp	r3, r2
 8005db8:	bf28      	it	cs
 8005dba:	4613      	movcs	r3, r2
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f001 f80f 	bl	8006de4 <USBD_CtlContinueRx>
 8005dc6:	e030      	b.n	8005e2a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d10b      	bne.n	8005dec <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d005      	beq.n	8005dec <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f001 f80a 	bl	8006e06 <USBD_CtlSendStatus>
 8005df2:	e01a      	b.n	8005e2a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	d114      	bne.n	8005e2a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00e      	beq.n	8005e2a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	7afa      	ldrb	r2, [r7, #11]
 8005e16:	4611      	mov	r1, r2
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	4798      	blx	r3
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005e20:	7dfb      	ldrb	r3, [r7, #23]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005e26:	7dfb      	ldrb	r3, [r7, #23]
 8005e28:	e000      	b.n	8005e2c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005e42:	7afb      	ldrb	r3, [r7, #11]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d16b      	bne.n	8005f20 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	3314      	adds	r3, #20
 8005e4c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d156      	bne.n	8005f06 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	689a      	ldr	r2, [r3, #8]
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d914      	bls.n	8005e8e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	1ad2      	subs	r2, r2, r3
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	461a      	mov	r2, r3
 8005e78:	6879      	ldr	r1, [r7, #4]
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 ff84 	bl	8006d88 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e80:	2300      	movs	r3, #0
 8005e82:	2200      	movs	r2, #0
 8005e84:	2100      	movs	r1, #0
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f001 fc6e 	bl	8007768 <USBD_LL_PrepareReceive>
 8005e8c:	e03b      	b.n	8005f06 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	68da      	ldr	r2, [r3, #12]
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d11c      	bne.n	8005ed4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d316      	bcc.n	8005ed4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d20f      	bcs.n	8005ed4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 ff65 	bl	8006d88 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	2200      	movs	r2, #0
 8005eca:	2100      	movs	r1, #0
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f001 fc4b 	bl	8007768 <USBD_LL_PrepareReceive>
 8005ed2:	e018      	b.n	8005f06 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	d10b      	bne.n	8005ef8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d005      	beq.n	8005ef8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ef8:	2180      	movs	r1, #128	; 0x80
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f001 fb8a 	bl	8007614 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 ff93 	bl	8006e2c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d122      	bne.n	8005f56 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f7ff fe98 	bl	8005c46 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005f1e:	e01a      	b.n	8005f56 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	d114      	bne.n	8005f56 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00e      	beq.n	8005f56 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	7afa      	ldrb	r2, [r7, #11]
 8005f42:	4611      	mov	r1, r2
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	4798      	blx	r3
 8005f48:	4603      	mov	r3, r0
 8005f4a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005f4c:	7dfb      	ldrb	r3, [r7, #23]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005f52:	7dfb      	ldrb	r3, [r7, #23]
 8005f54:	e000      	b.n	8005f58 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3718      	adds	r7, #24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e02f      	b.n	8005ff4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00f      	beq.n	8005fbe <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d009      	beq.n	8005fbe <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	6852      	ldr	r2, [r2, #4]
 8005fb6:	b2d2      	uxtb	r2, r2
 8005fb8:	4611      	mov	r1, r2
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005fbe:	2340      	movs	r3, #64	; 0x40
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f001 fae0 	bl	800758a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2240      	movs	r2, #64	; 0x40
 8005fd6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005fda:	2340      	movs	r3, #64	; 0x40
 8005fdc:	2200      	movs	r2, #0
 8005fde:	2180      	movs	r1, #128	; 0x80
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f001 fad2 	bl	800758a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2240      	movs	r2, #64	; 0x40
 8005ff0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3708      	adds	r7, #8
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	460b      	mov	r3, r1
 8006006:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	78fa      	ldrb	r2, [r7, #3]
 800600c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800602a:	b2da      	uxtb	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2204      	movs	r2, #4
 8006036:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b04      	cmp	r3, #4
 800605a:	d106      	bne.n	800606a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006062:	b2da      	uxtb	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800608a:	2303      	movs	r3, #3
 800608c:	e012      	b.n	80060b4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b03      	cmp	r3, #3
 8006098:	d10b      	bne.n	80060b2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d005      	beq.n	80060b2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	460b      	mov	r3, r1
 80060c6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e014      	b.n	8006100 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b03      	cmp	r3, #3
 80060e0:	d10d      	bne.n	80060fe <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d007      	beq.n	80060fe <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	78fa      	ldrb	r2, [r7, #3]
 80060f8:	4611      	mov	r1, r2
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	460b      	mov	r3, r1
 8006112:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800611e:	2303      	movs	r3, #3
 8006120:	e014      	b.n	800614c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b03      	cmp	r3, #3
 800612c:	d10d      	bne.n	800614a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	2b00      	cmp	r3, #0
 8006138:	d007      	beq.n	800614a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006142:	78fa      	ldrb	r2, [r7, #3]
 8006144:	4611      	mov	r1, r2
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b082      	sub	sp, #8
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006180:	2b00      	cmp	r3, #0
 8006182:	d009      	beq.n	8006198 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6852      	ldr	r2, [r2, #4]
 8006190:	b2d2      	uxtb	r2, r2
 8006192:	4611      	mov	r1, r2
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	4798      	blx	r3
  }

  return USBD_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b087      	sub	sp, #28
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	3301      	adds	r3, #1
 80061b8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80061c0:	8a3b      	ldrh	r3, [r7, #16]
 80061c2:	021b      	lsls	r3, r3, #8
 80061c4:	b21a      	sxth	r2, r3
 80061c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	b21b      	sxth	r3, r3
 80061ce:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80061d0:	89fb      	ldrh	r3, [r7, #14]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	371c      	adds	r7, #28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
	...

080061e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061f6:	2b40      	cmp	r3, #64	; 0x40
 80061f8:	d005      	beq.n	8006206 <USBD_StdDevReq+0x26>
 80061fa:	2b40      	cmp	r3, #64	; 0x40
 80061fc:	d853      	bhi.n	80062a6 <USBD_StdDevReq+0xc6>
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00b      	beq.n	800621a <USBD_StdDevReq+0x3a>
 8006202:	2b20      	cmp	r3, #32
 8006204:	d14f      	bne.n	80062a6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	6839      	ldr	r1, [r7, #0]
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	4798      	blx	r3
 8006214:	4603      	mov	r3, r0
 8006216:	73fb      	strb	r3, [r7, #15]
      break;
 8006218:	e04a      	b.n	80062b0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	785b      	ldrb	r3, [r3, #1]
 800621e:	2b09      	cmp	r3, #9
 8006220:	d83b      	bhi.n	800629a <USBD_StdDevReq+0xba>
 8006222:	a201      	add	r2, pc, #4	; (adr r2, 8006228 <USBD_StdDevReq+0x48>)
 8006224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006228:	0800627d 	.word	0x0800627d
 800622c:	08006291 	.word	0x08006291
 8006230:	0800629b 	.word	0x0800629b
 8006234:	08006287 	.word	0x08006287
 8006238:	0800629b 	.word	0x0800629b
 800623c:	0800625b 	.word	0x0800625b
 8006240:	08006251 	.word	0x08006251
 8006244:	0800629b 	.word	0x0800629b
 8006248:	08006273 	.word	0x08006273
 800624c:	08006265 	.word	0x08006265
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006250:	6839      	ldr	r1, [r7, #0]
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f9de 	bl	8006614 <USBD_GetDescriptor>
          break;
 8006258:	e024      	b.n	80062a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800625a:	6839      	ldr	r1, [r7, #0]
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fb43 	bl	80068e8 <USBD_SetAddress>
          break;
 8006262:	e01f      	b.n	80062a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006264:	6839      	ldr	r1, [r7, #0]
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fb82 	bl	8006970 <USBD_SetConfig>
 800626c:	4603      	mov	r3, r0
 800626e:	73fb      	strb	r3, [r7, #15]
          break;
 8006270:	e018      	b.n	80062a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006272:	6839      	ldr	r1, [r7, #0]
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fc21 	bl	8006abc <USBD_GetConfig>
          break;
 800627a:	e013      	b.n	80062a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800627c:	6839      	ldr	r1, [r7, #0]
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fc52 	bl	8006b28 <USBD_GetStatus>
          break;
 8006284:	e00e      	b.n	80062a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006286:	6839      	ldr	r1, [r7, #0]
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fc81 	bl	8006b90 <USBD_SetFeature>
          break;
 800628e:	e009      	b.n	80062a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006290:	6839      	ldr	r1, [r7, #0]
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fc90 	bl	8006bb8 <USBD_ClrFeature>
          break;
 8006298:	e004      	b.n	80062a4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800629a:	6839      	ldr	r1, [r7, #0]
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 fce7 	bl	8006c70 <USBD_CtlError>
          break;
 80062a2:	bf00      	nop
      }
      break;
 80062a4:	e004      	b.n	80062b0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80062a6:	6839      	ldr	r1, [r7, #0]
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fce1 	bl	8006c70 <USBD_CtlError>
      break;
 80062ae:	bf00      	nop
  }

  return ret;
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop

080062bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062d2:	2b40      	cmp	r3, #64	; 0x40
 80062d4:	d005      	beq.n	80062e2 <USBD_StdItfReq+0x26>
 80062d6:	2b40      	cmp	r3, #64	; 0x40
 80062d8:	d82f      	bhi.n	800633a <USBD_StdItfReq+0x7e>
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <USBD_StdItfReq+0x26>
 80062de:	2b20      	cmp	r3, #32
 80062e0:	d12b      	bne.n	800633a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	3b01      	subs	r3, #1
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d81d      	bhi.n	800632c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	889b      	ldrh	r3, [r3, #4]
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d813      	bhi.n	8006322 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	6839      	ldr	r1, [r7, #0]
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	4798      	blx	r3
 8006308:	4603      	mov	r3, r0
 800630a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	88db      	ldrh	r3, [r3, #6]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d110      	bne.n	8006336 <USBD_StdItfReq+0x7a>
 8006314:	7bfb      	ldrb	r3, [r7, #15]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10d      	bne.n	8006336 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fd73 	bl	8006e06 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006320:	e009      	b.n	8006336 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006322:	6839      	ldr	r1, [r7, #0]
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fca3 	bl	8006c70 <USBD_CtlError>
          break;
 800632a:	e004      	b.n	8006336 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fc9e 	bl	8006c70 <USBD_CtlError>
          break;
 8006334:	e000      	b.n	8006338 <USBD_StdItfReq+0x7c>
          break;
 8006336:	bf00      	nop
      }
      break;
 8006338:	e004      	b.n	8006344 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fc97 	bl	8006c70 <USBD_CtlError>
      break;
 8006342:	bf00      	nop
  }

  return ret;
 8006344:	7bfb      	ldrb	r3, [r7, #15]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006358:	2300      	movs	r3, #0
 800635a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	889b      	ldrh	r3, [r3, #4]
 8006360:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800636a:	2b40      	cmp	r3, #64	; 0x40
 800636c:	d007      	beq.n	800637e <USBD_StdEPReq+0x30>
 800636e:	2b40      	cmp	r3, #64	; 0x40
 8006370:	f200 8145 	bhi.w	80065fe <USBD_StdEPReq+0x2b0>
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00c      	beq.n	8006392 <USBD_StdEPReq+0x44>
 8006378:	2b20      	cmp	r3, #32
 800637a:	f040 8140 	bne.w	80065fe <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	6839      	ldr	r1, [r7, #0]
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	4798      	blx	r3
 800638c:	4603      	mov	r3, r0
 800638e:	73fb      	strb	r3, [r7, #15]
      break;
 8006390:	e13a      	b.n	8006608 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	785b      	ldrb	r3, [r3, #1]
 8006396:	2b03      	cmp	r3, #3
 8006398:	d007      	beq.n	80063aa <USBD_StdEPReq+0x5c>
 800639a:	2b03      	cmp	r3, #3
 800639c:	f300 8129 	bgt.w	80065f2 <USBD_StdEPReq+0x2a4>
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d07f      	beq.n	80064a4 <USBD_StdEPReq+0x156>
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d03c      	beq.n	8006422 <USBD_StdEPReq+0xd4>
 80063a8:	e123      	b.n	80065f2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d002      	beq.n	80063bc <USBD_StdEPReq+0x6e>
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	d016      	beq.n	80063e8 <USBD_StdEPReq+0x9a>
 80063ba:	e02c      	b.n	8006416 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063bc:	7bbb      	ldrb	r3, [r7, #14]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00d      	beq.n	80063de <USBD_StdEPReq+0x90>
 80063c2:	7bbb      	ldrb	r3, [r7, #14]
 80063c4:	2b80      	cmp	r3, #128	; 0x80
 80063c6:	d00a      	beq.n	80063de <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80063c8:	7bbb      	ldrb	r3, [r7, #14]
 80063ca:	4619      	mov	r1, r3
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f001 f921 	bl	8007614 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80063d2:	2180      	movs	r1, #128	; 0x80
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f001 f91d 	bl	8007614 <USBD_LL_StallEP>
 80063da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063dc:	e020      	b.n	8006420 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fc45 	bl	8006c70 <USBD_CtlError>
              break;
 80063e6:	e01b      	b.n	8006420 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	885b      	ldrh	r3, [r3, #2]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10e      	bne.n	800640e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80063f0:	7bbb      	ldrb	r3, [r7, #14]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00b      	beq.n	800640e <USBD_StdEPReq+0xc0>
 80063f6:	7bbb      	ldrb	r3, [r7, #14]
 80063f8:	2b80      	cmp	r3, #128	; 0x80
 80063fa:	d008      	beq.n	800640e <USBD_StdEPReq+0xc0>
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	88db      	ldrh	r3, [r3, #6]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d104      	bne.n	800640e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006404:	7bbb      	ldrb	r3, [r7, #14]
 8006406:	4619      	mov	r1, r3
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f001 f903 	bl	8007614 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fcf9 	bl	8006e06 <USBD_CtlSendStatus>

              break;
 8006414:	e004      	b.n	8006420 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006416:	6839      	ldr	r1, [r7, #0]
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 fc29 	bl	8006c70 <USBD_CtlError>
              break;
 800641e:	bf00      	nop
          }
          break;
 8006420:	e0ec      	b.n	80065fc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b02      	cmp	r3, #2
 800642c:	d002      	beq.n	8006434 <USBD_StdEPReq+0xe6>
 800642e:	2b03      	cmp	r3, #3
 8006430:	d016      	beq.n	8006460 <USBD_StdEPReq+0x112>
 8006432:	e030      	b.n	8006496 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006434:	7bbb      	ldrb	r3, [r7, #14]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00d      	beq.n	8006456 <USBD_StdEPReq+0x108>
 800643a:	7bbb      	ldrb	r3, [r7, #14]
 800643c:	2b80      	cmp	r3, #128	; 0x80
 800643e:	d00a      	beq.n	8006456 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006440:	7bbb      	ldrb	r3, [r7, #14]
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f001 f8e5 	bl	8007614 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800644a:	2180      	movs	r1, #128	; 0x80
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f001 f8e1 	bl	8007614 <USBD_LL_StallEP>
 8006452:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006454:	e025      	b.n	80064a2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006456:	6839      	ldr	r1, [r7, #0]
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fc09 	bl	8006c70 <USBD_CtlError>
              break;
 800645e:	e020      	b.n	80064a2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	885b      	ldrh	r3, [r3, #2]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d11b      	bne.n	80064a0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006468:	7bbb      	ldrb	r3, [r7, #14]
 800646a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800646e:	2b00      	cmp	r3, #0
 8006470:	d004      	beq.n	800647c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006472:	7bbb      	ldrb	r3, [r7, #14]
 8006474:	4619      	mov	r1, r3
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f001 f8eb 	bl	8007652 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fcc2 	bl	8006e06 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	6839      	ldr	r1, [r7, #0]
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	4798      	blx	r3
 8006490:	4603      	mov	r3, r0
 8006492:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006494:	e004      	b.n	80064a0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fbe9 	bl	8006c70 <USBD_CtlError>
              break;
 800649e:	e000      	b.n	80064a2 <USBD_StdEPReq+0x154>
              break;
 80064a0:	bf00      	nop
          }
          break;
 80064a2:	e0ab      	b.n	80065fc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d002      	beq.n	80064b6 <USBD_StdEPReq+0x168>
 80064b0:	2b03      	cmp	r3, #3
 80064b2:	d032      	beq.n	800651a <USBD_StdEPReq+0x1cc>
 80064b4:	e097      	b.n	80065e6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064b6:	7bbb      	ldrb	r3, [r7, #14]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d007      	beq.n	80064cc <USBD_StdEPReq+0x17e>
 80064bc:	7bbb      	ldrb	r3, [r7, #14]
 80064be:	2b80      	cmp	r3, #128	; 0x80
 80064c0:	d004      	beq.n	80064cc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fbd3 	bl	8006c70 <USBD_CtlError>
                break;
 80064ca:	e091      	b.n	80065f0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	da0b      	bge.n	80064ec <USBD_StdEPReq+0x19e>
 80064d4:	7bbb      	ldrb	r3, [r7, #14]
 80064d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064da:	4613      	mov	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	3310      	adds	r3, #16
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	4413      	add	r3, r2
 80064e8:	3304      	adds	r3, #4
 80064ea:	e00b      	b.n	8006504 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064ec:	7bbb      	ldrb	r3, [r7, #14]
 80064ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064f2:	4613      	mov	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	4413      	add	r3, r2
 8006502:	3304      	adds	r3, #4
 8006504:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2202      	movs	r2, #2
 8006510:	4619      	mov	r1, r3
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fc1d 	bl	8006d52 <USBD_CtlSendData>
              break;
 8006518:	e06a      	b.n	80065f0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800651a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800651e:	2b00      	cmp	r3, #0
 8006520:	da11      	bge.n	8006546 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006522:	7bbb      	ldrb	r3, [r7, #14]
 8006524:	f003 020f 	and.w	r2, r3, #15
 8006528:	6879      	ldr	r1, [r7, #4]
 800652a:	4613      	mov	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	440b      	add	r3, r1
 8006534:	3324      	adds	r3, #36	; 0x24
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d117      	bne.n	800656c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800653c:	6839      	ldr	r1, [r7, #0]
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 fb96 	bl	8006c70 <USBD_CtlError>
                  break;
 8006544:	e054      	b.n	80065f0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006546:	7bbb      	ldrb	r3, [r7, #14]
 8006548:	f003 020f 	and.w	r2, r3, #15
 800654c:	6879      	ldr	r1, [r7, #4]
 800654e:	4613      	mov	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4413      	add	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	440b      	add	r3, r1
 8006558:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d104      	bne.n	800656c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fb83 	bl	8006c70 <USBD_CtlError>
                  break;
 800656a:	e041      	b.n	80065f0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800656c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006570:	2b00      	cmp	r3, #0
 8006572:	da0b      	bge.n	800658c <USBD_StdEPReq+0x23e>
 8006574:	7bbb      	ldrb	r3, [r7, #14]
 8006576:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800657a:	4613      	mov	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	3310      	adds	r3, #16
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	4413      	add	r3, r2
 8006588:	3304      	adds	r3, #4
 800658a:	e00b      	b.n	80065a4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800658c:	7bbb      	ldrb	r3, [r7, #14]
 800658e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006592:	4613      	mov	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	4413      	add	r3, r2
 80065a2:	3304      	adds	r3, #4
 80065a4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80065a6:	7bbb      	ldrb	r3, [r7, #14]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <USBD_StdEPReq+0x264>
 80065ac:	7bbb      	ldrb	r3, [r7, #14]
 80065ae:	2b80      	cmp	r3, #128	; 0x80
 80065b0:	d103      	bne.n	80065ba <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2200      	movs	r2, #0
 80065b6:	601a      	str	r2, [r3, #0]
 80065b8:	e00e      	b.n	80065d8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80065ba:	7bbb      	ldrb	r3, [r7, #14]
 80065bc:	4619      	mov	r1, r3
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f001 f866 	bl	8007690 <USBD_LL_IsStallEP>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2201      	movs	r2, #1
 80065ce:	601a      	str	r2, [r3, #0]
 80065d0:	e002      	b.n	80065d8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2202      	movs	r2, #2
 80065dc:	4619      	mov	r1, r3
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fbb7 	bl	8006d52 <USBD_CtlSendData>
              break;
 80065e4:	e004      	b.n	80065f0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80065e6:	6839      	ldr	r1, [r7, #0]
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fb41 	bl	8006c70 <USBD_CtlError>
              break;
 80065ee:	bf00      	nop
          }
          break;
 80065f0:	e004      	b.n	80065fc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 fb3b 	bl	8006c70 <USBD_CtlError>
          break;
 80065fa:	bf00      	nop
      }
      break;
 80065fc:	e004      	b.n	8006608 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80065fe:	6839      	ldr	r1, [r7, #0]
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 fb35 	bl	8006c70 <USBD_CtlError>
      break;
 8006606:	bf00      	nop
  }

  return ret;
 8006608:	7bfb      	ldrb	r3, [r7, #15]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
	...

08006614 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800661e:	2300      	movs	r3, #0
 8006620:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	885b      	ldrh	r3, [r3, #2]
 800662e:	0a1b      	lsrs	r3, r3, #8
 8006630:	b29b      	uxth	r3, r3
 8006632:	3b01      	subs	r3, #1
 8006634:	2b06      	cmp	r3, #6
 8006636:	f200 8128 	bhi.w	800688a <USBD_GetDescriptor+0x276>
 800663a:	a201      	add	r2, pc, #4	; (adr r2, 8006640 <USBD_GetDescriptor+0x2c>)
 800663c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006640:	0800665d 	.word	0x0800665d
 8006644:	08006675 	.word	0x08006675
 8006648:	080066b5 	.word	0x080066b5
 800664c:	0800688b 	.word	0x0800688b
 8006650:	0800688b 	.word	0x0800688b
 8006654:	0800682b 	.word	0x0800682b
 8006658:	08006857 	.word	0x08006857
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	7c12      	ldrb	r2, [r2, #16]
 8006668:	f107 0108 	add.w	r1, r7, #8
 800666c:	4610      	mov	r0, r2
 800666e:	4798      	blx	r3
 8006670:	60f8      	str	r0, [r7, #12]
      break;
 8006672:	e112      	b.n	800689a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	7c1b      	ldrb	r3, [r3, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10d      	bne.n	8006698 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006684:	f107 0208 	add.w	r2, r7, #8
 8006688:	4610      	mov	r0, r2
 800668a:	4798      	blx	r3
 800668c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3301      	adds	r3, #1
 8006692:	2202      	movs	r2, #2
 8006694:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006696:	e100      	b.n	800689a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800669e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a0:	f107 0208 	add.w	r2, r7, #8
 80066a4:	4610      	mov	r0, r2
 80066a6:	4798      	blx	r3
 80066a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	3301      	adds	r3, #1
 80066ae:	2202      	movs	r2, #2
 80066b0:	701a      	strb	r2, [r3, #0]
      break;
 80066b2:	e0f2      	b.n	800689a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	885b      	ldrh	r3, [r3, #2]
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b05      	cmp	r3, #5
 80066bc:	f200 80ac 	bhi.w	8006818 <USBD_GetDescriptor+0x204>
 80066c0:	a201      	add	r2, pc, #4	; (adr r2, 80066c8 <USBD_GetDescriptor+0xb4>)
 80066c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c6:	bf00      	nop
 80066c8:	080066e1 	.word	0x080066e1
 80066cc:	08006715 	.word	0x08006715
 80066d0:	08006749 	.word	0x08006749
 80066d4:	0800677d 	.word	0x0800677d
 80066d8:	080067b1 	.word	0x080067b1
 80066dc:	080067e5 	.word	0x080067e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00b      	beq.n	8006704 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	7c12      	ldrb	r2, [r2, #16]
 80066f8:	f107 0108 	add.w	r1, r7, #8
 80066fc:	4610      	mov	r0, r2
 80066fe:	4798      	blx	r3
 8006700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006702:	e091      	b.n	8006828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fab2 	bl	8006c70 <USBD_CtlError>
            err++;
 800670c:	7afb      	ldrb	r3, [r7, #11]
 800670e:	3301      	adds	r3, #1
 8006710:	72fb      	strb	r3, [r7, #11]
          break;
 8006712:	e089      	b.n	8006828 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00b      	beq.n	8006738 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	7c12      	ldrb	r2, [r2, #16]
 800672c:	f107 0108 	add.w	r1, r7, #8
 8006730:	4610      	mov	r0, r2
 8006732:	4798      	blx	r3
 8006734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006736:	e077      	b.n	8006828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fa98 	bl	8006c70 <USBD_CtlError>
            err++;
 8006740:	7afb      	ldrb	r3, [r7, #11]
 8006742:	3301      	adds	r3, #1
 8006744:	72fb      	strb	r3, [r7, #11]
          break;
 8006746:	e06f      	b.n	8006828 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00b      	beq.n	800676c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	7c12      	ldrb	r2, [r2, #16]
 8006760:	f107 0108 	add.w	r1, r7, #8
 8006764:	4610      	mov	r0, r2
 8006766:	4798      	blx	r3
 8006768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800676a:	e05d      	b.n	8006828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800676c:	6839      	ldr	r1, [r7, #0]
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fa7e 	bl	8006c70 <USBD_CtlError>
            err++;
 8006774:	7afb      	ldrb	r3, [r7, #11]
 8006776:	3301      	adds	r3, #1
 8006778:	72fb      	strb	r3, [r7, #11]
          break;
 800677a:	e055      	b.n	8006828 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00b      	beq.n	80067a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	7c12      	ldrb	r2, [r2, #16]
 8006794:	f107 0108 	add.w	r1, r7, #8
 8006798:	4610      	mov	r0, r2
 800679a:	4798      	blx	r3
 800679c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800679e:	e043      	b.n	8006828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fa64 	bl	8006c70 <USBD_CtlError>
            err++;
 80067a8:	7afb      	ldrb	r3, [r7, #11]
 80067aa:	3301      	adds	r3, #1
 80067ac:	72fb      	strb	r3, [r7, #11]
          break;
 80067ae:	e03b      	b.n	8006828 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067b6:	695b      	ldr	r3, [r3, #20]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00b      	beq.n	80067d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	7c12      	ldrb	r2, [r2, #16]
 80067c8:	f107 0108 	add.w	r1, r7, #8
 80067cc:	4610      	mov	r0, r2
 80067ce:	4798      	blx	r3
 80067d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067d2:	e029      	b.n	8006828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fa4a 	bl	8006c70 <USBD_CtlError>
            err++;
 80067dc:	7afb      	ldrb	r3, [r7, #11]
 80067de:	3301      	adds	r3, #1
 80067e0:	72fb      	strb	r3, [r7, #11]
          break;
 80067e2:	e021      	b.n	8006828 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00b      	beq.n	8006808 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	7c12      	ldrb	r2, [r2, #16]
 80067fc:	f107 0108 	add.w	r1, r7, #8
 8006800:	4610      	mov	r0, r2
 8006802:	4798      	blx	r3
 8006804:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006806:	e00f      	b.n	8006828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fa30 	bl	8006c70 <USBD_CtlError>
            err++;
 8006810:	7afb      	ldrb	r3, [r7, #11]
 8006812:	3301      	adds	r3, #1
 8006814:	72fb      	strb	r3, [r7, #11]
          break;
 8006816:	e007      	b.n	8006828 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006818:	6839      	ldr	r1, [r7, #0]
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 fa28 	bl	8006c70 <USBD_CtlError>
          err++;
 8006820:	7afb      	ldrb	r3, [r7, #11]
 8006822:	3301      	adds	r3, #1
 8006824:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006826:	bf00      	nop
      }
      break;
 8006828:	e037      	b.n	800689a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	7c1b      	ldrb	r3, [r3, #16]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d109      	bne.n	8006846 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800683a:	f107 0208 	add.w	r2, r7, #8
 800683e:	4610      	mov	r0, r2
 8006840:	4798      	blx	r3
 8006842:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006844:	e029      	b.n	800689a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fa11 	bl	8006c70 <USBD_CtlError>
        err++;
 800684e:	7afb      	ldrb	r3, [r7, #11]
 8006850:	3301      	adds	r3, #1
 8006852:	72fb      	strb	r3, [r7, #11]
      break;
 8006854:	e021      	b.n	800689a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	7c1b      	ldrb	r3, [r3, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10d      	bne.n	800687a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006866:	f107 0208 	add.w	r2, r7, #8
 800686a:	4610      	mov	r0, r2
 800686c:	4798      	blx	r3
 800686e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	3301      	adds	r3, #1
 8006874:	2207      	movs	r2, #7
 8006876:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006878:	e00f      	b.n	800689a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800687a:	6839      	ldr	r1, [r7, #0]
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f9f7 	bl	8006c70 <USBD_CtlError>
        err++;
 8006882:	7afb      	ldrb	r3, [r7, #11]
 8006884:	3301      	adds	r3, #1
 8006886:	72fb      	strb	r3, [r7, #11]
      break;
 8006888:	e007      	b.n	800689a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800688a:	6839      	ldr	r1, [r7, #0]
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f9ef 	bl	8006c70 <USBD_CtlError>
      err++;
 8006892:	7afb      	ldrb	r3, [r7, #11]
 8006894:	3301      	adds	r3, #1
 8006896:	72fb      	strb	r3, [r7, #11]
      break;
 8006898:	bf00      	nop
  }

  if (err != 0U)
 800689a:	7afb      	ldrb	r3, [r7, #11]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d11e      	bne.n	80068de <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	88db      	ldrh	r3, [r3, #6]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d016      	beq.n	80068d6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80068a8:	893b      	ldrh	r3, [r7, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00e      	beq.n	80068cc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	88da      	ldrh	r2, [r3, #6]
 80068b2:	893b      	ldrh	r3, [r7, #8]
 80068b4:	4293      	cmp	r3, r2
 80068b6:	bf28      	it	cs
 80068b8:	4613      	movcs	r3, r2
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80068be:	893b      	ldrh	r3, [r7, #8]
 80068c0:	461a      	mov	r2, r3
 80068c2:	68f9      	ldr	r1, [r7, #12]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fa44 	bl	8006d52 <USBD_CtlSendData>
 80068ca:	e009      	b.n	80068e0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80068cc:	6839      	ldr	r1, [r7, #0]
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f9ce 	bl	8006c70 <USBD_CtlError>
 80068d4:	e004      	b.n	80068e0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fa95 	bl	8006e06 <USBD_CtlSendStatus>
 80068dc:	e000      	b.n	80068e0 <USBD_GetDescriptor+0x2cc>
    return;
 80068de:	bf00      	nop
  }
}
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop

080068e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	889b      	ldrh	r3, [r3, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d131      	bne.n	800695e <USBD_SetAddress+0x76>
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	88db      	ldrh	r3, [r3, #6]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d12d      	bne.n	800695e <USBD_SetAddress+0x76>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	885b      	ldrh	r3, [r3, #2]
 8006906:	2b7f      	cmp	r3, #127	; 0x7f
 8006908:	d829      	bhi.n	800695e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	885b      	ldrh	r3, [r3, #2]
 800690e:	b2db      	uxtb	r3, r3
 8006910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006914:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b03      	cmp	r3, #3
 8006920:	d104      	bne.n	800692c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f9a3 	bl	8006c70 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800692a:	e01d      	b.n	8006968 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	7bfa      	ldrb	r2, [r7, #15]
 8006930:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006934:	7bfb      	ldrb	r3, [r7, #15]
 8006936:	4619      	mov	r1, r3
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fed5 	bl	80076e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fa61 	bl	8006e06 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d004      	beq.n	8006954 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2202      	movs	r2, #2
 800694e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006952:	e009      	b.n	8006968 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800695c:	e004      	b.n	8006968 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800695e:	6839      	ldr	r1, [r7, #0]
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 f985 	bl	8006c70 <USBD_CtlError>
  }
}
 8006966:	bf00      	nop
 8006968:	bf00      	nop
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800697a:	2300      	movs	r3, #0
 800697c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	885b      	ldrh	r3, [r3, #2]
 8006982:	b2da      	uxtb	r2, r3
 8006984:	4b4c      	ldr	r3, [pc, #304]	; (8006ab8 <USBD_SetConfig+0x148>)
 8006986:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006988:	4b4b      	ldr	r3, [pc, #300]	; (8006ab8 <USBD_SetConfig+0x148>)
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d905      	bls.n	800699c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f96c 	bl	8006c70 <USBD_CtlError>
    return USBD_FAIL;
 8006998:	2303      	movs	r3, #3
 800699a:	e088      	b.n	8006aae <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d002      	beq.n	80069ae <USBD_SetConfig+0x3e>
 80069a8:	2b03      	cmp	r3, #3
 80069aa:	d025      	beq.n	80069f8 <USBD_SetConfig+0x88>
 80069ac:	e071      	b.n	8006a92 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80069ae:	4b42      	ldr	r3, [pc, #264]	; (8006ab8 <USBD_SetConfig+0x148>)
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d01c      	beq.n	80069f0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80069b6:	4b40      	ldr	r3, [pc, #256]	; (8006ab8 <USBD_SetConfig+0x148>)
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	461a      	mov	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80069c0:	4b3d      	ldr	r3, [pc, #244]	; (8006ab8 <USBD_SetConfig+0x148>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	4619      	mov	r1, r3
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7ff f948 	bl	8005c5c <USBD_SetClassConfig>
 80069cc:	4603      	mov	r3, r0
 80069ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d004      	beq.n	80069e0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80069d6:	6839      	ldr	r1, [r7, #0]
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f949 	bl	8006c70 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80069de:	e065      	b.n	8006aac <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fa10 	bl	8006e06 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2203      	movs	r2, #3
 80069ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80069ee:	e05d      	b.n	8006aac <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fa08 	bl	8006e06 <USBD_CtlSendStatus>
      break;
 80069f6:	e059      	b.n	8006aac <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80069f8:	4b2f      	ldr	r3, [pc, #188]	; (8006ab8 <USBD_SetConfig+0x148>)
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d112      	bne.n	8006a26 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006a08:	4b2b      	ldr	r3, [pc, #172]	; (8006ab8 <USBD_SetConfig+0x148>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a12:	4b29      	ldr	r3, [pc, #164]	; (8006ab8 <USBD_SetConfig+0x148>)
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f7ff f93b 	bl	8005c94 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f9f1 	bl	8006e06 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a24:	e042      	b.n	8006aac <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006a26:	4b24      	ldr	r3, [pc, #144]	; (8006ab8 <USBD_SetConfig+0x148>)
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d02a      	beq.n	8006a8a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7ff f929 	bl	8005c94 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006a42:	4b1d      	ldr	r3, [pc, #116]	; (8006ab8 <USBD_SetConfig+0x148>)
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	461a      	mov	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a4c:	4b1a      	ldr	r3, [pc, #104]	; (8006ab8 <USBD_SetConfig+0x148>)
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	4619      	mov	r1, r3
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7ff f902 	bl	8005c5c <USBD_SetClassConfig>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00f      	beq.n	8006a82 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f903 	bl	8006c70 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	4619      	mov	r1, r3
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7ff f90e 	bl	8005c94 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a80:	e014      	b.n	8006aac <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f9bf 	bl	8006e06 <USBD_CtlSendStatus>
      break;
 8006a88:	e010      	b.n	8006aac <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f9bb 	bl	8006e06 <USBD_CtlSendStatus>
      break;
 8006a90:	e00c      	b.n	8006aac <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f8eb 	bl	8006c70 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a9a:	4b07      	ldr	r3, [pc, #28]	; (8006ab8 <USBD_SetConfig+0x148>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7ff f8f7 	bl	8005c94 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8006aaa:	bf00      	nop
  }

  return ret;
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	20000294 	.word	0x20000294

08006abc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	88db      	ldrh	r3, [r3, #6]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d004      	beq.n	8006ad8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006ace:	6839      	ldr	r1, [r7, #0]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f8cd 	bl	8006c70 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006ad6:	e023      	b.n	8006b20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	dc02      	bgt.n	8006aea <USBD_GetConfig+0x2e>
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	dc03      	bgt.n	8006af0 <USBD_GetConfig+0x34>
 8006ae8:	e015      	b.n	8006b16 <USBD_GetConfig+0x5a>
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	d00b      	beq.n	8006b06 <USBD_GetConfig+0x4a>
 8006aee:	e012      	b.n	8006b16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	3308      	adds	r3, #8
 8006afa:	2201      	movs	r2, #1
 8006afc:	4619      	mov	r1, r3
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f927 	bl	8006d52 <USBD_CtlSendData>
        break;
 8006b04:	e00c      	b.n	8006b20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	3304      	adds	r3, #4
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f91f 	bl	8006d52 <USBD_CtlSendData>
        break;
 8006b14:	e004      	b.n	8006b20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f8a9 	bl	8006c70 <USBD_CtlError>
        break;
 8006b1e:	bf00      	nop
}
 8006b20:	bf00      	nop
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d81e      	bhi.n	8006b7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	88db      	ldrh	r3, [r3, #6]
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d004      	beq.n	8006b52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006b48:	6839      	ldr	r1, [r7, #0]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f890 	bl	8006c70 <USBD_CtlError>
        break;
 8006b50:	e01a      	b.n	8006b88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2201      	movs	r2, #1
 8006b56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d005      	beq.n	8006b6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	f043 0202 	orr.w	r2, r3, #2
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	330c      	adds	r3, #12
 8006b72:	2202      	movs	r2, #2
 8006b74:	4619      	mov	r1, r3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f8eb 	bl	8006d52 <USBD_CtlSendData>
      break;
 8006b7c:	e004      	b.n	8006b88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006b7e:	6839      	ldr	r1, [r7, #0]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 f875 	bl	8006c70 <USBD_CtlError>
      break;
 8006b86:	bf00      	nop
  }
}
 8006b88:	bf00      	nop
 8006b8a:	3708      	adds	r7, #8
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	885b      	ldrh	r3, [r3, #2]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d106      	bne.n	8006bb0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f92b 	bl	8006e06 <USBD_CtlSendStatus>
  }
}
 8006bb0:	bf00      	nop
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d80b      	bhi.n	8006be8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	885b      	ldrh	r3, [r3, #2]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d10c      	bne.n	8006bf2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f910 	bl	8006e06 <USBD_CtlSendStatus>
      }
      break;
 8006be6:	e004      	b.n	8006bf2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f840 	bl	8006c70 <USBD_CtlError>
      break;
 8006bf0:	e000      	b.n	8006bf4 <USBD_ClrFeature+0x3c>
      break;
 8006bf2:	bf00      	nop
  }
}
 8006bf4:	bf00      	nop
 8006bf6:	3708      	adds	r7, #8
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	781a      	ldrb	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3301      	adds	r3, #1
 8006c16:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	781a      	ldrb	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	3301      	adds	r3, #1
 8006c24:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f7ff fabb 	bl	80061a2 <SWAPBYTE>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	461a      	mov	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	3301      	adds	r3, #1
 8006c38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f7ff faae 	bl	80061a2 <SWAPBYTE>
 8006c46:	4603      	mov	r3, r0
 8006c48:	461a      	mov	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3301      	adds	r3, #1
 8006c52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	3301      	adds	r3, #1
 8006c58:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f7ff faa1 	bl	80061a2 <SWAPBYTE>
 8006c60:	4603      	mov	r3, r0
 8006c62:	461a      	mov	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	80da      	strh	r2, [r3, #6]
}
 8006c68:	bf00      	nop
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c7a:	2180      	movs	r1, #128	; 0x80
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fcc9 	bl	8007614 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c82:	2100      	movs	r1, #0
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fcc5 	bl	8007614 <USBD_LL_StallEP>
}
 8006c8a:	bf00      	nop
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b086      	sub	sp, #24
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	60f8      	str	r0, [r7, #12]
 8006c9a:	60b9      	str	r1, [r7, #8]
 8006c9c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d036      	beq.n	8006d16 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006cac:	6938      	ldr	r0, [r7, #16]
 8006cae:	f000 f836 	bl	8006d1e <USBD_GetLen>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	005b      	lsls	r3, r3, #1
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006cc0:	7dfb      	ldrb	r3, [r7, #23]
 8006cc2:	68ba      	ldr	r2, [r7, #8]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	7812      	ldrb	r2, [r2, #0]
 8006cca:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ccc:	7dfb      	ldrb	r3, [r7, #23]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006cd2:	7dfb      	ldrb	r3, [r7, #23]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	2203      	movs	r2, #3
 8006cda:	701a      	strb	r2, [r3, #0]
  idx++;
 8006cdc:	7dfb      	ldrb	r3, [r7, #23]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006ce2:	e013      	b.n	8006d0c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006ce4:	7dfb      	ldrb	r3, [r7, #23]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	4413      	add	r3, r2
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	7812      	ldrb	r2, [r2, #0]
 8006cee:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	613b      	str	r3, [r7, #16]
    idx++;
 8006cf6:	7dfb      	ldrb	r3, [r7, #23]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006cfc:	7dfb      	ldrb	r3, [r7, #23]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	4413      	add	r3, r2
 8006d02:	2200      	movs	r2, #0
 8006d04:	701a      	strb	r2, [r3, #0]
    idx++;
 8006d06:	7dfb      	ldrb	r3, [r7, #23]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1e7      	bne.n	8006ce4 <USBD_GetString+0x52>
 8006d14:	e000      	b.n	8006d18 <USBD_GetString+0x86>
    return;
 8006d16:	bf00      	nop
  }
}
 8006d18:	3718      	adds	r7, #24
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b085      	sub	sp, #20
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006d2e:	e005      	b.n	8006d3c <USBD_GetLen+0x1e>
  {
    len++;
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
 8006d32:	3301      	adds	r3, #1
 8006d34:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1f5      	bne.n	8006d30 <USBD_GetLen+0x12>
  }

  return len;
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b084      	sub	sp, #16
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	60f8      	str	r0, [r7, #12]
 8006d5a:	60b9      	str	r1, [r7, #8]
 8006d5c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2202      	movs	r2, #2
 8006d62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	2100      	movs	r1, #0
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f000 fcd4 	bl	8007726 <USBD_LL_Transmit>

  return USBD_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	2100      	movs	r1, #0
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f000 fcc3 	bl	8007726 <USBD_LL_Transmit>

  return USBD_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	60f8      	str	r0, [r7, #12]
 8006db2:	60b9      	str	r1, [r7, #8]
 8006db4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2203      	movs	r2, #3
 8006dba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 fcc7 	bl	8007768 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	2100      	movs	r1, #0
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 fcb6 	bl	8007768 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b082      	sub	sp, #8
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2204      	movs	r2, #4
 8006e12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e16:	2300      	movs	r3, #0
 8006e18:	2200      	movs	r2, #0
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fc82 	bl	8007726 <USBD_LL_Transmit>

  return USBD_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2205      	movs	r2, #5
 8006e38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	2200      	movs	r2, #0
 8006e40:	2100      	movs	r1, #0
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fc90 	bl	8007768 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	4912      	ldr	r1, [pc, #72]	; (8006ea4 <MX_USB_DEVICE_Init+0x50>)
 8006e5c:	4812      	ldr	r0, [pc, #72]	; (8006ea8 <MX_USB_DEVICE_Init+0x54>)
 8006e5e:	f7fe fe8f 	bl	8005b80 <USBD_Init>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e68:	f7f9 fd5a 	bl	8000920 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006e6c:	490f      	ldr	r1, [pc, #60]	; (8006eac <MX_USB_DEVICE_Init+0x58>)
 8006e6e:	480e      	ldr	r0, [pc, #56]	; (8006ea8 <MX_USB_DEVICE_Init+0x54>)
 8006e70:	f7fe feb6 	bl	8005be0 <USBD_RegisterClass>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e7a:	f7f9 fd51 	bl	8000920 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006e7e:	490c      	ldr	r1, [pc, #48]	; (8006eb0 <MX_USB_DEVICE_Init+0x5c>)
 8006e80:	4809      	ldr	r0, [pc, #36]	; (8006ea8 <MX_USB_DEVICE_Init+0x54>)
 8006e82:	f7fe fe07 	bl	8005a94 <USBD_CDC_RegisterInterface>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e8c:	f7f9 fd48 	bl	8000920 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e90:	4805      	ldr	r0, [pc, #20]	; (8006ea8 <MX_USB_DEVICE_Init+0x54>)
 8006e92:	f7fe fecc 	bl	8005c2e <USBD_Start>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e9c:	f7f9 fd40 	bl	8000920 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006ea0:	bf00      	nop
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	20000130 	.word	0x20000130
 8006ea8:	20000298 	.word	0x20000298
 8006eac:	20000018 	.word	0x20000018
 8006eb0:	2000011c 	.word	0x2000011c

08006eb4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006eb8:	2200      	movs	r2, #0
 8006eba:	4905      	ldr	r1, [pc, #20]	; (8006ed0 <CDC_Init_FS+0x1c>)
 8006ebc:	4805      	ldr	r0, [pc, #20]	; (8006ed4 <CDC_Init_FS+0x20>)
 8006ebe:	f7fe fdfe 	bl	8005abe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006ec2:	4905      	ldr	r1, [pc, #20]	; (8006ed8 <CDC_Init_FS+0x24>)
 8006ec4:	4803      	ldr	r0, [pc, #12]	; (8006ed4 <CDC_Init_FS+0x20>)
 8006ec6:	f7fe fe18 	bl	8005afa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006eca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	20000d68 	.word	0x20000d68
 8006ed4:	20000298 	.word	0x20000298
 8006ed8:	20000568 	.word	0x20000568

08006edc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006ee0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	6039      	str	r1, [r7, #0]
 8006ef6:	71fb      	strb	r3, [r7, #7]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006efc:	79fb      	ldrb	r3, [r7, #7]
 8006efe:	2b23      	cmp	r3, #35	; 0x23
 8006f00:	d84a      	bhi.n	8006f98 <CDC_Control_FS+0xac>
 8006f02:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <CDC_Control_FS+0x1c>)
 8006f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f08:	08006f99 	.word	0x08006f99
 8006f0c:	08006f99 	.word	0x08006f99
 8006f10:	08006f99 	.word	0x08006f99
 8006f14:	08006f99 	.word	0x08006f99
 8006f18:	08006f99 	.word	0x08006f99
 8006f1c:	08006f99 	.word	0x08006f99
 8006f20:	08006f99 	.word	0x08006f99
 8006f24:	08006f99 	.word	0x08006f99
 8006f28:	08006f99 	.word	0x08006f99
 8006f2c:	08006f99 	.word	0x08006f99
 8006f30:	08006f99 	.word	0x08006f99
 8006f34:	08006f99 	.word	0x08006f99
 8006f38:	08006f99 	.word	0x08006f99
 8006f3c:	08006f99 	.word	0x08006f99
 8006f40:	08006f99 	.word	0x08006f99
 8006f44:	08006f99 	.word	0x08006f99
 8006f48:	08006f99 	.word	0x08006f99
 8006f4c:	08006f99 	.word	0x08006f99
 8006f50:	08006f99 	.word	0x08006f99
 8006f54:	08006f99 	.word	0x08006f99
 8006f58:	08006f99 	.word	0x08006f99
 8006f5c:	08006f99 	.word	0x08006f99
 8006f60:	08006f99 	.word	0x08006f99
 8006f64:	08006f99 	.word	0x08006f99
 8006f68:	08006f99 	.word	0x08006f99
 8006f6c:	08006f99 	.word	0x08006f99
 8006f70:	08006f99 	.word	0x08006f99
 8006f74:	08006f99 	.word	0x08006f99
 8006f78:	08006f99 	.word	0x08006f99
 8006f7c:	08006f99 	.word	0x08006f99
 8006f80:	08006f99 	.word	0x08006f99
 8006f84:	08006f99 	.word	0x08006f99
 8006f88:	08006f99 	.word	0x08006f99
 8006f8c:	08006f99 	.word	0x08006f99
 8006f90:	08006f99 	.word	0x08006f99
 8006f94:	08006f99 	.word	0x08006f99
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f98:	bf00      	nop
  }

  return (USBD_OK);
 8006f9a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006fb2:	6879      	ldr	r1, [r7, #4]
 8006fb4:	4805      	ldr	r0, [pc, #20]	; (8006fcc <CDC_Receive_FS+0x24>)
 8006fb6:	f7fe fda0 	bl	8005afa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006fba:	4804      	ldr	r0, [pc, #16]	; (8006fcc <CDC_Receive_FS+0x24>)
 8006fbc:	f7fe fdb6 	bl	8005b2c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006fc0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20000298 	.word	0x20000298

08006fd0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b087      	sub	sp, #28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006fe2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	371c      	adds	r7, #28
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
	...

08006ff4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	6039      	str	r1, [r7, #0]
 8006ffe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	2212      	movs	r2, #18
 8007004:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007006:	4b03      	ldr	r3, [pc, #12]	; (8007014 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007008:	4618      	mov	r0, r3
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	2000014c 	.word	0x2000014c

08007018 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	4603      	mov	r3, r0
 8007020:	6039      	str	r1, [r7, #0]
 8007022:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	2204      	movs	r2, #4
 8007028:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800702a:	4b03      	ldr	r3, [pc, #12]	; (8007038 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800702c:	4618      	mov	r0, r3
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr
 8007038:	20000160 	.word	0x20000160

0800703c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	4603      	mov	r3, r0
 8007044:	6039      	str	r1, [r7, #0]
 8007046:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007048:	79fb      	ldrb	r3, [r7, #7]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d105      	bne.n	800705a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	4907      	ldr	r1, [pc, #28]	; (8007070 <USBD_FS_ProductStrDescriptor+0x34>)
 8007052:	4808      	ldr	r0, [pc, #32]	; (8007074 <USBD_FS_ProductStrDescriptor+0x38>)
 8007054:	f7ff fe1d 	bl	8006c92 <USBD_GetString>
 8007058:	e004      	b.n	8007064 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	4904      	ldr	r1, [pc, #16]	; (8007070 <USBD_FS_ProductStrDescriptor+0x34>)
 800705e:	4805      	ldr	r0, [pc, #20]	; (8007074 <USBD_FS_ProductStrDescriptor+0x38>)
 8007060:	f7ff fe17 	bl	8006c92 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007064:	4b02      	ldr	r3, [pc, #8]	; (8007070 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007066:	4618      	mov	r0, r3
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	20001568 	.word	0x20001568
 8007074:	080078c8 	.word	0x080078c8

08007078 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	4603      	mov	r3, r0
 8007080:	6039      	str	r1, [r7, #0]
 8007082:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007084:	683a      	ldr	r2, [r7, #0]
 8007086:	4904      	ldr	r1, [pc, #16]	; (8007098 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007088:	4804      	ldr	r0, [pc, #16]	; (800709c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800708a:	f7ff fe02 	bl	8006c92 <USBD_GetString>
  return USBD_StrDesc;
 800708e:	4b02      	ldr	r3, [pc, #8]	; (8007098 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007090:	4618      	mov	r0, r3
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	20001568 	.word	0x20001568
 800709c:	080078e0 	.word	0x080078e0

080070a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	4603      	mov	r3, r0
 80070a8:	6039      	str	r1, [r7, #0]
 80070aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	221a      	movs	r2, #26
 80070b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80070b2:	f000 f843 	bl	800713c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80070b6:	4b02      	ldr	r3, [pc, #8]	; (80070c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	20000164 	.word	0x20000164

080070c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	4603      	mov	r3, r0
 80070cc:	6039      	str	r1, [r7, #0]
 80070ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80070d0:	79fb      	ldrb	r3, [r7, #7]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d105      	bne.n	80070e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	4907      	ldr	r1, [pc, #28]	; (80070f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80070da:	4808      	ldr	r0, [pc, #32]	; (80070fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80070dc:	f7ff fdd9 	bl	8006c92 <USBD_GetString>
 80070e0:	e004      	b.n	80070ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	4904      	ldr	r1, [pc, #16]	; (80070f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80070e6:	4805      	ldr	r0, [pc, #20]	; (80070fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80070e8:	f7ff fdd3 	bl	8006c92 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070ec:	4b02      	ldr	r3, [pc, #8]	; (80070f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	20001568 	.word	0x20001568
 80070fc:	080078f4 	.word	0x080078f4

08007100 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	4603      	mov	r3, r0
 8007108:	6039      	str	r1, [r7, #0]
 800710a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800710c:	79fb      	ldrb	r3, [r7, #7]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d105      	bne.n	800711e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	4907      	ldr	r1, [pc, #28]	; (8007134 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007116:	4808      	ldr	r0, [pc, #32]	; (8007138 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007118:	f7ff fdbb 	bl	8006c92 <USBD_GetString>
 800711c:	e004      	b.n	8007128 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	4904      	ldr	r1, [pc, #16]	; (8007134 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007122:	4805      	ldr	r0, [pc, #20]	; (8007138 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007124:	f7ff fdb5 	bl	8006c92 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007128:	4b02      	ldr	r3, [pc, #8]	; (8007134 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800712a:	4618      	mov	r0, r3
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	20001568 	.word	0x20001568
 8007138:	08007900 	.word	0x08007900

0800713c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007142:	4b0f      	ldr	r3, [pc, #60]	; (8007180 <Get_SerialNum+0x44>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007148:	4b0e      	ldr	r3, [pc, #56]	; (8007184 <Get_SerialNum+0x48>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800714e:	4b0e      	ldr	r3, [pc, #56]	; (8007188 <Get_SerialNum+0x4c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4413      	add	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d009      	beq.n	8007176 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007162:	2208      	movs	r2, #8
 8007164:	4909      	ldr	r1, [pc, #36]	; (800718c <Get_SerialNum+0x50>)
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f000 f814 	bl	8007194 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800716c:	2204      	movs	r2, #4
 800716e:	4908      	ldr	r1, [pc, #32]	; (8007190 <Get_SerialNum+0x54>)
 8007170:	68b8      	ldr	r0, [r7, #8]
 8007172:	f000 f80f 	bl	8007194 <IntToUnicode>
  }
}
 8007176:	bf00      	nop
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	1fff7a10 	.word	0x1fff7a10
 8007184:	1fff7a14 	.word	0x1fff7a14
 8007188:	1fff7a18 	.word	0x1fff7a18
 800718c:	20000166 	.word	0x20000166
 8007190:	20000176 	.word	0x20000176

08007194 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007194:	b480      	push	{r7}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	4613      	mov	r3, r2
 80071a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80071a2:	2300      	movs	r3, #0
 80071a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80071a6:	2300      	movs	r3, #0
 80071a8:	75fb      	strb	r3, [r7, #23]
 80071aa:	e027      	b.n	80071fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	0f1b      	lsrs	r3, r3, #28
 80071b0:	2b09      	cmp	r3, #9
 80071b2:	d80b      	bhi.n	80071cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	0f1b      	lsrs	r3, r3, #28
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	7dfb      	ldrb	r3, [r7, #23]
 80071bc:	005b      	lsls	r3, r3, #1
 80071be:	4619      	mov	r1, r3
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	440b      	add	r3, r1
 80071c4:	3230      	adds	r2, #48	; 0x30
 80071c6:	b2d2      	uxtb	r2, r2
 80071c8:	701a      	strb	r2, [r3, #0]
 80071ca:	e00a      	b.n	80071e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	0f1b      	lsrs	r3, r3, #28
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	4619      	mov	r1, r3
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	440b      	add	r3, r1
 80071dc:	3237      	adds	r2, #55	; 0x37
 80071de:	b2d2      	uxtb	r2, r2
 80071e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	011b      	lsls	r3, r3, #4
 80071e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80071e8:	7dfb      	ldrb	r3, [r7, #23]
 80071ea:	005b      	lsls	r3, r3, #1
 80071ec:	3301      	adds	r3, #1
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	4413      	add	r3, r2
 80071f2:	2200      	movs	r2, #0
 80071f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80071f6:	7dfb      	ldrb	r3, [r7, #23]
 80071f8:	3301      	adds	r3, #1
 80071fa:	75fb      	strb	r3, [r7, #23]
 80071fc:	7dfa      	ldrb	r2, [r7, #23]
 80071fe:	79fb      	ldrb	r3, [r7, #7]
 8007200:	429a      	cmp	r2, r3
 8007202:	d3d3      	bcc.n	80071ac <IntToUnicode+0x18>
  }
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop
 8007208:	371c      	adds	r7, #28
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
	...

08007214 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b08a      	sub	sp, #40	; 0x28
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800721c:	f107 0314 	add.w	r3, r7, #20
 8007220:	2200      	movs	r2, #0
 8007222:	601a      	str	r2, [r3, #0]
 8007224:	605a      	str	r2, [r3, #4]
 8007226:	609a      	str	r2, [r3, #8]
 8007228:	60da      	str	r2, [r3, #12]
 800722a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007234:	d147      	bne.n	80072c6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007236:	2300      	movs	r3, #0
 8007238:	613b      	str	r3, [r7, #16]
 800723a:	4b25      	ldr	r3, [pc, #148]	; (80072d0 <HAL_PCD_MspInit+0xbc>)
 800723c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723e:	4a24      	ldr	r2, [pc, #144]	; (80072d0 <HAL_PCD_MspInit+0xbc>)
 8007240:	f043 0301 	orr.w	r3, r3, #1
 8007244:	6313      	str	r3, [r2, #48]	; 0x30
 8007246:	4b22      	ldr	r3, [pc, #136]	; (80072d0 <HAL_PCD_MspInit+0xbc>)
 8007248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	613b      	str	r3, [r7, #16]
 8007250:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007252:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007258:	2300      	movs	r3, #0
 800725a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800725c:	2300      	movs	r3, #0
 800725e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007260:	f107 0314 	add.w	r3, r7, #20
 8007264:	4619      	mov	r1, r3
 8007266:	481b      	ldr	r0, [pc, #108]	; (80072d4 <HAL_PCD_MspInit+0xc0>)
 8007268:	f7f9 feb0 	bl	8000fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800726c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007272:	2302      	movs	r3, #2
 8007274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007276:	2300      	movs	r3, #0
 8007278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800727a:	2300      	movs	r3, #0
 800727c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800727e:	230a      	movs	r3, #10
 8007280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007282:	f107 0314 	add.w	r3, r7, #20
 8007286:	4619      	mov	r1, r3
 8007288:	4812      	ldr	r0, [pc, #72]	; (80072d4 <HAL_PCD_MspInit+0xc0>)
 800728a:	f7f9 fe9f 	bl	8000fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800728e:	4b10      	ldr	r3, [pc, #64]	; (80072d0 <HAL_PCD_MspInit+0xbc>)
 8007290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007292:	4a0f      	ldr	r2, [pc, #60]	; (80072d0 <HAL_PCD_MspInit+0xbc>)
 8007294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007298:	6353      	str	r3, [r2, #52]	; 0x34
 800729a:	2300      	movs	r3, #0
 800729c:	60fb      	str	r3, [r7, #12]
 800729e:	4b0c      	ldr	r3, [pc, #48]	; (80072d0 <HAL_PCD_MspInit+0xbc>)
 80072a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a2:	4a0b      	ldr	r2, [pc, #44]	; (80072d0 <HAL_PCD_MspInit+0xbc>)
 80072a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072a8:	6453      	str	r3, [r2, #68]	; 0x44
 80072aa:	4b09      	ldr	r3, [pc, #36]	; (80072d0 <HAL_PCD_MspInit+0xbc>)
 80072ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072b2:	60fb      	str	r3, [r7, #12]
 80072b4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80072b6:	2200      	movs	r2, #0
 80072b8:	2100      	movs	r1, #0
 80072ba:	2043      	movs	r0, #67	; 0x43
 80072bc:	f7f9 fe4f 	bl	8000f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80072c0:	2043      	movs	r0, #67	; 0x43
 80072c2:	f7f9 fe68 	bl	8000f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80072c6:	bf00      	nop
 80072c8:	3728      	adds	r7, #40	; 0x28
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	40023800 	.word	0x40023800
 80072d4:	40020000 	.word	0x40020000

080072d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80072ec:	4619      	mov	r1, r3
 80072ee:	4610      	mov	r0, r2
 80072f0:	f7fe fce8 	bl	8005cc4 <USBD_LL_SetupStage>
}
 80072f4:	bf00      	nop
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	460b      	mov	r3, r1
 8007306:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800730e:	78fa      	ldrb	r2, [r7, #3]
 8007310:	6879      	ldr	r1, [r7, #4]
 8007312:	4613      	mov	r3, r2
 8007314:	00db      	lsls	r3, r3, #3
 8007316:	1a9b      	subs	r3, r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	440b      	add	r3, r1
 800731c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	78fb      	ldrb	r3, [r7, #3]
 8007324:	4619      	mov	r1, r3
 8007326:	f7fe fd22 	bl	8005d6e <USBD_LL_DataOutStage>
}
 800732a:	bf00      	nop
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b082      	sub	sp, #8
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	460b      	mov	r3, r1
 800733c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007344:	78fa      	ldrb	r2, [r7, #3]
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	4613      	mov	r3, r2
 800734a:	00db      	lsls	r3, r3, #3
 800734c:	1a9b      	subs	r3, r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	440b      	add	r3, r1
 8007352:	3348      	adds	r3, #72	; 0x48
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	78fb      	ldrb	r3, [r7, #3]
 8007358:	4619      	mov	r1, r3
 800735a:	f7fe fd6b 	bl	8005e34 <USBD_LL_DataInStage>
}
 800735e:	bf00      	nop
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b082      	sub	sp, #8
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007374:	4618      	mov	r0, r3
 8007376:	f7fe fe7f 	bl	8006078 <USBD_LL_SOF>
}
 800737a:	bf00      	nop
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b084      	sub	sp, #16
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800738a:	2301      	movs	r3, #1
 800738c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d102      	bne.n	800739c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007396:	2300      	movs	r3, #0
 8007398:	73fb      	strb	r3, [r7, #15]
 800739a:	e008      	b.n	80073ae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d102      	bne.n	80073aa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80073a4:	2301      	movs	r3, #1
 80073a6:	73fb      	strb	r3, [r7, #15]
 80073a8:	e001      	b.n	80073ae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80073aa:	f7f9 fab9 	bl	8000920 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073b4:	7bfa      	ldrb	r2, [r7, #15]
 80073b6:	4611      	mov	r1, r2
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fe fe1f 	bl	8005ffc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fe fdcb 	bl	8005f60 <USBD_LL_Reset>
}
 80073ca:	bf00      	nop
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
	...

080073d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fe fe1a 	bl	800601c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	6812      	ldr	r2, [r2, #0]
 80073f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073fa:	f043 0301 	orr.w	r3, r3, #1
 80073fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a1b      	ldr	r3, [r3, #32]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d005      	beq.n	8007414 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007408:	4b04      	ldr	r3, [pc, #16]	; (800741c <HAL_PCD_SuspendCallback+0x48>)
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	4a03      	ldr	r2, [pc, #12]	; (800741c <HAL_PCD_SuspendCallback+0x48>)
 800740e:	f043 0306 	orr.w	r3, r3, #6
 8007412:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007414:	bf00      	nop
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	e000ed00 	.word	0xe000ed00

08007420 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800742e:	4618      	mov	r0, r3
 8007430:	f7fe fe0a 	bl	8006048 <USBD_LL_Resume>
}
 8007434:	bf00      	nop
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	460b      	mov	r3, r1
 8007446:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800744e:	78fa      	ldrb	r2, [r7, #3]
 8007450:	4611      	mov	r1, r2
 8007452:	4618      	mov	r0, r3
 8007454:	f7fe fe58 	bl	8006108 <USBD_LL_IsoOUTIncomplete>
}
 8007458:	bf00      	nop
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	460b      	mov	r3, r1
 800746a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007472:	78fa      	ldrb	r2, [r7, #3]
 8007474:	4611      	mov	r1, r2
 8007476:	4618      	mov	r0, r3
 8007478:	f7fe fe20 	bl	80060bc <USBD_LL_IsoINIncomplete>
}
 800747c:	bf00      	nop
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007492:	4618      	mov	r0, r3
 8007494:	f7fe fe5e 	bl	8006154 <USBD_LL_DevConnected>
}
 8007498:	bf00      	nop
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fe fe5b 	bl	800616a <USBD_LL_DevDisconnected>
}
 80074b4:	bf00      	nop
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d13c      	bne.n	8007546 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80074cc:	4a20      	ldr	r2, [pc, #128]	; (8007550 <USBD_LL_Init+0x94>)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a1e      	ldr	r2, [pc, #120]	; (8007550 <USBD_LL_Init+0x94>)
 80074d8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80074dc:	4b1c      	ldr	r3, [pc, #112]	; (8007550 <USBD_LL_Init+0x94>)
 80074de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80074e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80074e4:	4b1a      	ldr	r3, [pc, #104]	; (8007550 <USBD_LL_Init+0x94>)
 80074e6:	2204      	movs	r2, #4
 80074e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80074ea:	4b19      	ldr	r3, [pc, #100]	; (8007550 <USBD_LL_Init+0x94>)
 80074ec:	2202      	movs	r2, #2
 80074ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80074f0:	4b17      	ldr	r3, [pc, #92]	; (8007550 <USBD_LL_Init+0x94>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80074f6:	4b16      	ldr	r3, [pc, #88]	; (8007550 <USBD_LL_Init+0x94>)
 80074f8:	2202      	movs	r2, #2
 80074fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80074fc:	4b14      	ldr	r3, [pc, #80]	; (8007550 <USBD_LL_Init+0x94>)
 80074fe:	2200      	movs	r2, #0
 8007500:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007502:	4b13      	ldr	r3, [pc, #76]	; (8007550 <USBD_LL_Init+0x94>)
 8007504:	2200      	movs	r2, #0
 8007506:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007508:	4b11      	ldr	r3, [pc, #68]	; (8007550 <USBD_LL_Init+0x94>)
 800750a:	2200      	movs	r2, #0
 800750c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800750e:	4b10      	ldr	r3, [pc, #64]	; (8007550 <USBD_LL_Init+0x94>)
 8007510:	2201      	movs	r2, #1
 8007512:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007514:	4b0e      	ldr	r3, [pc, #56]	; (8007550 <USBD_LL_Init+0x94>)
 8007516:	2200      	movs	r2, #0
 8007518:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800751a:	480d      	ldr	r0, [pc, #52]	; (8007550 <USBD_LL_Init+0x94>)
 800751c:	f7fa fcf0 	bl	8001f00 <HAL_PCD_Init>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007526:	f7f9 f9fb 	bl	8000920 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800752a:	2180      	movs	r1, #128	; 0x80
 800752c:	4808      	ldr	r0, [pc, #32]	; (8007550 <USBD_LL_Init+0x94>)
 800752e:	f7fb fe4e 	bl	80031ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007532:	2240      	movs	r2, #64	; 0x40
 8007534:	2100      	movs	r1, #0
 8007536:	4806      	ldr	r0, [pc, #24]	; (8007550 <USBD_LL_Init+0x94>)
 8007538:	f7fb fe02 	bl	8003140 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800753c:	2280      	movs	r2, #128	; 0x80
 800753e:	2101      	movs	r1, #1
 8007540:	4803      	ldr	r0, [pc, #12]	; (8007550 <USBD_LL_Init+0x94>)
 8007542:	f7fb fdfd 	bl	8003140 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	20001768 	.word	0x20001768

08007554 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800755c:	2300      	movs	r3, #0
 800755e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007560:	2300      	movs	r3, #0
 8007562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800756a:	4618      	mov	r0, r3
 800756c:	f7fa fde5 	bl	800213a <HAL_PCD_Start>
 8007570:	4603      	mov	r3, r0
 8007572:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	4618      	mov	r0, r3
 8007578:	f000 f942 	bl	8007800 <USBD_Get_USB_Status>
 800757c:	4603      	mov	r3, r0
 800757e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007580:	7bbb      	ldrb	r3, [r7, #14]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	4608      	mov	r0, r1
 8007594:	4611      	mov	r1, r2
 8007596:	461a      	mov	r2, r3
 8007598:	4603      	mov	r3, r0
 800759a:	70fb      	strb	r3, [r7, #3]
 800759c:	460b      	mov	r3, r1
 800759e:	70bb      	strb	r3, [r7, #2]
 80075a0:	4613      	mov	r3, r2
 80075a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80075b2:	78bb      	ldrb	r3, [r7, #2]
 80075b4:	883a      	ldrh	r2, [r7, #0]
 80075b6:	78f9      	ldrb	r1, [r7, #3]
 80075b8:	f7fb f9c9 	bl	800294e <HAL_PCD_EP_Open>
 80075bc:	4603      	mov	r3, r0
 80075be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f000 f91c 	bl	8007800 <USBD_Get_USB_Status>
 80075c8:	4603      	mov	r3, r0
 80075ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	460b      	mov	r3, r1
 80075e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075f0:	78fa      	ldrb	r2, [r7, #3]
 80075f2:	4611      	mov	r1, r2
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fb fa12 	bl	8002a1e <HAL_PCD_EP_Close>
 80075fa:	4603      	mov	r3, r0
 80075fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
 8007600:	4618      	mov	r0, r3
 8007602:	f000 f8fd 	bl	8007800 <USBD_Get_USB_Status>
 8007606:	4603      	mov	r3, r0
 8007608:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800760a:	7bbb      	ldrb	r3, [r7, #14]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	460b      	mov	r3, r1
 800761e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007620:	2300      	movs	r3, #0
 8007622:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007624:	2300      	movs	r3, #0
 8007626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800762e:	78fa      	ldrb	r2, [r7, #3]
 8007630:	4611      	mov	r1, r2
 8007632:	4618      	mov	r0, r3
 8007634:	f7fb faea 	bl	8002c0c <HAL_PCD_EP_SetStall>
 8007638:	4603      	mov	r3, r0
 800763a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800763c:	7bfb      	ldrb	r3, [r7, #15]
 800763e:	4618      	mov	r0, r3
 8007640:	f000 f8de 	bl	8007800 <USBD_Get_USB_Status>
 8007644:	4603      	mov	r3, r0
 8007646:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007648:	7bbb      	ldrb	r3, [r7, #14]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b084      	sub	sp, #16
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	460b      	mov	r3, r1
 800765c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007662:	2300      	movs	r3, #0
 8007664:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800766c:	78fa      	ldrb	r2, [r7, #3]
 800766e:	4611      	mov	r1, r2
 8007670:	4618      	mov	r0, r3
 8007672:	f7fb fb2f 	bl	8002cd4 <HAL_PCD_EP_ClrStall>
 8007676:	4603      	mov	r3, r0
 8007678:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800767a:	7bfb      	ldrb	r3, [r7, #15]
 800767c:	4618      	mov	r0, r3
 800767e:	f000 f8bf 	bl	8007800 <USBD_Get_USB_Status>
 8007682:	4603      	mov	r3, r0
 8007684:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007686:	7bbb      	ldrb	r3, [r7, #14]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	460b      	mov	r3, r1
 800769a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80076a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	da0b      	bge.n	80076c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80076ac:	78fb      	ldrb	r3, [r7, #3]
 80076ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076b2:	68f9      	ldr	r1, [r7, #12]
 80076b4:	4613      	mov	r3, r2
 80076b6:	00db      	lsls	r3, r3, #3
 80076b8:	1a9b      	subs	r3, r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	440b      	add	r3, r1
 80076be:	333e      	adds	r3, #62	; 0x3e
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	e00b      	b.n	80076dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80076c4:	78fb      	ldrb	r3, [r7, #3]
 80076c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076ca:	68f9      	ldr	r1, [r7, #12]
 80076cc:	4613      	mov	r3, r2
 80076ce:	00db      	lsls	r3, r3, #3
 80076d0:	1a9b      	subs	r3, r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	440b      	add	r3, r1
 80076d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80076da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007702:	78fa      	ldrb	r2, [r7, #3]
 8007704:	4611      	mov	r1, r2
 8007706:	4618      	mov	r0, r3
 8007708:	f7fb f8fc 	bl	8002904 <HAL_PCD_SetAddress>
 800770c:	4603      	mov	r3, r0
 800770e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007710:	7bfb      	ldrb	r3, [r7, #15]
 8007712:	4618      	mov	r0, r3
 8007714:	f000 f874 	bl	8007800 <USBD_Get_USB_Status>
 8007718:	4603      	mov	r3, r0
 800771a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800771c:	7bbb      	ldrb	r3, [r7, #14]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b086      	sub	sp, #24
 800772a:	af00      	add	r7, sp, #0
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	603b      	str	r3, [r7, #0]
 8007732:	460b      	mov	r3, r1
 8007734:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007744:	7af9      	ldrb	r1, [r7, #11]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	f7fb fa15 	bl	8002b78 <HAL_PCD_EP_Transmit>
 800774e:	4603      	mov	r3, r0
 8007750:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007752:	7dfb      	ldrb	r3, [r7, #23]
 8007754:	4618      	mov	r0, r3
 8007756:	f000 f853 	bl	8007800 <USBD_Get_USB_Status>
 800775a:	4603      	mov	r3, r0
 800775c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800775e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007760:	4618      	mov	r0, r3
 8007762:	3718      	adds	r7, #24
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b086      	sub	sp, #24
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	607a      	str	r2, [r7, #4]
 8007772:	603b      	str	r3, [r7, #0]
 8007774:	460b      	mov	r3, r1
 8007776:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800777c:	2300      	movs	r3, #0
 800777e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007786:	7af9      	ldrb	r1, [r7, #11]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	f7fb f991 	bl	8002ab2 <HAL_PCD_EP_Receive>
 8007790:	4603      	mov	r3, r0
 8007792:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007794:	7dfb      	ldrb	r3, [r7, #23]
 8007796:	4618      	mov	r0, r3
 8007798:	f000 f832 	bl	8007800 <USBD_Get_USB_Status>
 800779c:	4603      	mov	r3, r0
 800779e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80077a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b082      	sub	sp, #8
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	460b      	mov	r3, r1
 80077b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077bc:	78fa      	ldrb	r2, [r7, #3]
 80077be:	4611      	mov	r1, r2
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7fb f9c1 	bl	8002b48 <HAL_PCD_EP_GetRxCount>
 80077c6:	4603      	mov	r3, r0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80077d8:	4b03      	ldr	r3, [pc, #12]	; (80077e8 <USBD_static_malloc+0x18>)
}
 80077da:	4618      	mov	r0, r3
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	20001b70 	.word	0x20001b70

080077ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]

}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	4603      	mov	r3, r0
 8007808:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800780a:	2300      	movs	r3, #0
 800780c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800780e:	79fb      	ldrb	r3, [r7, #7]
 8007810:	2b03      	cmp	r3, #3
 8007812:	d817      	bhi.n	8007844 <USBD_Get_USB_Status+0x44>
 8007814:	a201      	add	r2, pc, #4	; (adr r2, 800781c <USBD_Get_USB_Status+0x1c>)
 8007816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781a:	bf00      	nop
 800781c:	0800782d 	.word	0x0800782d
 8007820:	08007833 	.word	0x08007833
 8007824:	08007839 	.word	0x08007839
 8007828:	0800783f 	.word	0x0800783f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800782c:	2300      	movs	r3, #0
 800782e:	73fb      	strb	r3, [r7, #15]
    break;
 8007830:	e00b      	b.n	800784a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007832:	2303      	movs	r3, #3
 8007834:	73fb      	strb	r3, [r7, #15]
    break;
 8007836:	e008      	b.n	800784a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007838:	2301      	movs	r3, #1
 800783a:	73fb      	strb	r3, [r7, #15]
    break;
 800783c:	e005      	b.n	800784a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800783e:	2303      	movs	r3, #3
 8007840:	73fb      	strb	r3, [r7, #15]
    break;
 8007842:	e002      	b.n	800784a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007844:	2303      	movs	r3, #3
 8007846:	73fb      	strb	r3, [r7, #15]
    break;
 8007848:	bf00      	nop
  }
  return usb_status;
 800784a:	7bfb      	ldrb	r3, [r7, #15]
}
 800784c:	4618      	mov	r0, r3
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <memset>:
 8007858:	4402      	add	r2, r0
 800785a:	4603      	mov	r3, r0
 800785c:	4293      	cmp	r3, r2
 800785e:	d100      	bne.n	8007862 <memset+0xa>
 8007860:	4770      	bx	lr
 8007862:	f803 1b01 	strb.w	r1, [r3], #1
 8007866:	e7f9      	b.n	800785c <memset+0x4>

08007868 <__libc_init_array>:
 8007868:	b570      	push	{r4, r5, r6, lr}
 800786a:	4d0d      	ldr	r5, [pc, #52]	; (80078a0 <__libc_init_array+0x38>)
 800786c:	4c0d      	ldr	r4, [pc, #52]	; (80078a4 <__libc_init_array+0x3c>)
 800786e:	1b64      	subs	r4, r4, r5
 8007870:	10a4      	asrs	r4, r4, #2
 8007872:	2600      	movs	r6, #0
 8007874:	42a6      	cmp	r6, r4
 8007876:	d109      	bne.n	800788c <__libc_init_array+0x24>
 8007878:	4d0b      	ldr	r5, [pc, #44]	; (80078a8 <__libc_init_array+0x40>)
 800787a:	4c0c      	ldr	r4, [pc, #48]	; (80078ac <__libc_init_array+0x44>)
 800787c:	f000 f818 	bl	80078b0 <_init>
 8007880:	1b64      	subs	r4, r4, r5
 8007882:	10a4      	asrs	r4, r4, #2
 8007884:	2600      	movs	r6, #0
 8007886:	42a6      	cmp	r6, r4
 8007888:	d105      	bne.n	8007896 <__libc_init_array+0x2e>
 800788a:	bd70      	pop	{r4, r5, r6, pc}
 800788c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007890:	4798      	blx	r3
 8007892:	3601      	adds	r6, #1
 8007894:	e7ee      	b.n	8007874 <__libc_init_array+0xc>
 8007896:	f855 3b04 	ldr.w	r3, [r5], #4
 800789a:	4798      	blx	r3
 800789c:	3601      	adds	r6, #1
 800789e:	e7f2      	b.n	8007886 <__libc_init_array+0x1e>
 80078a0:	08007930 	.word	0x08007930
 80078a4:	08007930 	.word	0x08007930
 80078a8:	08007930 	.word	0x08007930
 80078ac:	08007934 	.word	0x08007934

080078b0 <_init>:
 80078b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b2:	bf00      	nop
 80078b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078b6:	bc08      	pop	{r3}
 80078b8:	469e      	mov	lr, r3
 80078ba:	4770      	bx	lr

080078bc <_fini>:
 80078bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078be:	bf00      	nop
 80078c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078c2:	bc08      	pop	{r3}
 80078c4:	469e      	mov	lr, r3
 80078c6:	4770      	bx	lr
