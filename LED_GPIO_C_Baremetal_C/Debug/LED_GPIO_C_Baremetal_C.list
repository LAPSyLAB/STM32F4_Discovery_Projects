
LED_GPIO_C_Baremetal_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800787c  0800787c  0001787c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078dc  080078dc  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  080078dc  080078dc  000178dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078e4  080078e4  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078e4  080078e4  000178e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078e8  080078e8  000178e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  080078ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          00001c10  20000180  20000180  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001d90  20001d90  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019aa0  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000392e  00000000  00000000  00039c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  0003d580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001030  00000000  00000000  0003e710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002450b  00000000  00000000  0003f740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017b3f  00000000  00000000  00063c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca654  00000000  00000000  0007b78a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00145dde  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000489c  00000000  00000000  00145e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007864 	.word	0x08007864

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	08007864 	.word	0x08007864

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fbd7 	bl	8000c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f82b 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f927 	bl	8000720 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d2:	f000 f891 	bl	80005f8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d6:	f000 f8bd 	bl	8000654 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004da:	f000 f8eb 	bl	80006b4 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004de:	f006 fc93 	bl	8006e08 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  RCC->AHB1ENR |= 0x08;                 // Enable clock for GPIOD
 80004e2:	4b0e      	ldr	r3, [pc, #56]	; (800051c <main+0x5c>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a0d      	ldr	r2, [pc, #52]	; (800051c <main+0x5c>)
 80004e8:	f043 0308 	orr.w	r3, r3, #8
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOD->MODER |= 0x01000000;        // MODE Register: bit 12 == out
 80004ee:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <main+0x60>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a0b      	ldr	r2, [pc, #44]	; (8000520 <main+0x60>)
 80004f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004f8:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    GPIOD->ODR ^= 0x1000;            // Toggle PD12
 80004fa:	4b09      	ldr	r3, [pc, #36]	; (8000520 <main+0x60>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a08      	ldr	r2, [pc, #32]	; (8000520 <main+0x60>)
 8000500:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000504:	6153      	str	r3, [r2, #20]

	/* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    for (int i=0; i<0x1000000; i++) {};    // waste some time
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
 800050a:	e002      	b.n	8000512 <main+0x52>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	3301      	adds	r3, #1
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000518:	dbf8      	blt.n	800050c <main+0x4c>
	    GPIOD->ODR ^= 0x1000;            // Toggle PD12
 800051a:	e7ee      	b.n	80004fa <main+0x3a>
 800051c:	40023800 	.word	0x40023800
 8000520:	40020c00 	.word	0x40020c00

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f007 f98e 	bl	8007854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a27      	ldr	r2, [pc, #156]	; (80005f0 <SystemClock_Config+0xcc>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b25      	ldr	r3, [pc, #148]	; (80005f0 <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a21      	ldr	r2, [pc, #132]	; (80005f4 <SystemClock_Config+0xd0>)
 800056e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000580:	2301      	movs	r3, #1
 8000582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000594:	2308      	movs	r3, #8
 8000596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000598:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800059c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a2:	2307      	movs	r3, #7
 80005a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 fe2a 	bl	8003204 <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005b6:	f000 f9b1 	bl	800091c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2302      	movs	r3, #2
 80005c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	2105      	movs	r1, #5
 80005d8:	4618      	mov	r0, r3
 80005da:	f003 f88b 	bl	80036f4 <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005e4:	f000 f99a 	bl	800091c <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3750      	adds	r7, #80	; 0x50
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_I2C1_Init+0x50>)
 80005fe:	4a13      	ldr	r2, [pc, #76]	; (800064c <MX_I2C1_Init+0x54>)
 8000600:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_I2C1_Init+0x50>)
 8000604:	4a12      	ldr	r2, [pc, #72]	; (8000650 <MX_I2C1_Init+0x58>)
 8000606:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_I2C1_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_I2C1_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_I2C1_Init+0x50>)
 8000616:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800061a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <MX_I2C1_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_I2C1_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_I2C1_Init+0x50>)
 8000636:	f000 fe7d 	bl	8001334 <HAL_I2C_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000640:	f000 f96c 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200003c0 	.word	0x200003c0
 800064c:	40005400 	.word	0x40005400
 8000650:	000186a0 	.word	0x000186a0

08000654 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <MX_I2S3_Init+0x54>)
 800065a:	4a14      	ldr	r2, [pc, #80]	; (80006ac <MX_I2S3_Init+0x58>)
 800065c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <MX_I2S3_Init+0x54>)
 8000660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000664:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <MX_I2S3_Init+0x54>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_I2S3_Init+0x54>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <MX_I2S3_Init+0x54>)
 8000674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000678:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <MX_I2S3_Init+0x54>)
 800067c:	4a0c      	ldr	r2, [pc, #48]	; (80006b0 <MX_I2S3_Init+0x5c>)
 800067e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_I2S3_Init+0x54>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <MX_I2S3_Init+0x54>)
 8000688:	2200      	movs	r2, #0
 800068a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_I2S3_Init+0x54>)
 800068e:	2200      	movs	r2, #0
 8000690:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_I2S3_Init+0x54>)
 8000694:	f000 ff92 	bl	80015bc <HAL_I2S_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800069e:	f000 f93d 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2000046c 	.word	0x2000046c
 80006ac:	40003c00 	.word	0x40003c00
 80006b0:	00017700 	.word	0x00017700

080006b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b8:	4b17      	ldr	r3, [pc, #92]	; (8000718 <MX_SPI1_Init+0x64>)
 80006ba:	4a18      	ldr	r2, [pc, #96]	; (800071c <MX_SPI1_Init+0x68>)
 80006bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <MX_SPI1_Init+0x64>)
 80006c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_SPI1_Init+0x64>)
 80006e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_SPI1_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_SPI1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_SPI1_Init+0x64>)
 8000700:	220a      	movs	r2, #10
 8000702:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_SPI1_Init+0x64>)
 8000706:	f003 fb1d 	bl	8003d44 <HAL_SPI_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000710:	f000 f904 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000414 	.word	0x20000414
 800071c:	40013000 	.word	0x40013000

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08c      	sub	sp, #48	; 0x30
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
 800073a:	4b72      	ldr	r3, [pc, #456]	; (8000904 <MX_GPIO_Init+0x1e4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a71      	ldr	r2, [pc, #452]	; (8000904 <MX_GPIO_Init+0x1e4>)
 8000740:	f043 0310 	orr.w	r3, r3, #16
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b6f      	ldr	r3, [pc, #444]	; (8000904 <MX_GPIO_Init+0x1e4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0310 	and.w	r3, r3, #16
 800074e:	61bb      	str	r3, [r7, #24]
 8000750:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
 8000756:	4b6b      	ldr	r3, [pc, #428]	; (8000904 <MX_GPIO_Init+0x1e4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a6a      	ldr	r2, [pc, #424]	; (8000904 <MX_GPIO_Init+0x1e4>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b68      	ldr	r3, [pc, #416]	; (8000904 <MX_GPIO_Init+0x1e4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	4b64      	ldr	r3, [pc, #400]	; (8000904 <MX_GPIO_Init+0x1e4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a63      	ldr	r2, [pc, #396]	; (8000904 <MX_GPIO_Init+0x1e4>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b61      	ldr	r3, [pc, #388]	; (8000904 <MX_GPIO_Init+0x1e4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	4b5d      	ldr	r3, [pc, #372]	; (8000904 <MX_GPIO_Init+0x1e4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a5c      	ldr	r2, [pc, #368]	; (8000904 <MX_GPIO_Init+0x1e4>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b5a      	ldr	r3, [pc, #360]	; (8000904 <MX_GPIO_Init+0x1e4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	4b56      	ldr	r3, [pc, #344]	; (8000904 <MX_GPIO_Init+0x1e4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a55      	ldr	r2, [pc, #340]	; (8000904 <MX_GPIO_Init+0x1e4>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b53      	ldr	r3, [pc, #332]	; (8000904 <MX_GPIO_Init+0x1e4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b4f      	ldr	r3, [pc, #316]	; (8000904 <MX_GPIO_Init+0x1e4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a4e      	ldr	r2, [pc, #312]	; (8000904 <MX_GPIO_Init+0x1e4>)
 80007cc:	f043 0308 	orr.w	r3, r3, #8
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b4c      	ldr	r3, [pc, #304]	; (8000904 <MX_GPIO_Init+0x1e4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0308 	and.w	r3, r3, #8
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2108      	movs	r1, #8
 80007e2:	4849      	ldr	r0, [pc, #292]	; (8000908 <MX_GPIO_Init+0x1e8>)
 80007e4:	f000 fd8c 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2101      	movs	r1, #1
 80007ec:	4847      	ldr	r0, [pc, #284]	; (800090c <MX_GPIO_Init+0x1ec>)
 80007ee:	f000 fd87 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007f2:	2200      	movs	r2, #0
 80007f4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007f8:	4845      	ldr	r0, [pc, #276]	; (8000910 <MX_GPIO_Init+0x1f0>)
 80007fa:	f000 fd81 	bl	8001300 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007fe:	2308      	movs	r3, #8
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	483c      	ldr	r0, [pc, #240]	; (8000908 <MX_GPIO_Init+0x1e8>)
 8000816:	f000 fbd7 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800081a:	2301      	movs	r3, #1
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	4836      	ldr	r0, [pc, #216]	; (800090c <MX_GPIO_Init+0x1ec>)
 8000832:	f000 fbc9 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000836:	2308      	movs	r3, #8
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000846:	2305      	movs	r3, #5
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	482e      	ldr	r0, [pc, #184]	; (800090c <MX_GPIO_Init+0x1ec>)
 8000852:	f000 fbb9 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000856:	2301      	movs	r3, #1
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800085a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	482a      	ldr	r0, [pc, #168]	; (8000914 <MX_GPIO_Init+0x1f4>)
 800086c:	f000 fbac 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000870:	2304      	movs	r3, #4
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4825      	ldr	r0, [pc, #148]	; (8000918 <MX_GPIO_Init+0x1f8>)
 8000884:	f000 fba0 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089a:	2305      	movs	r3, #5
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	481c      	ldr	r0, [pc, #112]	; (8000918 <MX_GPIO_Init+0x1f8>)
 80008a6:	f000 fb8f 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008aa:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008ae:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	4813      	ldr	r0, [pc, #76]	; (8000910 <MX_GPIO_Init+0x1f0>)
 80008c4:	f000 fb80 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008c8:	2320      	movs	r3, #32
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	480d      	ldr	r0, [pc, #52]	; (8000910 <MX_GPIO_Init+0x1f0>)
 80008dc:	f000 fb74 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008e0:	2302      	movs	r3, #2
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008e4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_GPIO_Init+0x1e8>)
 80008f6:	f000 fb67 	bl	8000fc8 <HAL_GPIO_Init>

}
 80008fa:	bf00      	nop
 80008fc:	3730      	adds	r7, #48	; 0x30
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	40021000 	.word	0x40021000
 800090c:	40020800 	.word	0x40020800
 8000910:	40020c00 	.word	0x40020c00
 8000914:	40020000 	.word	0x40020000
 8000918:	40020400 	.word	0x40020400

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	e7fe      	b.n	8000924 <Error_Handler+0x8>
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a0f      	ldr	r2, [pc, #60]	; (8000974 <HAL_MspInit+0x4c>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_MspInit+0x4c>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000966:	2007      	movs	r0, #7
 8000968:	f000 faec 	bl	8000f44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800

08000978 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a19      	ldr	r2, [pc, #100]	; (80009fc <HAL_I2C_MspInit+0x84>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d12c      	bne.n	80009f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a17      	ldr	r2, [pc, #92]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009b6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009bc:	2312      	movs	r3, #18
 80009be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c8:	2304      	movs	r3, #4
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4619      	mov	r1, r3
 80009d2:	480c      	ldr	r0, [pc, #48]	; (8000a04 <HAL_I2C_MspInit+0x8c>)
 80009d4:	f000 faf8 	bl	8000fc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e6:	6413      	str	r3, [r2, #64]	; 0x40
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009f4:	bf00      	nop
 80009f6:	3728      	adds	r7, #40	; 0x28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40005400 	.word	0x40005400
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020400 	.word	0x40020400

08000a08 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08e      	sub	sp, #56	; 0x38
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a31      	ldr	r2, [pc, #196]	; (8000af8 <HAL_I2S_MspInit+0xf0>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d15a      	bne.n	8000aee <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a3c:	23c0      	movs	r3, #192	; 0xc0
 8000a3e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f003 f83b 	bl	8003ac4 <HAL_RCCEx_PeriphCLKConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a54:	f7ff ff62 	bl	800091c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a58:	2300      	movs	r3, #0
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	4b27      	ldr	r3, [pc, #156]	; (8000afc <HAL_I2S_MspInit+0xf4>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	4a26      	ldr	r2, [pc, #152]	; (8000afc <HAL_I2S_MspInit+0xf4>)
 8000a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a66:	6413      	str	r3, [r2, #64]	; 0x40
 8000a68:	4b24      	ldr	r3, [pc, #144]	; (8000afc <HAL_I2S_MspInit+0xf4>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	4b20      	ldr	r3, [pc, #128]	; (8000afc <HAL_I2S_MspInit+0xf4>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7c:	4a1f      	ldr	r2, [pc, #124]	; (8000afc <HAL_I2S_MspInit+0xf4>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6313      	str	r3, [r2, #48]	; 0x30
 8000a84:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <HAL_I2S_MspInit+0xf4>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	4b19      	ldr	r3, [pc, #100]	; (8000afc <HAL_I2S_MspInit+0xf4>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	4a18      	ldr	r2, [pc, #96]	; (8000afc <HAL_I2S_MspInit+0xf4>)
 8000a9a:	f043 0304 	orr.w	r3, r3, #4
 8000a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa0:	4b16      	ldr	r3, [pc, #88]	; (8000afc <HAL_I2S_MspInit+0xf4>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa4:	f003 0304 	and.w	r3, r3, #4
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000aac:	2310      	movs	r3, #16
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000abc:	2306      	movs	r3, #6
 8000abe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480e      	ldr	r0, [pc, #56]	; (8000b00 <HAL_I2S_MspInit+0xf8>)
 8000ac8:	f000 fa7e 	bl	8000fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000acc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ade:	2306      	movs	r3, #6
 8000ae0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4806      	ldr	r0, [pc, #24]	; (8000b04 <HAL_I2S_MspInit+0xfc>)
 8000aea:	f000 fa6d 	bl	8000fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000aee:	bf00      	nop
 8000af0:	3738      	adds	r7, #56	; 0x38
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40003c00 	.word	0x40003c00
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40020800 	.word	0x40020800

08000b08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a19      	ldr	r2, [pc, #100]	; (8000b8c <HAL_SPI_MspInit+0x84>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d12b      	bne.n	8000b82 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <HAL_SPI_MspInit+0x88>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	4a17      	ldr	r2, [pc, #92]	; (8000b90 <HAL_SPI_MspInit+0x88>)
 8000b34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b38:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_SPI_MspInit+0x88>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <HAL_SPI_MspInit+0x88>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a10      	ldr	r2, [pc, #64]	; (8000b90 <HAL_SPI_MspInit+0x88>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <HAL_SPI_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b62:	23e0      	movs	r3, #224	; 0xe0
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b72:	2305      	movs	r3, #5
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	; (8000b94 <HAL_SPI_MspInit+0x8c>)
 8000b7e:	f000 fa23 	bl	8000fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	; 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40013000 	.word	0x40013000
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020000 	.word	0x40020000

08000b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <NMI_Handler+0x4>

08000b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <MemManage_Handler+0x4>

08000baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be4:	f000 f89a 	bl	8000d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <OTG_FS_IRQHandler+0x10>)
 8000bf2:	f001 fad3 	bl	800219c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20001988 	.word	0x20001988

08000c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <SystemInit+0x20>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0a:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <SystemInit+0x20>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c28:	480d      	ldr	r0, [pc, #52]	; (8000c60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c2a:	490e      	ldr	r1, [pc, #56]	; (8000c64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c2c:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c40:	4c0b      	ldr	r4, [pc, #44]	; (8000c70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c4e:	f7ff ffd7 	bl	8000c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c52:	f006 fddb 	bl	800780c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c56:	f7ff fc33 	bl	80004c0 <main>
  bx  lr    
 8000c5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000c68:	080078ec 	.word	0x080078ec
  ldr r2, =_sbss
 8000c6c:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000c70:	20001d90 	.word	0x20001d90

08000c74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC_IRQHandler>
	...

08000c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0d      	ldr	r2, [pc, #52]	; (8000cb8 <HAL_Init+0x40>)
 8000c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <HAL_Init+0x40>)
 8000c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <HAL_Init+0x40>)
 8000c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f000 f94f 	bl	8000f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f000 f808 	bl	8000cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cac:	f7ff fe3c 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023c00 	.word	0x40023c00

08000cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_InitTick+0x54>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_InitTick+0x58>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 f967 	bl	8000fae <HAL_SYSTICK_Config>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00e      	b.n	8000d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b0f      	cmp	r3, #15
 8000cee:	d80a      	bhi.n	8000d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f000 f92f 	bl	8000f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <HAL_InitTick+0x5c>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d02:	2300      	movs	r3, #0
 8000d04:	e000      	b.n	8000d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000000 	.word	0x20000000
 8000d14:	20000008 	.word	0x20000008
 8000d18:	20000004 	.word	0x20000004

08000d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x20>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_IncTick+0x24>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <HAL_IncTick+0x24>)
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	200004b4 	.word	0x200004b4

08000d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <HAL_GetTick+0x14>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	200004b4 	.word	0x200004b4

08000d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d64:	f7ff ffee 	bl	8000d44 <HAL_GetTick>
 8000d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d74:	d005      	beq.n	8000d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_Delay+0x44>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4413      	add	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d82:	bf00      	nop
 8000d84:	f7ff ffde 	bl	8000d44 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d8f7      	bhi.n	8000d84 <HAL_Delay+0x28>
  {
  }
}
 8000d94:	bf00      	nop
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008

08000da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd6:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	60d3      	str	r3, [r2, #12]
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <__NVIC_GetPriorityGrouping+0x18>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	f003 0307 	and.w	r3, r3, #7
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	db0b      	blt.n	8000e32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	f003 021f 	and.w	r2, r3, #31
 8000e20:	4907      	ldr	r1, [pc, #28]	; (8000e40 <__NVIC_EnableIRQ+0x38>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	095b      	lsrs	r3, r3, #5
 8000e28:	2001      	movs	r0, #1
 8000e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000e100 	.word	0xe000e100

08000e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db0a      	blt.n	8000e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	490c      	ldr	r1, [pc, #48]	; (8000e90 <__NVIC_SetPriority+0x4c>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	440b      	add	r3, r1
 8000e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e6c:	e00a      	b.n	8000e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4908      	ldr	r1, [pc, #32]	; (8000e94 <__NVIC_SetPriority+0x50>)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	3b04      	subs	r3, #4
 8000e7c:	0112      	lsls	r2, r2, #4
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	440b      	add	r3, r1
 8000e82:	761a      	strb	r2, [r3, #24]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000e100 	.word	0xe000e100
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f1c3 0307 	rsb	r3, r3, #7
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	bf28      	it	cs
 8000eb6:	2304      	movcs	r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	2b06      	cmp	r3, #6
 8000ec0:	d902      	bls.n	8000ec8 <NVIC_EncodePriority+0x30>
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3b03      	subs	r3, #3
 8000ec6:	e000      	b.n	8000eca <NVIC_EncodePriority+0x32>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	401a      	ands	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	43d9      	mvns	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	4313      	orrs	r3, r2
         );
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3724      	adds	r7, #36	; 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f10:	d301      	bcc.n	8000f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00f      	b.n	8000f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f16:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <SysTick_Config+0x40>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1e:	210f      	movs	r1, #15
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f7ff ff8e 	bl	8000e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <SysTick_Config+0x40>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <SysTick_Config+0x40>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	e000e010 	.word	0xe000e010

08000f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ff29 	bl	8000da4 <__NVIC_SetPriorityGrouping>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6c:	f7ff ff3e 	bl	8000dec <__NVIC_GetPriorityGrouping>
 8000f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	6978      	ldr	r0, [r7, #20]
 8000f78:	f7ff ff8e 	bl	8000e98 <NVIC_EncodePriority>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff5d 	bl	8000e44 <__NVIC_SetPriority>
}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff31 	bl	8000e08 <__NVIC_EnableIRQ>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ffa2 	bl	8000f00 <SysTick_Config>
 8000fbc:	4603      	mov	r3, r0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	; 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
 8000fe2:	e16b      	b.n	80012bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	f040 815a 	bne.w	80012b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	2b01      	cmp	r3, #1
 800100c:	d005      	beq.n	800101a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001016:	2b02      	cmp	r3, #2
 8001018:	d130      	bne.n	800107c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	2203      	movs	r2, #3
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	68da      	ldr	r2, [r3, #12]
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001050:	2201      	movs	r2, #1
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	091b      	lsrs	r3, r3, #4
 8001066:	f003 0201 	and.w	r2, r3, #1
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	2b03      	cmp	r3, #3
 8001086:	d017      	beq.n	80010b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	2203      	movs	r2, #3
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d123      	bne.n	800110c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	08da      	lsrs	r2, r3, #3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3208      	adds	r2, #8
 80010cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	220f      	movs	r2, #15
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	691a      	ldr	r2, [r3, #16]
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	08da      	lsrs	r2, r3, #3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3208      	adds	r2, #8
 8001106:	69b9      	ldr	r1, [r7, #24]
 8001108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f003 0203 	and.w	r2, r3, #3
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001148:	2b00      	cmp	r3, #0
 800114a:	f000 80b4 	beq.w	80012b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b60      	ldr	r3, [pc, #384]	; (80012d4 <HAL_GPIO_Init+0x30c>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	4a5f      	ldr	r2, [pc, #380]	; (80012d4 <HAL_GPIO_Init+0x30c>)
 8001158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115c:	6453      	str	r3, [r2, #68]	; 0x44
 800115e:	4b5d      	ldr	r3, [pc, #372]	; (80012d4 <HAL_GPIO_Init+0x30c>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800116a:	4a5b      	ldr	r2, [pc, #364]	; (80012d8 <HAL_GPIO_Init+0x310>)
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	089b      	lsrs	r3, r3, #2
 8001170:	3302      	adds	r3, #2
 8001172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	220f      	movs	r2, #15
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a52      	ldr	r2, [pc, #328]	; (80012dc <HAL_GPIO_Init+0x314>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d02b      	beq.n	80011ee <HAL_GPIO_Init+0x226>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a51      	ldr	r2, [pc, #324]	; (80012e0 <HAL_GPIO_Init+0x318>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d025      	beq.n	80011ea <HAL_GPIO_Init+0x222>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a50      	ldr	r2, [pc, #320]	; (80012e4 <HAL_GPIO_Init+0x31c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d01f      	beq.n	80011e6 <HAL_GPIO_Init+0x21e>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4f      	ldr	r2, [pc, #316]	; (80012e8 <HAL_GPIO_Init+0x320>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d019      	beq.n	80011e2 <HAL_GPIO_Init+0x21a>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4e      	ldr	r2, [pc, #312]	; (80012ec <HAL_GPIO_Init+0x324>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d013      	beq.n	80011de <HAL_GPIO_Init+0x216>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4d      	ldr	r2, [pc, #308]	; (80012f0 <HAL_GPIO_Init+0x328>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d00d      	beq.n	80011da <HAL_GPIO_Init+0x212>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4c      	ldr	r2, [pc, #304]	; (80012f4 <HAL_GPIO_Init+0x32c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d007      	beq.n	80011d6 <HAL_GPIO_Init+0x20e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4b      	ldr	r2, [pc, #300]	; (80012f8 <HAL_GPIO_Init+0x330>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d101      	bne.n	80011d2 <HAL_GPIO_Init+0x20a>
 80011ce:	2307      	movs	r3, #7
 80011d0:	e00e      	b.n	80011f0 <HAL_GPIO_Init+0x228>
 80011d2:	2308      	movs	r3, #8
 80011d4:	e00c      	b.n	80011f0 <HAL_GPIO_Init+0x228>
 80011d6:	2306      	movs	r3, #6
 80011d8:	e00a      	b.n	80011f0 <HAL_GPIO_Init+0x228>
 80011da:	2305      	movs	r3, #5
 80011dc:	e008      	b.n	80011f0 <HAL_GPIO_Init+0x228>
 80011de:	2304      	movs	r3, #4
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x228>
 80011e2:	2303      	movs	r3, #3
 80011e4:	e004      	b.n	80011f0 <HAL_GPIO_Init+0x228>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e002      	b.n	80011f0 <HAL_GPIO_Init+0x228>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <HAL_GPIO_Init+0x228>
 80011ee:	2300      	movs	r3, #0
 80011f0:	69fa      	ldr	r2, [r7, #28]
 80011f2:	f002 0203 	and.w	r2, r2, #3
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	4093      	lsls	r3, r2
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001200:	4935      	ldr	r1, [pc, #212]	; (80012d8 <HAL_GPIO_Init+0x310>)
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3302      	adds	r3, #2
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800120e:	4b3b      	ldr	r3, [pc, #236]	; (80012fc <HAL_GPIO_Init+0x334>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001232:	4a32      	ldr	r2, [pc, #200]	; (80012fc <HAL_GPIO_Init+0x334>)
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001238:	4b30      	ldr	r3, [pc, #192]	; (80012fc <HAL_GPIO_Init+0x334>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800125c:	4a27      	ldr	r2, [pc, #156]	; (80012fc <HAL_GPIO_Init+0x334>)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001262:	4b26      	ldr	r3, [pc, #152]	; (80012fc <HAL_GPIO_Init+0x334>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001286:	4a1d      	ldr	r2, [pc, #116]	; (80012fc <HAL_GPIO_Init+0x334>)
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800128c:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <HAL_GPIO_Init+0x334>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b0:	4a12      	ldr	r2, [pc, #72]	; (80012fc <HAL_GPIO_Init+0x334>)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3301      	adds	r3, #1
 80012ba:	61fb      	str	r3, [r7, #28]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	2b0f      	cmp	r3, #15
 80012c0:	f67f ae90 	bls.w	8000fe4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3724      	adds	r7, #36	; 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40013800 	.word	0x40013800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40020400 	.word	0x40020400
 80012e4:	40020800 	.word	0x40020800
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40021400 	.word	0x40021400
 80012f4:	40021800 	.word	0x40021800
 80012f8:	40021c00 	.word	0x40021c00
 80012fc:	40013c00 	.word	0x40013c00

08001300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
 800130c:	4613      	mov	r3, r2
 800130e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001310:	787b      	ldrb	r3, [r7, #1]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800131c:	e003      	b.n	8001326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	041a      	lsls	r2, r3, #16
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	619a      	str	r2, [r3, #24]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e12b      	b.n	800159e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d106      	bne.n	8001360 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fb0c 	bl	8000978 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2224      	movs	r2, #36	; 0x24
 8001364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0201 	bic.w	r2, r2, #1
 8001376:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001386:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001396:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001398:	f002 fb80 	bl	8003a9c <HAL_RCC_GetPCLK1Freq>
 800139c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	4a81      	ldr	r2, [pc, #516]	; (80015a8 <HAL_I2C_Init+0x274>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d807      	bhi.n	80013b8 <HAL_I2C_Init+0x84>
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4a80      	ldr	r2, [pc, #512]	; (80015ac <HAL_I2C_Init+0x278>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	bf94      	ite	ls
 80013b0:	2301      	movls	r3, #1
 80013b2:	2300      	movhi	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	e006      	b.n	80013c6 <HAL_I2C_Init+0x92>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4a7d      	ldr	r2, [pc, #500]	; (80015b0 <HAL_I2C_Init+0x27c>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	bf94      	ite	ls
 80013c0:	2301      	movls	r3, #1
 80013c2:	2300      	movhi	r3, #0
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e0e7      	b.n	800159e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4a78      	ldr	r2, [pc, #480]	; (80015b4 <HAL_I2C_Init+0x280>)
 80013d2:	fba2 2303 	umull	r2, r3, r2, r3
 80013d6:	0c9b      	lsrs	r3, r3, #18
 80013d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68ba      	ldr	r2, [r7, #8]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	4a6a      	ldr	r2, [pc, #424]	; (80015a8 <HAL_I2C_Init+0x274>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d802      	bhi.n	8001408 <HAL_I2C_Init+0xd4>
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	3301      	adds	r3, #1
 8001406:	e009      	b.n	800141c <HAL_I2C_Init+0xe8>
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800140e:	fb02 f303 	mul.w	r3, r2, r3
 8001412:	4a69      	ldr	r2, [pc, #420]	; (80015b8 <HAL_I2C_Init+0x284>)
 8001414:	fba2 2303 	umull	r2, r3, r2, r3
 8001418:	099b      	lsrs	r3, r3, #6
 800141a:	3301      	adds	r3, #1
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	430b      	orrs	r3, r1
 8001422:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800142e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	495c      	ldr	r1, [pc, #368]	; (80015a8 <HAL_I2C_Init+0x274>)
 8001438:	428b      	cmp	r3, r1
 800143a:	d819      	bhi.n	8001470 <HAL_I2C_Init+0x13c>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1e59      	subs	r1, r3, #1
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	fbb1 f3f3 	udiv	r3, r1, r3
 800144a:	1c59      	adds	r1, r3, #1
 800144c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001450:	400b      	ands	r3, r1
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00a      	beq.n	800146c <HAL_I2C_Init+0x138>
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	1e59      	subs	r1, r3, #1
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	fbb1 f3f3 	udiv	r3, r1, r3
 8001464:	3301      	adds	r3, #1
 8001466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800146a:	e051      	b.n	8001510 <HAL_I2C_Init+0x1dc>
 800146c:	2304      	movs	r3, #4
 800146e:	e04f      	b.n	8001510 <HAL_I2C_Init+0x1dc>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d111      	bne.n	800149c <HAL_I2C_Init+0x168>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	1e58      	subs	r0, r3, #1
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6859      	ldr	r1, [r3, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	440b      	add	r3, r1
 8001486:	fbb0 f3f3 	udiv	r3, r0, r3
 800148a:	3301      	adds	r3, #1
 800148c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001490:	2b00      	cmp	r3, #0
 8001492:	bf0c      	ite	eq
 8001494:	2301      	moveq	r3, #1
 8001496:	2300      	movne	r3, #0
 8001498:	b2db      	uxtb	r3, r3
 800149a:	e012      	b.n	80014c2 <HAL_I2C_Init+0x18e>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	1e58      	subs	r0, r3, #1
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6859      	ldr	r1, [r3, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	0099      	lsls	r1, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80014b2:	3301      	adds	r3, #1
 80014b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	bf0c      	ite	eq
 80014bc:	2301      	moveq	r3, #1
 80014be:	2300      	movne	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_I2C_Init+0x196>
 80014c6:	2301      	movs	r3, #1
 80014c8:	e022      	b.n	8001510 <HAL_I2C_Init+0x1dc>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10e      	bne.n	80014f0 <HAL_I2C_Init+0x1bc>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	1e58      	subs	r0, r3, #1
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6859      	ldr	r1, [r3, #4]
 80014da:	460b      	mov	r3, r1
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	440b      	add	r3, r1
 80014e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e4:	3301      	adds	r3, #1
 80014e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014ee:	e00f      	b.n	8001510 <HAL_I2C_Init+0x1dc>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	1e58      	subs	r0, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6859      	ldr	r1, [r3, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	0099      	lsls	r1, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	fbb0 f3f3 	udiv	r3, r0, r3
 8001506:	3301      	adds	r3, #1
 8001508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800150c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	6809      	ldr	r1, [r1, #0]
 8001514:	4313      	orrs	r3, r2
 8001516:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69da      	ldr	r2, [r3, #28]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800153e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6911      	ldr	r1, [r2, #16]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	68d2      	ldr	r2, [r2, #12]
 800154a:	4311      	orrs	r1, r2
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	430b      	orrs	r3, r1
 8001552:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695a      	ldr	r2, [r3, #20]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0201 	orr.w	r2, r2, #1
 800157e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2220      	movs	r2, #32
 800158a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	000186a0 	.word	0x000186a0
 80015ac:	001e847f 	.word	0x001e847f
 80015b0:	003d08ff 	.word	0x003d08ff
 80015b4:	431bde83 	.word	0x431bde83
 80015b8:	10624dd3 	.word	0x10624dd3

080015bc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e128      	b.n	8001820 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d109      	bne.n	80015ee <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a90      	ldr	r2, [pc, #576]	; (8001828 <HAL_I2S_Init+0x26c>)
 80015e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff fa0d 	bl	8000a08 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2202      	movs	r2, #2
 80015f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001604:	f023 030f 	bic.w	r3, r3, #15
 8001608:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2202      	movs	r2, #2
 8001610:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d060      	beq.n	80016dc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001622:	2310      	movs	r3, #16
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	e001      	b.n	800162c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001628:	2320      	movs	r3, #32
 800162a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b20      	cmp	r3, #32
 8001632:	d802      	bhi.n	800163a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800163a:	2001      	movs	r0, #1
 800163c:	f002 fb24 	bl	8003c88 <HAL_RCCEx_GetPeriphCLKFreq>
 8001640:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800164a:	d125      	bne.n	8001698 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d010      	beq.n	8001676 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	fbb2 f2f3 	udiv	r2, r2, r3
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	461a      	mov	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001670:	3305      	adds	r3, #5
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	e01f      	b.n	80016b6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	461a      	mov	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001692:	3305      	adds	r3, #5
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	e00e      	b.n	80016b6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	fbb2 f2f3 	udiv	r2, r2, r3
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	461a      	mov	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	3305      	adds	r3, #5
 80016b4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	4a5c      	ldr	r2, [pc, #368]	; (800182c <HAL_I2S_Init+0x270>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	08db      	lsrs	r3, r3, #3
 80016c0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	085b      	lsrs	r3, r3, #1
 80016d2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	e003      	b.n	80016e4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80016dc:	2302      	movs	r3, #2
 80016de:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d902      	bls.n	80016f0 <HAL_I2S_Init+0x134>
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	2bff      	cmp	r3, #255	; 0xff
 80016ee:	d907      	bls.n	8001700 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f4:	f043 0210 	orr.w	r2, r3, #16
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e08f      	b.n	8001820 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	ea42 0103 	orr.w	r1, r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	430a      	orrs	r2, r1
 8001712:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800171e:	f023 030f 	bic.w	r3, r3, #15
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6851      	ldr	r1, [r2, #4]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6892      	ldr	r2, [r2, #8]
 800172a:	4311      	orrs	r1, r2
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	68d2      	ldr	r2, [r2, #12]
 8001730:	4311      	orrs	r1, r2
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6992      	ldr	r2, [r2, #24]
 8001736:	430a      	orrs	r2, r1
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001742:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d161      	bne.n	8001810 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a38      	ldr	r2, [pc, #224]	; (8001830 <HAL_I2S_Init+0x274>)
 8001750:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a37      	ldr	r2, [pc, #220]	; (8001834 <HAL_I2S_Init+0x278>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d101      	bne.n	8001760 <HAL_I2S_Init+0x1a4>
 800175c:	4b36      	ldr	r3, [pc, #216]	; (8001838 <HAL_I2S_Init+0x27c>)
 800175e:	e001      	b.n	8001764 <HAL_I2S_Init+0x1a8>
 8001760:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	4932      	ldr	r1, [pc, #200]	; (8001834 <HAL_I2S_Init+0x278>)
 800176c:	428a      	cmp	r2, r1
 800176e:	d101      	bne.n	8001774 <HAL_I2S_Init+0x1b8>
 8001770:	4a31      	ldr	r2, [pc, #196]	; (8001838 <HAL_I2S_Init+0x27c>)
 8001772:	e001      	b.n	8001778 <HAL_I2S_Init+0x1bc>
 8001774:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001778:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800177c:	f023 030f 	bic.w	r3, r3, #15
 8001780:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a2b      	ldr	r2, [pc, #172]	; (8001834 <HAL_I2S_Init+0x278>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d101      	bne.n	8001790 <HAL_I2S_Init+0x1d4>
 800178c:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <HAL_I2S_Init+0x27c>)
 800178e:	e001      	b.n	8001794 <HAL_I2S_Init+0x1d8>
 8001790:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001794:	2202      	movs	r2, #2
 8001796:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a25      	ldr	r2, [pc, #148]	; (8001834 <HAL_I2S_Init+0x278>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d101      	bne.n	80017a6 <HAL_I2S_Init+0x1ea>
 80017a2:	4b25      	ldr	r3, [pc, #148]	; (8001838 <HAL_I2S_Init+0x27c>)
 80017a4:	e001      	b.n	80017aa <HAL_I2S_Init+0x1ee>
 80017a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017aa:	69db      	ldr	r3, [r3, #28]
 80017ac:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017b6:	d003      	beq.n	80017c0 <HAL_I2S_Init+0x204>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d103      	bne.n	80017c8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80017c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	e001      	b.n	80017cc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80017d6:	4313      	orrs	r3, r2
 80017d8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80017e0:	4313      	orrs	r3, r2
 80017e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80017ea:	4313      	orrs	r3, r2
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	897b      	ldrh	r3, [r7, #10]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017f8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a0d      	ldr	r2, [pc, #52]	; (8001834 <HAL_I2S_Init+0x278>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d101      	bne.n	8001808 <HAL_I2S_Init+0x24c>
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <HAL_I2S_Init+0x27c>)
 8001806:	e001      	b.n	800180c <HAL_I2S_Init+0x250>
 8001808:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800180c:	897a      	ldrh	r2, [r7, #10]
 800180e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3720      	adds	r7, #32
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	08001933 	.word	0x08001933
 800182c:	cccccccd 	.word	0xcccccccd
 8001830:	08001a49 	.word	0x08001a49
 8001834:	40003800 	.word	0x40003800
 8001838:	40003400 	.word	0x40003400

0800183c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	881a      	ldrh	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	1c9a      	adds	r2, r3, #2
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189a:	b29b      	uxth	r3, r3
 800189c:	3b01      	subs	r3, #1
 800189e:	b29a      	uxth	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10e      	bne.n	80018cc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80018bc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff ffb8 	bl	800183c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e6:	b292      	uxth	r2, r2
 80018e8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ee:	1c9a      	adds	r2, r3, #2
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	3b01      	subs	r3, #1
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001906:	b29b      	uxth	r3, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10e      	bne.n	800192a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800191a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ff93 	bl	8001850 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b04      	cmp	r3, #4
 800194c:	d13a      	bne.n	80019c4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b01      	cmp	r3, #1
 8001956:	d109      	bne.n	800196c <I2S_IRQHandler+0x3a>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001962:	2b40      	cmp	r3, #64	; 0x40
 8001964:	d102      	bne.n	800196c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ffb4 	bl	80018d4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001972:	2b40      	cmp	r3, #64	; 0x40
 8001974:	d126      	bne.n	80019c4 <I2S_IRQHandler+0x92>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0320 	and.w	r3, r3, #32
 8001980:	2b20      	cmp	r3, #32
 8001982:	d11f      	bne.n	80019c4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001992:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f043 0202 	orr.w	r2, r3, #2
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ff50 	bl	8001864 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d136      	bne.n	8001a3e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d109      	bne.n	80019ee <I2S_IRQHandler+0xbc>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e4:	2b80      	cmp	r3, #128	; 0x80
 80019e6:	d102      	bne.n	80019ee <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ff45 	bl	8001878 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d122      	bne.n	8001a3e <I2S_IRQHandler+0x10c>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0320 	and.w	r3, r3, #32
 8001a02:	2b20      	cmp	r3, #32
 8001a04:	d11b      	bne.n	8001a3e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a14:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	f043 0204 	orr.w	r2, r3, #4
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff13 	bl	8001864 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001a3e:	bf00      	nop
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4aa2      	ldr	r2, [pc, #648]	; (8001ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d101      	bne.n	8001a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001a62:	4ba2      	ldr	r3, [pc, #648]	; (8001cec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001a64:	e001      	b.n	8001a6a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001a66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a9b      	ldr	r2, [pc, #620]	; (8001ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d101      	bne.n	8001a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001a80:	4b9a      	ldr	r3, [pc, #616]	; (8001cec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001a82:	e001      	b.n	8001a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001a84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a94:	d004      	beq.n	8001aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 8099 	bne.w	8001bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d107      	bne.n	8001aba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f925 	bl	8001d04 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d107      	bne.n	8001ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f9c8 	bl	8001e64 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ada:	2b40      	cmp	r3, #64	; 0x40
 8001adc:	d13a      	bne.n	8001b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	f003 0320 	and.w	r3, r3, #32
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d035      	beq.n	8001b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a7e      	ldr	r2, [pc, #504]	; (8001ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d101      	bne.n	8001af6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001af2:	4b7e      	ldr	r3, [pc, #504]	; (8001cec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001af4:	e001      	b.n	8001afa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001af6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4979      	ldr	r1, [pc, #484]	; (8001ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001b02:	428b      	cmp	r3, r1
 8001b04:	d101      	bne.n	8001b0a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001b06:	4b79      	ldr	r3, [pc, #484]	; (8001cec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001b08:	e001      	b.n	8001b0e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001b0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b12:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b22:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b24:	2300      	movs	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f043 0202 	orr.w	r2, r3, #2
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff fe88 	bl	8001864 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	f040 80be 	bne.w	8001cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f003 0320 	and.w	r3, r3, #32
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 80b8 	beq.w	8001cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b7a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a59      	ldr	r2, [pc, #356]	; (8001ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d101      	bne.n	8001b8a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001b86:	4b59      	ldr	r3, [pc, #356]	; (8001cec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001b88:	e001      	b.n	8001b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001b8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4954      	ldr	r1, [pc, #336]	; (8001ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001b96:	428b      	cmp	r3, r1
 8001b98:	d101      	bne.n	8001b9e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001b9a:	4b54      	ldr	r3, [pc, #336]	; (8001cec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001b9c:	e001      	b.n	8001ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001b9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ba2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ba6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	f043 0204 	orr.w	r2, r3, #4
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff fe4a 	bl	8001864 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001bd0:	e084      	b.n	8001cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d107      	bne.n	8001bec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f8be 	bl	8001d68 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d107      	bne.n	8001c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f8fd 	bl	8001e00 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c0c:	2b40      	cmp	r3, #64	; 0x40
 8001c0e:	d12f      	bne.n	8001c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f003 0320 	and.w	r3, r3, #32
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d02a      	beq.n	8001c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c28:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a2e      	ldr	r2, [pc, #184]	; (8001ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d101      	bne.n	8001c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001c34:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c36:	e001      	b.n	8001c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001c38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4929      	ldr	r1, [pc, #164]	; (8001ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c44:	428b      	cmp	r3, r1
 8001c46:	d101      	bne.n	8001c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001c48:	4b28      	ldr	r3, [pc, #160]	; (8001cec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c4a:	e001      	b.n	8001c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001c4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c54:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f043 0202 	orr.w	r2, r3, #2
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff fdfa 	bl	8001864 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d131      	bne.n	8001cde <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	f003 0320 	and.w	r3, r3, #32
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d02c      	beq.n	8001cde <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a17      	ldr	r2, [pc, #92]	; (8001ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d101      	bne.n	8001c92 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001c8e:	4b17      	ldr	r3, [pc, #92]	; (8001cec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c90:	e001      	b.n	8001c96 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001c92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4912      	ldr	r1, [pc, #72]	; (8001ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c9e:	428b      	cmp	r3, r1
 8001ca0:	d101      	bne.n	8001ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ca4:	e001      	b.n	8001caa <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8001ca6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001caa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001cae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cbe:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ccc:	f043 0204 	orr.w	r2, r3, #4
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff fdc5 	bl	8001864 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001cda:	e000      	b.n	8001cde <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001cdc:	bf00      	nop
}
 8001cde:	bf00      	nop
 8001ce0:	3720      	adds	r7, #32
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40003800 	.word	0x40003800
 8001cec:	40003400 	.word	0x40003400

08001cf0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	1c99      	adds	r1, r3, #2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6251      	str	r1, [r2, #36]	; 0x24
 8001d16:	881a      	ldrh	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	3b01      	subs	r3, #1
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d113      	bne.n	8001d5e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d44:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d106      	bne.n	8001d5e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ffc9 	bl	8001cf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	1c99      	adds	r1, r3, #2
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6251      	str	r1, [r2, #36]	; 0x24
 8001d7a:	8819      	ldrh	r1, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1d      	ldr	r2, [pc, #116]	; (8001df8 <I2SEx_TxISR_I2SExt+0x90>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d101      	bne.n	8001d8a <I2SEx_TxISR_I2SExt+0x22>
 8001d86:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <I2SEx_TxISR_I2SExt+0x94>)
 8001d88:	e001      	b.n	8001d8e <I2SEx_TxISR_I2SExt+0x26>
 8001d8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d8e:	460a      	mov	r2, r1
 8001d90:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d121      	bne.n	8001dee <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <I2SEx_TxISR_I2SExt+0x90>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d101      	bne.n	8001db8 <I2SEx_TxISR_I2SExt+0x50>
 8001db4:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <I2SEx_TxISR_I2SExt+0x94>)
 8001db6:	e001      	b.n	8001dbc <I2SEx_TxISR_I2SExt+0x54>
 8001db8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	490d      	ldr	r1, [pc, #52]	; (8001df8 <I2SEx_TxISR_I2SExt+0x90>)
 8001dc4:	428b      	cmp	r3, r1
 8001dc6:	d101      	bne.n	8001dcc <I2SEx_TxISR_I2SExt+0x64>
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <I2SEx_TxISR_I2SExt+0x94>)
 8001dca:	e001      	b.n	8001dd0 <I2SEx_TxISR_I2SExt+0x68>
 8001dcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dd0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001dd4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d106      	bne.n	8001dee <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ff81 	bl	8001cf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40003800 	.word	0x40003800
 8001dfc:	40003400 	.word	0x40003400

08001e00 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68d8      	ldr	r0, [r3, #12]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e12:	1c99      	adds	r1, r3, #2
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001e18:	b282      	uxth	r2, r0
 8001e1a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	3b01      	subs	r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d113      	bne.n	8001e5c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e42:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d106      	bne.n	8001e5c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ff4a 	bl	8001cf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a20      	ldr	r2, [pc, #128]	; (8001ef4 <I2SEx_RxISR_I2SExt+0x90>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d101      	bne.n	8001e7a <I2SEx_RxISR_I2SExt+0x16>
 8001e76:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <I2SEx_RxISR_I2SExt+0x94>)
 8001e78:	e001      	b.n	8001e7e <I2SEx_RxISR_I2SExt+0x1a>
 8001e7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e7e:	68d8      	ldr	r0, [r3, #12]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e84:	1c99      	adds	r1, r3, #2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001e8a:	b282      	uxth	r2, r0
 8001e8c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d121      	bne.n	8001eea <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <I2SEx_RxISR_I2SExt+0x90>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d101      	bne.n	8001eb4 <I2SEx_RxISR_I2SExt+0x50>
 8001eb0:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <I2SEx_RxISR_I2SExt+0x94>)
 8001eb2:	e001      	b.n	8001eb8 <I2SEx_RxISR_I2SExt+0x54>
 8001eb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	490d      	ldr	r1, [pc, #52]	; (8001ef4 <I2SEx_RxISR_I2SExt+0x90>)
 8001ec0:	428b      	cmp	r3, r1
 8001ec2:	d101      	bne.n	8001ec8 <I2SEx_RxISR_I2SExt+0x64>
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <I2SEx_RxISR_I2SExt+0x94>)
 8001ec6:	e001      	b.n	8001ecc <I2SEx_RxISR_I2SExt+0x68>
 8001ec8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ecc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ed0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d106      	bne.n	8001eea <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff ff03 	bl	8001cf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40003800 	.word	0x40003800
 8001ef8:	40003400 	.word	0x40003400

08001efc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001efe:	b08f      	sub	sp, #60	; 0x3c
 8001f00:	af0a      	add	r7, sp, #40	; 0x28
 8001f02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e10f      	b.n	800212e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d106      	bne.n	8001f2e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f005 f94d 	bl	80071c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2203      	movs	r2, #3
 8001f32:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d102      	bne.n	8001f48 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f002 f896 	bl	800407e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	687e      	ldr	r6, [r7, #4]
 8001f5a:	466d      	mov	r5, sp
 8001f5c:	f106 0410 	add.w	r4, r6, #16
 8001f60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f70:	1d33      	adds	r3, r6, #4
 8001f72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f74:	6838      	ldr	r0, [r7, #0]
 8001f76:	f001 ff6e 	bl	8003e56 <USB_CoreInit>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2202      	movs	r2, #2
 8001f84:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0d0      	b.n	800212e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2100      	movs	r1, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f002 f884 	bl	80040a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	73fb      	strb	r3, [r7, #15]
 8001f9c:	e04a      	b.n	8002034 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f9e:	7bfa      	ldrb	r2, [r7, #15]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	1a9b      	subs	r3, r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	333d      	adds	r3, #61	; 0x3d
 8001fae:	2201      	movs	r2, #1
 8001fb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fb2:	7bfa      	ldrb	r2, [r7, #15]
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	1a9b      	subs	r3, r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	333c      	adds	r3, #60	; 0x3c
 8001fc2:	7bfa      	ldrb	r2, [r7, #15]
 8001fc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	b298      	uxth	r0, r3
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	1a9b      	subs	r3, r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3342      	adds	r3, #66	; 0x42
 8001fda:	4602      	mov	r2, r0
 8001fdc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fde:	7bfa      	ldrb	r2, [r7, #15]
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	1a9b      	subs	r3, r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	333f      	adds	r3, #63	; 0x3f
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	1a9b      	subs	r3, r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	3344      	adds	r3, #68	; 0x44
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	1a9b      	subs	r3, r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	3348      	adds	r3, #72	; 0x48
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800201a:	7bfa      	ldrb	r2, [r7, #15]
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	1a9b      	subs	r3, r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	3350      	adds	r3, #80	; 0x50
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	3301      	adds	r3, #1
 8002032:	73fb      	strb	r3, [r7, #15]
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	429a      	cmp	r2, r3
 800203c:	d3af      	bcc.n	8001f9e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800203e:	2300      	movs	r3, #0
 8002040:	73fb      	strb	r3, [r7, #15]
 8002042:	e044      	b.n	80020ce <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002044:	7bfa      	ldrb	r2, [r7, #15]
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002056:	2200      	movs	r2, #0
 8002058:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800205a:	7bfa      	ldrb	r2, [r7, #15]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002070:	7bfa      	ldrb	r2, [r7, #15]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002086:	7bfa      	ldrb	r2, [r7, #15]
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	1a9b      	subs	r3, r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	1a9b      	subs	r3, r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020b2:	7bfa      	ldrb	r2, [r7, #15]
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	1a9b      	subs	r3, r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	3301      	adds	r3, #1
 80020cc:	73fb      	strb	r3, [r7, #15]
 80020ce:	7bfa      	ldrb	r2, [r7, #15]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d3b5      	bcc.n	8002044 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	687e      	ldr	r6, [r7, #4]
 80020e0:	466d      	mov	r5, sp
 80020e2:	f106 0410 	add.w	r4, r6, #16
 80020e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80020f6:	1d33      	adds	r3, r6, #4
 80020f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020fa:	6838      	ldr	r0, [r7, #0]
 80020fc:	f002 f81c 	bl	8004138 <USB_DevInit>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d005      	beq.n	8002112 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2202      	movs	r2, #2
 800210a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e00d      	b.n	800212e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f003 f898 	bl	800525c <USB_DevDisconnect>

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002136 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_PCD_Start+0x1c>
 800214e:	2302      	movs	r3, #2
 8002150:	e020      	b.n	8002194 <HAL_PCD_Start+0x5e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215e:	2b01      	cmp	r3, #1
 8002160:	d109      	bne.n	8002176 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002166:	2b01      	cmp	r3, #1
 8002168:	d005      	beq.n	8002176 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f001 ff6e 	bl	800405c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f003 f848 	bl	800521a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b08d      	sub	sp, #52	; 0x34
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f003 f906 	bl	80053c4 <USB_GetMode>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f040 839d 	bne.w	80028fa <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f003 f86a 	bl	800529e <USB_ReadInterrupts>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 8393 	beq.w	80028f8 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f003 f861 	bl	800529e <USB_ReadInterrupts>
 80021dc:	4603      	mov	r3, r0
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d107      	bne.n	80021f6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	695a      	ldr	r2, [r3, #20]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f002 0202 	and.w	r2, r2, #2
 80021f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f003 f84f 	bl	800529e <USB_ReadInterrupts>
 8002200:	4603      	mov	r3, r0
 8002202:	f003 0310 	and.w	r3, r3, #16
 8002206:	2b10      	cmp	r3, #16
 8002208:	d161      	bne.n	80022ce <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699a      	ldr	r2, [r3, #24]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0210 	bic.w	r2, r2, #16
 8002218:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	f003 020f 	and.w	r2, r3, #15
 8002226:	4613      	mov	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	3304      	adds	r3, #4
 8002238:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	0c5b      	lsrs	r3, r3, #17
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	2b02      	cmp	r3, #2
 8002244:	d124      	bne.n	8002290 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d035      	beq.n	80022be <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	091b      	lsrs	r3, r3, #4
 800225a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800225c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002260:	b29b      	uxth	r3, r3
 8002262:	461a      	mov	r2, r3
 8002264:	6a38      	ldr	r0, [r7, #32]
 8002266:	f002 fe86 	bl	8004f76 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002276:	441a      	add	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	699a      	ldr	r2, [r3, #24]
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	091b      	lsrs	r3, r3, #4
 8002284:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002288:	441a      	add	r2, r3
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	619a      	str	r2, [r3, #24]
 800228e:	e016      	b.n	80022be <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	0c5b      	lsrs	r3, r3, #17
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	2b06      	cmp	r3, #6
 800229a:	d110      	bne.n	80022be <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022a2:	2208      	movs	r2, #8
 80022a4:	4619      	mov	r1, r3
 80022a6:	6a38      	ldr	r0, [r7, #32]
 80022a8:	f002 fe65 	bl	8004f76 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	699a      	ldr	r2, [r3, #24]
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	091b      	lsrs	r3, r3, #4
 80022b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022b8:	441a      	add	r2, r3
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	699a      	ldr	r2, [r3, #24]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f042 0210 	orr.w	r2, r2, #16
 80022cc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f002 ffe3 	bl	800529e <USB_ReadInterrupts>
 80022d8:	4603      	mov	r3, r0
 80022da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022e2:	d16e      	bne.n	80023c2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f002 ffe9 	bl	80052c4 <USB_ReadDevAllOutEpInterrupt>
 80022f2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80022f4:	e062      	b.n	80023bc <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80022f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d057      	beq.n	80023b0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	4611      	mov	r1, r2
 800230a:	4618      	mov	r0, r3
 800230c:	f003 f80e 	bl	800532c <USB_ReadDevOutEPInterrupt>
 8002310:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00c      	beq.n	8002336 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	4413      	add	r3, r2
 8002324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002328:	461a      	mov	r2, r3
 800232a:	2301      	movs	r3, #1
 800232c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800232e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 fdb1 	bl	8002e98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00c      	beq.n	800235a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	4413      	add	r3, r2
 8002348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800234c:	461a      	mov	r2, r3
 800234e:	2308      	movs	r3, #8
 8002350:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002352:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 feab 	bl	80030b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	f003 0310 	and.w	r3, r3, #16
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	4413      	add	r3, r2
 800236c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002370:	461a      	mov	r2, r3
 8002372:	2310      	movs	r3, #16
 8002374:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f003 0320 	and.w	r3, r3, #32
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	4413      	add	r3, r2
 8002388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800238c:	461a      	mov	r2, r3
 800238e:	2320      	movs	r3, #32
 8002390:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d009      	beq.n	80023b0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a8:	461a      	mov	r2, r3
 80023aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ae:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	3301      	adds	r3, #1
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b8:	085b      	lsrs	r3, r3, #1
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d199      	bne.n	80022f6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f002 ff69 	bl	800529e <USB_ReadInterrupts>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023d6:	f040 80c0 	bne.w	800255a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f002 ff8a 	bl	80052f8 <USB_ReadDevAllInEpInterrupt>
 80023e4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80023ea:	e0b2      	b.n	8002552 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80023ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 80a7 	beq.w	8002546 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	4611      	mov	r1, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f002 ffb0 	bl	8005368 <USB_ReadDevInEPInterrupt>
 8002408:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	d057      	beq.n	80024c4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	2201      	movs	r2, #1
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	43db      	mvns	r3, r3
 800242e:	69f9      	ldr	r1, [r7, #28]
 8002430:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002434:	4013      	ands	r3, r2
 8002436:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	4413      	add	r3, r2
 8002440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002444:	461a      	mov	r2, r3
 8002446:	2301      	movs	r3, #1
 8002448:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d132      	bne.n	80024b8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002456:	4613      	mov	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	1a9b      	subs	r3, r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	3348      	adds	r3, #72	; 0x48
 8002462:	6819      	ldr	r1, [r3, #0]
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002468:	4613      	mov	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4403      	add	r3, r0
 8002472:	3344      	adds	r3, #68	; 0x44
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4419      	add	r1, r3
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4403      	add	r3, r0
 8002486:	3348      	adds	r3, #72	; 0x48
 8002488:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	2b00      	cmp	r3, #0
 800248e:	d113      	bne.n	80024b8 <HAL_PCD_IRQHandler+0x31c>
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002494:	4613      	mov	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	3350      	adds	r3, #80	; 0x50
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d108      	bne.n	80024b8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024b0:	461a      	mov	r2, r3
 80024b2:	2101      	movs	r1, #1
 80024b4:	f002 ffb8 	bl	8005428 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	4619      	mov	r1, r3
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f004 ff11 	bl	80072e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d008      	beq.n	80024e0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024da:	461a      	mov	r2, r3
 80024dc:	2308      	movs	r3, #8
 80024de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d008      	beq.n	80024fc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024f6:	461a      	mov	r2, r3
 80024f8:	2310      	movs	r3, #16
 80024fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	d008      	beq.n	8002518 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	4413      	add	r3, r2
 800250e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002512:	461a      	mov	r2, r3
 8002514:	2340      	movs	r3, #64	; 0x40
 8002516:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d008      	beq.n	8002534 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	4413      	add	r3, r2
 800252a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800252e:	461a      	mov	r2, r3
 8002530:	2302      	movs	r3, #2
 8002532:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800253e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 fc1b 	bl	8002d7c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	3301      	adds	r3, #1
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254e:	085b      	lsrs	r3, r3, #1
 8002550:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002554:	2b00      	cmp	r3, #0
 8002556:	f47f af49 	bne.w	80023ec <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f002 fe9d 	bl	800529e <USB_ReadInterrupts>
 8002564:	4603      	mov	r3, r0
 8002566:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800256a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800256e:	d122      	bne.n	80025b6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	69fa      	ldr	r2, [r7, #28]
 800257a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800257e:	f023 0301 	bic.w	r3, r3, #1
 8002582:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800258a:	2b01      	cmp	r3, #1
 800258c:	d108      	bne.n	80025a0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002596:	2100      	movs	r1, #0
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 fe27 	bl	80031ec <HAL_PCDEx_LPM_Callback>
 800259e:	e002      	b.n	80025a6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f004 ff17 	bl	80073d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695a      	ldr	r2, [r3, #20]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80025b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f002 fe6f 	bl	800529e <USB_ReadInterrupts>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025ca:	d112      	bne.n	80025f2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d102      	bne.n	80025e2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f004 fed3 	bl	8007388 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695a      	ldr	r2, [r3, #20]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80025f0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f002 fe51 	bl	800529e <USB_ReadInterrupts>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002606:	f040 80c7 	bne.w	8002798 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002618:	f023 0301 	bic.w	r3, r3, #1
 800261c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2110      	movs	r1, #16
 8002624:	4618      	mov	r0, r3
 8002626:	f001 feeb 	bl	8004400 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800262a:	2300      	movs	r3, #0
 800262c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800262e:	e056      	b.n	80026de <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	4413      	add	r3, r2
 8002638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800263c:	461a      	mov	r2, r3
 800263e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002642:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	4413      	add	r3, r2
 800264c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002654:	0151      	lsls	r1, r2, #5
 8002656:	69fa      	ldr	r2, [r7, #28]
 8002658:	440a      	add	r2, r1
 800265a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800265e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002662:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	4413      	add	r3, r2
 800266c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002674:	0151      	lsls	r1, r2, #5
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	440a      	add	r2, r1
 800267a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800267e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002682:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	4413      	add	r3, r2
 800268c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002690:	461a      	mov	r2, r3
 8002692:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002696:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026a8:	0151      	lsls	r1, r2, #5
 80026aa:	69fa      	ldr	r2, [r7, #28]
 80026ac:	440a      	add	r2, r1
 80026ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026b6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80026b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026c8:	0151      	lsls	r1, r2, #5
 80026ca:	69fa      	ldr	r2, [r7, #28]
 80026cc:	440a      	add	r2, r1
 80026ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026d6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026da:	3301      	adds	r3, #1
 80026dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d3a3      	bcc.n	8002630 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	69fa      	ldr	r2, [r7, #28]
 80026f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026f6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80026fa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	2b00      	cmp	r3, #0
 8002702:	d016      	beq.n	8002732 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800270a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800270e:	69fa      	ldr	r2, [r7, #28]
 8002710:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002714:	f043 030b 	orr.w	r3, r3, #11
 8002718:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002724:	69fa      	ldr	r2, [r7, #28]
 8002726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800272a:	f043 030b 	orr.w	r3, r3, #11
 800272e:	6453      	str	r3, [r2, #68]	; 0x44
 8002730:	e015      	b.n	800275e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002740:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002744:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002748:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	69fa      	ldr	r2, [r7, #28]
 8002754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002758:	f043 030b 	orr.w	r3, r3, #11
 800275c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800276c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002770:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002782:	461a      	mov	r2, r3
 8002784:	f002 fe50 	bl	8005428 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695a      	ldr	r2, [r3, #20]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002796:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f002 fd7e 	bl	800529e <USB_ReadInterrupts>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ac:	d124      	bne.n	80027f8 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f002 fe14 	bl	80053e0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f001 fe7c 	bl	80044ba <USB_GetDevSpeed>
 80027c2:	4603      	mov	r3, r0
 80027c4:	461a      	mov	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681c      	ldr	r4, [r3, #0]
 80027ce:	f001 f959 	bl	8003a84 <HAL_RCC_GetHCLKFreq>
 80027d2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	4620      	mov	r0, r4
 80027de:	f001 fb9b 	bl	8003f18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f004 fda7 	bl	8007336 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80027f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f002 fd4e 	bl	800529e <USB_ReadInterrupts>
 8002802:	4603      	mov	r3, r0
 8002804:	f003 0308 	and.w	r3, r3, #8
 8002808:	2b08      	cmp	r3, #8
 800280a:	d10a      	bne.n	8002822 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f004 fd84 	bl	800731a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695a      	ldr	r2, [r3, #20]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f002 0208 	and.w	r2, r2, #8
 8002820:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f002 fd39 	bl	800529e <USB_ReadInterrupts>
 800282c:	4603      	mov	r3, r0
 800282e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002832:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002836:	d10f      	bne.n	8002858 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	b2db      	uxtb	r3, r3
 8002840:	4619      	mov	r1, r3
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f004 fde6 	bl	8007414 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695a      	ldr	r2, [r3, #20]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002856:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f002 fd1e 	bl	800529e <USB_ReadInterrupts>
 8002862:	4603      	mov	r3, r0
 8002864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002868:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800286c:	d10f      	bne.n	800288e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	b2db      	uxtb	r3, r3
 8002876:	4619      	mov	r1, r3
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f004 fdb9 	bl	80073f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695a      	ldr	r2, [r3, #20]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800288c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f002 fd03 	bl	800529e <USB_ReadInterrupts>
 8002898:	4603      	mov	r3, r0
 800289a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800289e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a2:	d10a      	bne.n	80028ba <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f004 fdc7 	bl	8007438 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695a      	ldr	r2, [r3, #20]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80028b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f002 fced 	bl	800529e <USB_ReadInterrupts>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d115      	bne.n	80028fa <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f004 fdb7 	bl	8007454 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6859      	ldr	r1, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	e000      	b.n	80028fa <HAL_PCD_IRQHandler+0x75e>
      return;
 80028f8:	bf00      	nop
    }
  }
}
 80028fa:	3734      	adds	r7, #52	; 0x34
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd90      	pop	{r4, r7, pc}

08002900 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_PCD_SetAddress+0x1a>
 8002916:	2302      	movs	r3, #2
 8002918:	e013      	b.n	8002942 <HAL_PCD_SetAddress+0x42>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	78fa      	ldrb	r2, [r7, #3]
 8002926:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	78fa      	ldrb	r2, [r7, #3]
 8002930:	4611      	mov	r1, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f002 fc4b 	bl	80051ce <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	4608      	mov	r0, r1
 8002954:	4611      	mov	r1, r2
 8002956:	461a      	mov	r2, r3
 8002958:	4603      	mov	r3, r0
 800295a:	70fb      	strb	r3, [r7, #3]
 800295c:	460b      	mov	r3, r1
 800295e:	803b      	strh	r3, [r7, #0]
 8002960:	4613      	mov	r3, r2
 8002962:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002968:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800296c:	2b00      	cmp	r3, #0
 800296e:	da0f      	bge.n	8002990 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	f003 020f 	and.w	r2, r3, #15
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	3338      	adds	r3, #56	; 0x38
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	4413      	add	r3, r2
 8002984:	3304      	adds	r3, #4
 8002986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2201      	movs	r2, #1
 800298c:	705a      	strb	r2, [r3, #1]
 800298e:	e00f      	b.n	80029b0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	f003 020f 	and.w	r2, r3, #15
 8002996:	4613      	mov	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	4413      	add	r3, r2
 80029a6:	3304      	adds	r3, #4
 80029a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029bc:	883a      	ldrh	r2, [r7, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	78ba      	ldrb	r2, [r7, #2]
 80029c6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	785b      	ldrb	r3, [r3, #1]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d004      	beq.n	80029da <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029da:	78bb      	ldrb	r3, [r7, #2]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d102      	bne.n	80029e6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_PCD_EP_Open+0xaa>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e00e      	b.n	8002a12 <HAL_PCD_EP_Open+0xc8>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68f9      	ldr	r1, [r7, #12]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f001 fd7e 	bl	8004504 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002a10:	7afb      	ldrb	r3, [r7, #11]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	460b      	mov	r3, r1
 8002a24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	da0f      	bge.n	8002a4e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a2e:	78fb      	ldrb	r3, [r7, #3]
 8002a30:	f003 020f 	and.w	r2, r3, #15
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	3338      	adds	r3, #56	; 0x38
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	4413      	add	r3, r2
 8002a42:	3304      	adds	r3, #4
 8002a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	705a      	strb	r2, [r3, #1]
 8002a4c:	e00f      	b.n	8002a6e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	f003 020f 	and.w	r2, r3, #15
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	4413      	add	r3, r2
 8002a64:	3304      	adds	r3, #4
 8002a66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	f003 030f 	and.w	r3, r3, #15
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_PCD_EP_Close+0x6e>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e00e      	b.n	8002aa6 <HAL_PCD_EP_Close+0x8c>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68f9      	ldr	r1, [r7, #12]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f001 fdbc 	bl	8004614 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b086      	sub	sp, #24
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	60f8      	str	r0, [r7, #12]
 8002ab6:	607a      	str	r2, [r7, #4]
 8002ab8:	603b      	str	r3, [r7, #0]
 8002aba:	460b      	mov	r3, r1
 8002abc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002abe:	7afb      	ldrb	r3, [r7, #11]
 8002ac0:	f003 020f 	and.w	r2, r3, #15
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2200      	movs	r2, #0
 8002aee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002af0:	7afb      	ldrb	r3, [r7, #11]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d102      	bne.n	8002b0a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b0a:	7afb      	ldrb	r3, [r7, #11]
 8002b0c:	f003 030f 	and.w	r3, r3, #15
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d109      	bne.n	8002b28 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6818      	ldr	r0, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	461a      	mov	r2, r3
 8002b20:	6979      	ldr	r1, [r7, #20]
 8002b22:	f002 f897 	bl	8004c54 <USB_EP0StartXfer>
 8002b26:	e008      	b.n	8002b3a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	6979      	ldr	r1, [r7, #20]
 8002b36:	f001 fe49 	bl	80047cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	f003 020f 	and.w	r2, r3, #15
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002b66:	681b      	ldr	r3, [r3, #0]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	607a      	str	r2, [r7, #4]
 8002b7e:	603b      	str	r3, [r7, #0]
 8002b80:	460b      	mov	r3, r1
 8002b82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b84:	7afb      	ldrb	r3, [r7, #11]
 8002b86:	f003 020f 	and.w	r2, r3, #15
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	1a9b      	subs	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	3338      	adds	r3, #56	; 0x38
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	4413      	add	r3, r2
 8002b98:	3304      	adds	r3, #4
 8002b9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	2200      	movs	r2, #0
 8002bac:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bb4:	7afb      	ldrb	r3, [r7, #11]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d102      	bne.n	8002bce <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bce:	7afb      	ldrb	r3, [r7, #11]
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d109      	bne.n	8002bec <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	6979      	ldr	r1, [r7, #20]
 8002be6:	f002 f835 	bl	8004c54 <USB_EP0StartXfer>
 8002bea:	e008      	b.n	8002bfe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	6979      	ldr	r1, [r7, #20]
 8002bfa:	f001 fde7 	bl	80047cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	f003 020f 	and.w	r2, r3, #15
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d901      	bls.n	8002c26 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e050      	b.n	8002cc8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	da0f      	bge.n	8002c4e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	f003 020f 	and.w	r2, r3, #15
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	1a9b      	subs	r3, r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	3338      	adds	r3, #56	; 0x38
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	4413      	add	r3, r2
 8002c42:	3304      	adds	r3, #4
 8002c44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	705a      	strb	r2, [r3, #1]
 8002c4c:	e00d      	b.n	8002c6a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c4e:	78fa      	ldrb	r2, [r7, #3]
 8002c50:	4613      	mov	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	4413      	add	r3, r2
 8002c60:	3304      	adds	r3, #4
 8002c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d101      	bne.n	8002c8a <HAL_PCD_EP_SetStall+0x82>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e01e      	b.n	8002cc8 <HAL_PCD_EP_SetStall+0xc0>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68f9      	ldr	r1, [r7, #12]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f002 f9c4 	bl	8005026 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c9e:	78fb      	ldrb	r3, [r7, #3]
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10a      	bne.n	8002cbe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	b2d9      	uxtb	r1, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cb8:	461a      	mov	r2, r3
 8002cba:	f002 fbb5 	bl	8005428 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	f003 020f 	and.w	r2, r3, #15
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d901      	bls.n	8002cee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e042      	b.n	8002d74 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	da0f      	bge.n	8002d16 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cf6:	78fb      	ldrb	r3, [r7, #3]
 8002cf8:	f003 020f 	and.w	r2, r3, #15
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	3338      	adds	r3, #56	; 0x38
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2201      	movs	r2, #1
 8002d12:	705a      	strb	r2, [r3, #1]
 8002d14:	e00f      	b.n	8002d36 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	f003 020f 	and.w	r2, r3, #15
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_PCD_EP_ClrStall+0x86>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e00e      	b.n	8002d74 <HAL_PCD_EP_ClrStall+0xa4>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68f9      	ldr	r1, [r7, #12]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f002 f9cc 	bl	8005102 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	; 0x28
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	4613      	mov	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	1a9b      	subs	r3, r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	3338      	adds	r3, #56	; 0x38
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	4413      	add	r3, r2
 8002da0:	3304      	adds	r3, #4
 8002da2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	699a      	ldr	r2, [r3, #24]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d901      	bls.n	8002db4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e06c      	b.n	8002e8e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	695a      	ldr	r2, [r3, #20]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	69fa      	ldr	r2, [r7, #28]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d902      	bls.n	8002dd0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	3303      	adds	r3, #3
 8002dd4:	089b      	lsrs	r3, r3, #2
 8002dd6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dd8:	e02b      	b.n	8002e32 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	69fa      	ldr	r2, [r7, #28]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d902      	bls.n	8002df6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3303      	adds	r3, #3
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	68d9      	ldr	r1, [r3, #12]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	4603      	mov	r3, r0
 8002e14:	6978      	ldr	r0, [r7, #20]
 8002e16:	f002 f870 	bl	8004efa <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	441a      	add	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	699a      	ldr	r2, [r3, #24]
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	441a      	add	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d809      	bhi.n	8002e5c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	699a      	ldr	r2, [r3, #24]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d203      	bcs.n	8002e5c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1be      	bne.n	8002dda <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d811      	bhi.n	8002e8c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	2201      	movs	r2, #1
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	6939      	ldr	r1, [r7, #16]
 8002e84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e88:	4013      	ands	r3, r2
 8002e8a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3720      	adds	r7, #32
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	333c      	adds	r3, #60	; 0x3c
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	f040 80a0 	bne.w	8003010 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d015      	beq.n	8002f06 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4a72      	ldr	r2, [pc, #456]	; (80030a8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	f240 80dd 	bls.w	800309e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 80d7 	beq.w	800309e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002efc:	461a      	mov	r2, r3
 8002efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f02:	6093      	str	r3, [r2, #8]
 8002f04:	e0cb      	b.n	800309e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d009      	beq.n	8002f24 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	2320      	movs	r3, #32
 8002f20:	6093      	str	r3, [r2, #8]
 8002f22:	e0bc      	b.n	800309e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f040 80b7 	bne.w	800309e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4a5d      	ldr	r2, [pc, #372]	; (80030a8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d90f      	bls.n	8002f58 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	015a      	lsls	r2, r3, #5
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f54:	6093      	str	r3, [r2, #8]
 8002f56:	e0a2      	b.n	800309e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f6a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	0159      	lsls	r1, r3, #5
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	440b      	add	r3, r1
 8002f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002f7e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	4613      	mov	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4403      	add	r3, r0
 8002f8e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002f92:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fa6:	6819      	ldr	r1, [r3, #0]
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4403      	add	r3, r0
 8002fb6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4419      	add	r1, r3
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4403      	add	r3, r0
 8002fcc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fd0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d114      	bne.n	8003002 <PCD_EP_OutXfrComplete_int+0x16a>
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d108      	bne.n	8003002 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6818      	ldr	r0, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	f002 fa13 	bl	8005428 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	4619      	mov	r1, r3
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f004 f951 	bl	80072b0 <HAL_PCD_DataOutStageCallback>
 800300e:	e046      	b.n	800309e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4a26      	ldr	r2, [pc, #152]	; (80030ac <PCD_EP_OutXfrComplete_int+0x214>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d124      	bne.n	8003062 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	015a      	lsls	r2, r3, #5
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4413      	add	r3, r2
 800302a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800302e:	461a      	mov	r2, r3
 8003030:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003034:	6093      	str	r3, [r2, #8]
 8003036:	e032      	b.n	800309e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	2b00      	cmp	r3, #0
 8003040:	d008      	beq.n	8003054 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4413      	add	r3, r2
 800304a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800304e:	461a      	mov	r2, r3
 8003050:	2320      	movs	r3, #32
 8003052:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	4619      	mov	r1, r3
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f004 f928 	bl	80072b0 <HAL_PCD_DataOutStageCallback>
 8003060:	e01d      	b.n	800309e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d114      	bne.n	8003092 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	4613      	mov	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	1a9b      	subs	r3, r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d108      	bne.n	8003092 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800308a:	461a      	mov	r2, r3
 800308c:	2100      	movs	r1, #0
 800308e:	f002 f9cb 	bl	8005428 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	b2db      	uxtb	r3, r3
 8003096:	4619      	mov	r1, r3
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f004 f909 	bl	80072b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	4f54300a 	.word	0x4f54300a
 80030ac:	4f54310a 	.word	0x4f54310a

080030b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	333c      	adds	r3, #60	; 0x3c
 80030c8:	3304      	adds	r3, #4
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4a15      	ldr	r2, [pc, #84]	; (8003138 <PCD_EP_OutSetupPacket_int+0x88>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d90e      	bls.n	8003104 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d009      	beq.n	8003104 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030fc:	461a      	mov	r2, r3
 80030fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003102:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f004 f8c1 	bl	800728c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <PCD_EP_OutSetupPacket_int+0x88>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d90c      	bls.n	800312c <PCD_EP_OutSetupPacket_int+0x7c>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d108      	bne.n	800312c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003124:	461a      	mov	r2, r3
 8003126:	2101      	movs	r1, #1
 8003128:	f002 f97e 	bl	8005428 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	4f54300a 	.word	0x4f54300a

0800313c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	70fb      	strb	r3, [r7, #3]
 8003148:	4613      	mov	r3, r2
 800314a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d107      	bne.n	800316a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800315a:	883b      	ldrh	r3, [r7, #0]
 800315c:	0419      	lsls	r1, r3, #16
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	430a      	orrs	r2, r1
 8003166:	629a      	str	r2, [r3, #40]	; 0x28
 8003168:	e028      	b.n	80031bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	0c1b      	lsrs	r3, r3, #16
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	4413      	add	r3, r2
 8003176:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003178:	2300      	movs	r3, #0
 800317a:	73fb      	strb	r3, [r7, #15]
 800317c:	e00d      	b.n	800319a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	3340      	adds	r3, #64	; 0x40
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	0c1b      	lsrs	r3, r3, #16
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	4413      	add	r3, r2
 8003192:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	3301      	adds	r3, #1
 8003198:	73fb      	strb	r3, [r7, #15]
 800319a:	7bfa      	ldrb	r2, [r7, #15]
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	3b01      	subs	r3, #1
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d3ec      	bcc.n	800317e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80031a4:	883b      	ldrh	r3, [r7, #0]
 80031a6:	0418      	lsls	r0, r3, #16
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6819      	ldr	r1, [r3, #0]
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	4302      	orrs	r2, r0
 80031b4:	3340      	adds	r3, #64	; 0x40
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	460b      	mov	r3, r1
 80031d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	887a      	ldrh	r2, [r7, #2]
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e264      	b.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d075      	beq.n	800330e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003222:	4ba3      	ldr	r3, [pc, #652]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b04      	cmp	r3, #4
 800322c:	d00c      	beq.n	8003248 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800322e:	4ba0      	ldr	r3, [pc, #640]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003236:	2b08      	cmp	r3, #8
 8003238:	d112      	bne.n	8003260 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800323a:	4b9d      	ldr	r3, [pc, #628]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003246:	d10b      	bne.n	8003260 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003248:	4b99      	ldr	r3, [pc, #612]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d05b      	beq.n	800330c <HAL_RCC_OscConfig+0x108>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d157      	bne.n	800330c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e23f      	b.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003268:	d106      	bne.n	8003278 <HAL_RCC_OscConfig+0x74>
 800326a:	4b91      	ldr	r3, [pc, #580]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a90      	ldr	r2, [pc, #576]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e01d      	b.n	80032b4 <HAL_RCC_OscConfig+0xb0>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003280:	d10c      	bne.n	800329c <HAL_RCC_OscConfig+0x98>
 8003282:	4b8b      	ldr	r3, [pc, #556]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a8a      	ldr	r2, [pc, #552]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	4b88      	ldr	r3, [pc, #544]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a87      	ldr	r2, [pc, #540]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e00b      	b.n	80032b4 <HAL_RCC_OscConfig+0xb0>
 800329c:	4b84      	ldr	r3, [pc, #528]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a83      	ldr	r2, [pc, #524]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 80032a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b81      	ldr	r3, [pc, #516]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a80      	ldr	r2, [pc, #512]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 80032ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d013      	beq.n	80032e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032bc:	f7fd fd42 	bl	8000d44 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c4:	f7fd fd3e 	bl	8000d44 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b64      	cmp	r3, #100	; 0x64
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e204      	b.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d6:	4b76      	ldr	r3, [pc, #472]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0xc0>
 80032e2:	e014      	b.n	800330e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7fd fd2e 	bl	8000d44 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ec:	f7fd fd2a 	bl	8000d44 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e1f0      	b.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fe:	4b6c      	ldr	r3, [pc, #432]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0xe8>
 800330a:	e000      	b.n	800330e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d063      	beq.n	80033e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800331a:	4b65      	ldr	r3, [pc, #404]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00b      	beq.n	800333e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003326:	4b62      	ldr	r3, [pc, #392]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800332e:	2b08      	cmp	r3, #8
 8003330:	d11c      	bne.n	800336c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003332:	4b5f      	ldr	r3, [pc, #380]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d116      	bne.n	800336c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333e:	4b5c      	ldr	r3, [pc, #368]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_RCC_OscConfig+0x152>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d001      	beq.n	8003356 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e1c4      	b.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003356:	4b56      	ldr	r3, [pc, #344]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4952      	ldr	r1, [pc, #328]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003366:	4313      	orrs	r3, r2
 8003368:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336a:	e03a      	b.n	80033e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d020      	beq.n	80033b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003374:	4b4f      	ldr	r3, [pc, #316]	; (80034b4 <HAL_RCC_OscConfig+0x2b0>)
 8003376:	2201      	movs	r2, #1
 8003378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7fd fce3 	bl	8000d44 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003382:	f7fd fcdf 	bl	8000d44 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e1a5      	b.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003394:	4b46      	ldr	r3, [pc, #280]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a0:	4b43      	ldr	r3, [pc, #268]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4940      	ldr	r1, [pc, #256]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	600b      	str	r3, [r1, #0]
 80033b4:	e015      	b.n	80033e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b6:	4b3f      	ldr	r3, [pc, #252]	; (80034b4 <HAL_RCC_OscConfig+0x2b0>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033bc:	f7fd fcc2 	bl	8000d44 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c4:	f7fd fcbe 	bl	8000d44 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e184      	b.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d6:	4b36      	ldr	r3, [pc, #216]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d030      	beq.n	8003450 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d016      	beq.n	8003424 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f6:	4b30      	ldr	r3, [pc, #192]	; (80034b8 <HAL_RCC_OscConfig+0x2b4>)
 80033f8:	2201      	movs	r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fc:	f7fd fca2 	bl	8000d44 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003404:	f7fd fc9e 	bl	8000d44 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e164      	b.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003416:	4b26      	ldr	r3, [pc, #152]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x200>
 8003422:	e015      	b.n	8003450 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003424:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <HAL_RCC_OscConfig+0x2b4>)
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342a:	f7fd fc8b 	bl	8000d44 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003432:	f7fd fc87 	bl	8000d44 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e14d      	b.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003444:	4b1a      	ldr	r3, [pc, #104]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1f0      	bne.n	8003432 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80a0 	beq.w	800359e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800345e:	2300      	movs	r3, #0
 8003460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003462:	4b13      	ldr	r3, [pc, #76]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10f      	bne.n	800348e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	4a0e      	ldr	r2, [pc, #56]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800347c:	6413      	str	r3, [r2, #64]	; 0x40
 800347e:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800348a:	2301      	movs	r3, #1
 800348c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348e:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <HAL_RCC_OscConfig+0x2b8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003496:	2b00      	cmp	r3, #0
 8003498:	d121      	bne.n	80034de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800349a:	4b08      	ldr	r3, [pc, #32]	; (80034bc <HAL_RCC_OscConfig+0x2b8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a07      	ldr	r2, [pc, #28]	; (80034bc <HAL_RCC_OscConfig+0x2b8>)
 80034a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034a6:	f7fd fc4d 	bl	8000d44 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ac:	e011      	b.n	80034d2 <HAL_RCC_OscConfig+0x2ce>
 80034ae:	bf00      	nop
 80034b0:	40023800 	.word	0x40023800
 80034b4:	42470000 	.word	0x42470000
 80034b8:	42470e80 	.word	0x42470e80
 80034bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c0:	f7fd fc40 	bl	8000d44 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e106      	b.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d2:	4b85      	ldr	r3, [pc, #532]	; (80036e8 <HAL_RCC_OscConfig+0x4e4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d106      	bne.n	80034f4 <HAL_RCC_OscConfig+0x2f0>
 80034e6:	4b81      	ldr	r3, [pc, #516]	; (80036ec <HAL_RCC_OscConfig+0x4e8>)
 80034e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ea:	4a80      	ldr	r2, [pc, #512]	; (80036ec <HAL_RCC_OscConfig+0x4e8>)
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	6713      	str	r3, [r2, #112]	; 0x70
 80034f2:	e01c      	b.n	800352e <HAL_RCC_OscConfig+0x32a>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b05      	cmp	r3, #5
 80034fa:	d10c      	bne.n	8003516 <HAL_RCC_OscConfig+0x312>
 80034fc:	4b7b      	ldr	r3, [pc, #492]	; (80036ec <HAL_RCC_OscConfig+0x4e8>)
 80034fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003500:	4a7a      	ldr	r2, [pc, #488]	; (80036ec <HAL_RCC_OscConfig+0x4e8>)
 8003502:	f043 0304 	orr.w	r3, r3, #4
 8003506:	6713      	str	r3, [r2, #112]	; 0x70
 8003508:	4b78      	ldr	r3, [pc, #480]	; (80036ec <HAL_RCC_OscConfig+0x4e8>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350c:	4a77      	ldr	r2, [pc, #476]	; (80036ec <HAL_RCC_OscConfig+0x4e8>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	6713      	str	r3, [r2, #112]	; 0x70
 8003514:	e00b      	b.n	800352e <HAL_RCC_OscConfig+0x32a>
 8003516:	4b75      	ldr	r3, [pc, #468]	; (80036ec <HAL_RCC_OscConfig+0x4e8>)
 8003518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351a:	4a74      	ldr	r2, [pc, #464]	; (80036ec <HAL_RCC_OscConfig+0x4e8>)
 800351c:	f023 0301 	bic.w	r3, r3, #1
 8003520:	6713      	str	r3, [r2, #112]	; 0x70
 8003522:	4b72      	ldr	r3, [pc, #456]	; (80036ec <HAL_RCC_OscConfig+0x4e8>)
 8003524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003526:	4a71      	ldr	r2, [pc, #452]	; (80036ec <HAL_RCC_OscConfig+0x4e8>)
 8003528:	f023 0304 	bic.w	r3, r3, #4
 800352c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d015      	beq.n	8003562 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003536:	f7fd fc05 	bl	8000d44 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353c:	e00a      	b.n	8003554 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800353e:	f7fd fc01 	bl	8000d44 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	f241 3288 	movw	r2, #5000	; 0x1388
 800354c:	4293      	cmp	r3, r2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e0c5      	b.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003554:	4b65      	ldr	r3, [pc, #404]	; (80036ec <HAL_RCC_OscConfig+0x4e8>)
 8003556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0ee      	beq.n	800353e <HAL_RCC_OscConfig+0x33a>
 8003560:	e014      	b.n	800358c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003562:	f7fd fbef 	bl	8000d44 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003568:	e00a      	b.n	8003580 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800356a:	f7fd fbeb 	bl	8000d44 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	f241 3288 	movw	r2, #5000	; 0x1388
 8003578:	4293      	cmp	r3, r2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e0af      	b.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003580:	4b5a      	ldr	r3, [pc, #360]	; (80036ec <HAL_RCC_OscConfig+0x4e8>)
 8003582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1ee      	bne.n	800356a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800358c:	7dfb      	ldrb	r3, [r7, #23]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d105      	bne.n	800359e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003592:	4b56      	ldr	r3, [pc, #344]	; (80036ec <HAL_RCC_OscConfig+0x4e8>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	4a55      	ldr	r2, [pc, #340]	; (80036ec <HAL_RCC_OscConfig+0x4e8>)
 8003598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 809b 	beq.w	80036de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035a8:	4b50      	ldr	r3, [pc, #320]	; (80036ec <HAL_RCC_OscConfig+0x4e8>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 030c 	and.w	r3, r3, #12
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d05c      	beq.n	800366e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d141      	bne.n	8003640 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035bc:	4b4c      	ldr	r3, [pc, #304]	; (80036f0 <HAL_RCC_OscConfig+0x4ec>)
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c2:	f7fd fbbf 	bl	8000d44 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ca:	f7fd fbbb 	bl	8000d44 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e081      	b.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035dc:	4b43      	ldr	r3, [pc, #268]	; (80036ec <HAL_RCC_OscConfig+0x4e8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f0      	bne.n	80035ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69da      	ldr	r2, [r3, #28]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	019b      	lsls	r3, r3, #6
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	085b      	lsrs	r3, r3, #1
 8003600:	3b01      	subs	r3, #1
 8003602:	041b      	lsls	r3, r3, #16
 8003604:	431a      	orrs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	061b      	lsls	r3, r3, #24
 800360c:	4937      	ldr	r1, [pc, #220]	; (80036ec <HAL_RCC_OscConfig+0x4e8>)
 800360e:	4313      	orrs	r3, r2
 8003610:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003612:	4b37      	ldr	r3, [pc, #220]	; (80036f0 <HAL_RCC_OscConfig+0x4ec>)
 8003614:	2201      	movs	r2, #1
 8003616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003618:	f7fd fb94 	bl	8000d44 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003620:	f7fd fb90 	bl	8000d44 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e056      	b.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003632:	4b2e      	ldr	r3, [pc, #184]	; (80036ec <HAL_RCC_OscConfig+0x4e8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0f0      	beq.n	8003620 <HAL_RCC_OscConfig+0x41c>
 800363e:	e04e      	b.n	80036de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003640:	4b2b      	ldr	r3, [pc, #172]	; (80036f0 <HAL_RCC_OscConfig+0x4ec>)
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003646:	f7fd fb7d 	bl	8000d44 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364e:	f7fd fb79 	bl	8000d44 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e03f      	b.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003660:	4b22      	ldr	r3, [pc, #136]	; (80036ec <HAL_RCC_OscConfig+0x4e8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1f0      	bne.n	800364e <HAL_RCC_OscConfig+0x44a>
 800366c:	e037      	b.n	80036de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e032      	b.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800367a:	4b1c      	ldr	r3, [pc, #112]	; (80036ec <HAL_RCC_OscConfig+0x4e8>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d028      	beq.n	80036da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003692:	429a      	cmp	r2, r3
 8003694:	d121      	bne.n	80036da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d11a      	bne.n	80036da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036aa:	4013      	ands	r3, r2
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d111      	bne.n	80036da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c0:	085b      	lsrs	r3, r3, #1
 80036c2:	3b01      	subs	r3, #1
 80036c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d107      	bne.n	80036da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d001      	beq.n	80036de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40007000 	.word	0x40007000
 80036ec:	40023800 	.word	0x40023800
 80036f0:	42470060 	.word	0x42470060

080036f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0cc      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003708:	4b68      	ldr	r3, [pc, #416]	; (80038ac <HAL_RCC_ClockConfig+0x1b8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d90c      	bls.n	8003730 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003716:	4b65      	ldr	r3, [pc, #404]	; (80038ac <HAL_RCC_ClockConfig+0x1b8>)
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800371e:	4b63      	ldr	r3, [pc, #396]	; (80038ac <HAL_RCC_ClockConfig+0x1b8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d001      	beq.n	8003730 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0b8      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d020      	beq.n	800377e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003748:	4b59      	ldr	r3, [pc, #356]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	4a58      	ldr	r2, [pc, #352]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003752:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003760:	4b53      	ldr	r3, [pc, #332]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	4a52      	ldr	r2, [pc, #328]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800376a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800376c:	4b50      	ldr	r3, [pc, #320]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	494d      	ldr	r1, [pc, #308]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	4313      	orrs	r3, r2
 800377c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d044      	beq.n	8003814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d107      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003792:	4b47      	ldr	r3, [pc, #284]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d119      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e07f      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d003      	beq.n	80037b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ae:	2b03      	cmp	r3, #3
 80037b0:	d107      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b2:	4b3f      	ldr	r3, [pc, #252]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d109      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e06f      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c2:	4b3b      	ldr	r3, [pc, #236]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e067      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037d2:	4b37      	ldr	r3, [pc, #220]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f023 0203 	bic.w	r2, r3, #3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	4934      	ldr	r1, [pc, #208]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037e4:	f7fd faae 	bl	8000d44 <HAL_GetTick>
 80037e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ea:	e00a      	b.n	8003802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ec:	f7fd faaa 	bl	8000d44 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e04f      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003802:	4b2b      	ldr	r3, [pc, #172]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 020c 	and.w	r2, r3, #12
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	429a      	cmp	r2, r3
 8003812:	d1eb      	bne.n	80037ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003814:	4b25      	ldr	r3, [pc, #148]	; (80038ac <HAL_RCC_ClockConfig+0x1b8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d20c      	bcs.n	800383c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003822:	4b22      	ldr	r3, [pc, #136]	; (80038ac <HAL_RCC_ClockConfig+0x1b8>)
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800382a:	4b20      	ldr	r3, [pc, #128]	; (80038ac <HAL_RCC_ClockConfig+0x1b8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d001      	beq.n	800383c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e032      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003848:	4b19      	ldr	r3, [pc, #100]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	4916      	ldr	r1, [pc, #88]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	4313      	orrs	r3, r2
 8003858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d009      	beq.n	800387a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003866:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	490e      	ldr	r1, [pc, #56]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	4313      	orrs	r3, r2
 8003878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800387a:	f000 f821 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 800387e:	4602      	mov	r2, r0
 8003880:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	490a      	ldr	r1, [pc, #40]	; (80038b4 <HAL_RCC_ClockConfig+0x1c0>)
 800388c:	5ccb      	ldrb	r3, [r1, r3]
 800388e:	fa22 f303 	lsr.w	r3, r2, r3
 8003892:	4a09      	ldr	r2, [pc, #36]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003896:	4b09      	ldr	r3, [pc, #36]	; (80038bc <HAL_RCC_ClockConfig+0x1c8>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7fd fa0e 	bl	8000cbc <HAL_InitTick>

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40023c00 	.word	0x40023c00
 80038b0:	40023800 	.word	0x40023800
 80038b4:	080078c4 	.word	0x080078c4
 80038b8:	20000000 	.word	0x20000000
 80038bc:	20000004 	.word	0x20000004

080038c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038c4:	b084      	sub	sp, #16
 80038c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	607b      	str	r3, [r7, #4]
 80038cc:	2300      	movs	r3, #0
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	2300      	movs	r3, #0
 80038d2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038d8:	4b67      	ldr	r3, [pc, #412]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 030c 	and.w	r3, r3, #12
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d00d      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0x40>
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	f200 80bd 	bhi.w	8003a64 <HAL_RCC_GetSysClockFreq+0x1a4>
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <HAL_RCC_GetSysClockFreq+0x34>
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d003      	beq.n	80038fa <HAL_RCC_GetSysClockFreq+0x3a>
 80038f2:	e0b7      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038f4:	4b61      	ldr	r3, [pc, #388]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80038f6:	60bb      	str	r3, [r7, #8]
       break;
 80038f8:	e0b7      	b.n	8003a6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038fa:	4b61      	ldr	r3, [pc, #388]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80038fc:	60bb      	str	r3, [r7, #8]
      break;
 80038fe:	e0b4      	b.n	8003a6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003900:	4b5d      	ldr	r3, [pc, #372]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003908:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800390a:	4b5b      	ldr	r3, [pc, #364]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d04d      	beq.n	80039b2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003916:	4b58      	ldr	r3, [pc, #352]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	099b      	lsrs	r3, r3, #6
 800391c:	461a      	mov	r2, r3
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003926:	f04f 0100 	mov.w	r1, #0
 800392a:	ea02 0800 	and.w	r8, r2, r0
 800392e:	ea03 0901 	and.w	r9, r3, r1
 8003932:	4640      	mov	r0, r8
 8003934:	4649      	mov	r1, r9
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	014b      	lsls	r3, r1, #5
 8003940:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003944:	0142      	lsls	r2, r0, #5
 8003946:	4610      	mov	r0, r2
 8003948:	4619      	mov	r1, r3
 800394a:	ebb0 0008 	subs.w	r0, r0, r8
 800394e:	eb61 0109 	sbc.w	r1, r1, r9
 8003952:	f04f 0200 	mov.w	r2, #0
 8003956:	f04f 0300 	mov.w	r3, #0
 800395a:	018b      	lsls	r3, r1, #6
 800395c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003960:	0182      	lsls	r2, r0, #6
 8003962:	1a12      	subs	r2, r2, r0
 8003964:	eb63 0301 	sbc.w	r3, r3, r1
 8003968:	f04f 0000 	mov.w	r0, #0
 800396c:	f04f 0100 	mov.w	r1, #0
 8003970:	00d9      	lsls	r1, r3, #3
 8003972:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003976:	00d0      	lsls	r0, r2, #3
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	eb12 0208 	adds.w	r2, r2, r8
 8003980:	eb43 0309 	adc.w	r3, r3, r9
 8003984:	f04f 0000 	mov.w	r0, #0
 8003988:	f04f 0100 	mov.w	r1, #0
 800398c:	0259      	lsls	r1, r3, #9
 800398e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003992:	0250      	lsls	r0, r2, #9
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4610      	mov	r0, r2
 800399a:	4619      	mov	r1, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	461a      	mov	r2, r3
 80039a0:	f04f 0300 	mov.w	r3, #0
 80039a4:	f7fc fc10 	bl	80001c8 <__aeabi_uldivmod>
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	4613      	mov	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	e04a      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b2:	4b31      	ldr	r3, [pc, #196]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	099b      	lsrs	r3, r3, #6
 80039b8:	461a      	mov	r2, r3
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039c2:	f04f 0100 	mov.w	r1, #0
 80039c6:	ea02 0400 	and.w	r4, r2, r0
 80039ca:	ea03 0501 	and.w	r5, r3, r1
 80039ce:	4620      	mov	r0, r4
 80039d0:	4629      	mov	r1, r5
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	014b      	lsls	r3, r1, #5
 80039dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039e0:	0142      	lsls	r2, r0, #5
 80039e2:	4610      	mov	r0, r2
 80039e4:	4619      	mov	r1, r3
 80039e6:	1b00      	subs	r0, r0, r4
 80039e8:	eb61 0105 	sbc.w	r1, r1, r5
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	018b      	lsls	r3, r1, #6
 80039f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039fa:	0182      	lsls	r2, r0, #6
 80039fc:	1a12      	subs	r2, r2, r0
 80039fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003a02:	f04f 0000 	mov.w	r0, #0
 8003a06:	f04f 0100 	mov.w	r1, #0
 8003a0a:	00d9      	lsls	r1, r3, #3
 8003a0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a10:	00d0      	lsls	r0, r2, #3
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	1912      	adds	r2, r2, r4
 8003a18:	eb45 0303 	adc.w	r3, r5, r3
 8003a1c:	f04f 0000 	mov.w	r0, #0
 8003a20:	f04f 0100 	mov.w	r1, #0
 8003a24:	0299      	lsls	r1, r3, #10
 8003a26:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a2a:	0290      	lsls	r0, r2, #10
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4610      	mov	r0, r2
 8003a32:	4619      	mov	r1, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	461a      	mov	r2, r3
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	f7fc fbc4 	bl	80001c8 <__aeabi_uldivmod>
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	4613      	mov	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	0c1b      	lsrs	r3, r3, #16
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	3301      	adds	r3, #1
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a60:	60bb      	str	r3, [r7, #8]
      break;
 8003a62:	e002      	b.n	8003a6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a64:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a66:	60bb      	str	r3, [r7, #8]
      break;
 8003a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a76:	bf00      	nop
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	00f42400 	.word	0x00f42400
 8003a80:	007a1200 	.word	0x007a1200

08003a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a88:	4b03      	ldr	r3, [pc, #12]	; (8003a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	20000000 	.word	0x20000000

08003a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003aa0:	f7ff fff0 	bl	8003a84 <HAL_RCC_GetHCLKFreq>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	0a9b      	lsrs	r3, r3, #10
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	4903      	ldr	r1, [pc, #12]	; (8003ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ab2:	5ccb      	ldrb	r3, [r1, r3]
 8003ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	080078d4 	.word	0x080078d4

08003ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d105      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d035      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003aec:	4b62      	ldr	r3, [pc, #392]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003af2:	f7fd f927 	bl	8000d44 <HAL_GetTick>
 8003af6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003afa:	f7fd f923 	bl	8000d44 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e0b0      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b0c:	4b5b      	ldr	r3, [pc, #364]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f0      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	019a      	lsls	r2, r3, #6
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	071b      	lsls	r3, r3, #28
 8003b24:	4955      	ldr	r1, [pc, #340]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b2c:	4b52      	ldr	r3, [pc, #328]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b32:	f7fd f907 	bl	8000d44 <HAL_GetTick>
 8003b36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b38:	e008      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b3a:	f7fd f903 	bl	8000d44 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e090      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b4c:	4b4b      	ldr	r3, [pc, #300]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0f0      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8083 	beq.w	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	4b44      	ldr	r3, [pc, #272]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	4a43      	ldr	r2, [pc, #268]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b74:	6413      	str	r3, [r2, #64]	; 0x40
 8003b76:	4b41      	ldr	r3, [pc, #260]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b82:	4b3f      	ldr	r3, [pc, #252]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a3e      	ldr	r2, [pc, #248]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b8e:	f7fd f8d9 	bl	8000d44 <HAL_GetTick>
 8003b92:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b96:	f7fd f8d5 	bl	8000d44 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e062      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ba8:	4b35      	ldr	r3, [pc, #212]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bb4:	4b31      	ldr	r3, [pc, #196]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bbc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d02f      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d028      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bd2:	4b2a      	ldr	r3, [pc, #168]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bda:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bdc:	4b29      	ldr	r3, [pc, #164]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003bde:	2201      	movs	r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003be2:	4b28      	ldr	r3, [pc, #160]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003be8:	4a24      	ldr	r2, [pc, #144]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003bee:	4b23      	ldr	r3, [pc, #140]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d114      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003bfa:	f7fd f8a3 	bl	8000d44 <HAL_GetTick>
 8003bfe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c00:	e00a      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c02:	f7fd f89f 	bl	8000d44 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e02a      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c18:	4b18      	ldr	r3, [pc, #96]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0ee      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c30:	d10d      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003c32:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c46:	490d      	ldr	r1, [pc, #52]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	608b      	str	r3, [r1, #8]
 8003c4c:	e005      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003c4e:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	4a0a      	ldr	r2, [pc, #40]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c54:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c58:	6093      	str	r3, [r2, #8]
 8003c5a:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c66:	4905      	ldr	r1, [pc, #20]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	42470068 	.word	0x42470068
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40007000 	.word	0x40007000
 8003c84:	42470e40 	.word	0x42470e40

08003c88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d13e      	bne.n	8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003ca6:	4b23      	ldr	r3, [pc, #140]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d12f      	bne.n	8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003cbc:	4b1e      	ldr	r3, [pc, #120]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003cbe:	617b      	str	r3, [r7, #20]
          break;
 8003cc0:	e02f      	b.n	8003d22 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003cc2:	4b1c      	ldr	r3, [pc, #112]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cce:	d108      	bne.n	8003ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003cd0:	4b18      	ldr	r3, [pc, #96]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cd8:	4a18      	ldr	r2, [pc, #96]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	e007      	b.n	8003cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ce2:	4b14      	ldr	r3, [pc, #80]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cea:	4a15      	ldr	r2, [pc, #84]	; (8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003cf2:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf8:	099b      	lsrs	r3, r3, #6
 8003cfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	fb02 f303 	mul.w	r3, r2, r3
 8003d04:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003d06:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d0c:	0f1b      	lsrs	r3, r3, #28
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d18:	617b      	str	r3, [r7, #20]
          break;
 8003d1a:	e002      	b.n	8003d22 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]
          break;
 8003d20:	bf00      	nop
        }
      }
      break;
 8003d22:	bf00      	nop
    }
  }
  return frequency;
 8003d24:	697b      	ldr	r3, [r7, #20]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	371c      	adds	r7, #28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40023800 	.word	0x40023800
 8003d38:	00bb8000 	.word	0x00bb8000
 8003d3c:	007a1200 	.word	0x007a1200
 8003d40:	00f42400 	.word	0x00f42400

08003d44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e07b      	b.n	8003e4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d108      	bne.n	8003d70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d66:	d009      	beq.n	8003d7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	61da      	str	r2, [r3, #28]
 8003d6e:	e005      	b.n	8003d7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7fc feb6 	bl	8000b08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003db2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dec:	431a      	orrs	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e00:	ea42 0103 	orr.w	r1, r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	0c1b      	lsrs	r3, r3, #16
 8003e1a:	f003 0104 	and.w	r1, r3, #4
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	f003 0210 	and.w	r2, r3, #16
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	69da      	ldr	r2, [r3, #28]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e56:	b084      	sub	sp, #16
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	f107 001c 	add.w	r0, r7, #28
 8003e64:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d122      	bne.n	8003eb4 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003e82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d105      	bne.n	8003ea8 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f001 fb1b 	bl	80054e4 <USB_CoreReset>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	73fb      	strb	r3, [r7, #15]
 8003eb2:	e01a      	b.n	8003eea <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f001 fb0f 	bl	80054e4 <USB_CoreReset>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d106      	bne.n	8003ede <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	639a      	str	r2, [r3, #56]	; 0x38
 8003edc:	e005      	b.n	8003eea <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d10b      	bne.n	8003f08 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f043 0206 	orr.w	r2, r3, #6
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f043 0220 	orr.w	r2, r3, #32
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f14:	b004      	add	sp, #16
 8003f16:	4770      	bx	lr

08003f18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	4613      	mov	r3, r2
 8003f24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003f26:	79fb      	ldrb	r3, [r7, #7]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d165      	bne.n	8003ff8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4a41      	ldr	r2, [pc, #260]	; (8004034 <USB_SetTurnaroundTime+0x11c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d906      	bls.n	8003f42 <USB_SetTurnaroundTime+0x2a>
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	4a40      	ldr	r2, [pc, #256]	; (8004038 <USB_SetTurnaroundTime+0x120>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d202      	bcs.n	8003f42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003f3c:	230f      	movs	r3, #15
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	e062      	b.n	8004008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	4a3c      	ldr	r2, [pc, #240]	; (8004038 <USB_SetTurnaroundTime+0x120>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d306      	bcc.n	8003f58 <USB_SetTurnaroundTime+0x40>
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	4a3b      	ldr	r2, [pc, #236]	; (800403c <USB_SetTurnaroundTime+0x124>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d202      	bcs.n	8003f58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003f52:	230e      	movs	r3, #14
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	e057      	b.n	8004008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	4a38      	ldr	r2, [pc, #224]	; (800403c <USB_SetTurnaroundTime+0x124>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d306      	bcc.n	8003f6e <USB_SetTurnaroundTime+0x56>
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4a37      	ldr	r2, [pc, #220]	; (8004040 <USB_SetTurnaroundTime+0x128>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d202      	bcs.n	8003f6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003f68:	230d      	movs	r3, #13
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	e04c      	b.n	8004008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	4a33      	ldr	r2, [pc, #204]	; (8004040 <USB_SetTurnaroundTime+0x128>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d306      	bcc.n	8003f84 <USB_SetTurnaroundTime+0x6c>
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	4a32      	ldr	r2, [pc, #200]	; (8004044 <USB_SetTurnaroundTime+0x12c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d802      	bhi.n	8003f84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003f7e:	230c      	movs	r3, #12
 8003f80:	617b      	str	r3, [r7, #20]
 8003f82:	e041      	b.n	8004008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	4a2f      	ldr	r2, [pc, #188]	; (8004044 <USB_SetTurnaroundTime+0x12c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d906      	bls.n	8003f9a <USB_SetTurnaroundTime+0x82>
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	4a2e      	ldr	r2, [pc, #184]	; (8004048 <USB_SetTurnaroundTime+0x130>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d802      	bhi.n	8003f9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003f94:	230b      	movs	r3, #11
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	e036      	b.n	8004008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	4a2a      	ldr	r2, [pc, #168]	; (8004048 <USB_SetTurnaroundTime+0x130>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d906      	bls.n	8003fb0 <USB_SetTurnaroundTime+0x98>
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	4a29      	ldr	r2, [pc, #164]	; (800404c <USB_SetTurnaroundTime+0x134>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d802      	bhi.n	8003fb0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003faa:	230a      	movs	r3, #10
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	e02b      	b.n	8004008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	4a26      	ldr	r2, [pc, #152]	; (800404c <USB_SetTurnaroundTime+0x134>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d906      	bls.n	8003fc6 <USB_SetTurnaroundTime+0xae>
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	4a25      	ldr	r2, [pc, #148]	; (8004050 <USB_SetTurnaroundTime+0x138>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d202      	bcs.n	8003fc6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003fc0:	2309      	movs	r3, #9
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	e020      	b.n	8004008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	4a21      	ldr	r2, [pc, #132]	; (8004050 <USB_SetTurnaroundTime+0x138>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d306      	bcc.n	8003fdc <USB_SetTurnaroundTime+0xc4>
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	4a20      	ldr	r2, [pc, #128]	; (8004054 <USB_SetTurnaroundTime+0x13c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d802      	bhi.n	8003fdc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003fd6:	2308      	movs	r3, #8
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	e015      	b.n	8004008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4a1d      	ldr	r2, [pc, #116]	; (8004054 <USB_SetTurnaroundTime+0x13c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d906      	bls.n	8003ff2 <USB_SetTurnaroundTime+0xda>
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4a1c      	ldr	r2, [pc, #112]	; (8004058 <USB_SetTurnaroundTime+0x140>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d202      	bcs.n	8003ff2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003fec:	2307      	movs	r3, #7
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	e00a      	b.n	8004008 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003ff2:	2306      	movs	r3, #6
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	e007      	b.n	8004008 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d102      	bne.n	8004004 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003ffe:	2309      	movs	r3, #9
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	e001      	b.n	8004008 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004004:	2309      	movs	r3, #9
 8004006:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	029b      	lsls	r3, r3, #10
 800401c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004020:	431a      	orrs	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	371c      	adds	r7, #28
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	00d8acbf 	.word	0x00d8acbf
 8004038:	00e4e1c0 	.word	0x00e4e1c0
 800403c:	00f42400 	.word	0x00f42400
 8004040:	01067380 	.word	0x01067380
 8004044:	011a499f 	.word	0x011a499f
 8004048:	01312cff 	.word	0x01312cff
 800404c:	014ca43f 	.word	0x014ca43f
 8004050:	016e3600 	.word	0x016e3600
 8004054:	01a6ab1f 	.word	0x01a6ab1f
 8004058:	01e84800 	.word	0x01e84800

0800405c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f043 0201 	orr.w	r2, r3, #1
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f023 0201 	bic.w	r2, r3, #1
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d115      	bne.n	80040ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80040ce:	2001      	movs	r0, #1
 80040d0:	f7fc fe44 	bl	8000d5c <HAL_Delay>
      ms++;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	3301      	adds	r3, #1
 80040d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f001 f972 	bl	80053c4 <USB_GetMode>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d01e      	beq.n	8004124 <USB_SetCurrentMode+0x84>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2b31      	cmp	r3, #49	; 0x31
 80040ea:	d9f0      	bls.n	80040ce <USB_SetCurrentMode+0x2e>
 80040ec:	e01a      	b.n	8004124 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80040ee:	78fb      	ldrb	r3, [r7, #3]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d115      	bne.n	8004120 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004100:	2001      	movs	r0, #1
 8004102:	f7fc fe2b 	bl	8000d5c <HAL_Delay>
      ms++;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	3301      	adds	r3, #1
 800410a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f001 f959 	bl	80053c4 <USB_GetMode>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <USB_SetCurrentMode+0x84>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b31      	cmp	r3, #49	; 0x31
 800411c:	d9f0      	bls.n	8004100 <USB_SetCurrentMode+0x60>
 800411e:	e001      	b.n	8004124 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e005      	b.n	8004130 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2b32      	cmp	r3, #50	; 0x32
 8004128:	d101      	bne.n	800412e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004138:	b084      	sub	sp, #16
 800413a:	b580      	push	{r7, lr}
 800413c:	b086      	sub	sp, #24
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	e009      	b.n	800416c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	3340      	adds	r3, #64	; 0x40
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	2200      	movs	r2, #0
 8004164:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	3301      	adds	r3, #1
 800416a:	613b      	str	r3, [r7, #16]
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	2b0e      	cmp	r3, #14
 8004170:	d9f2      	bls.n	8004158 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004174:	2b00      	cmp	r3, #0
 8004176:	d11c      	bne.n	80041b2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004186:	f043 0302 	orr.w	r3, r3, #2
 800418a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	639a      	str	r2, [r3, #56]	; 0x38
 80041b0:	e00b      	b.n	80041ca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041d0:	461a      	mov	r2, r3
 80041d2:	2300      	movs	r3, #0
 80041d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041dc:	4619      	mov	r1, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e4:	461a      	mov	r2, r3
 80041e6:	680b      	ldr	r3, [r1, #0]
 80041e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d10c      	bne.n	800420a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80041f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d104      	bne.n	8004200 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80041f6:	2100      	movs	r1, #0
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f945 	bl	8004488 <USB_SetDevSpeed>
 80041fe:	e008      	b.n	8004212 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004200:	2101      	movs	r1, #1
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f940 	bl	8004488 <USB_SetDevSpeed>
 8004208:	e003      	b.n	8004212 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800420a:	2103      	movs	r1, #3
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f93b 	bl	8004488 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004212:	2110      	movs	r1, #16
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f8f3 	bl	8004400 <USB_FlushTxFifo>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f90f 	bl	8004448 <USB_FlushRxFifo>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423a:	461a      	mov	r2, r3
 800423c:	2300      	movs	r3, #0
 800423e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004246:	461a      	mov	r2, r3
 8004248:	2300      	movs	r3, #0
 800424a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004252:	461a      	mov	r2, r3
 8004254:	2300      	movs	r3, #0
 8004256:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004258:	2300      	movs	r3, #0
 800425a:	613b      	str	r3, [r7, #16]
 800425c:	e043      	b.n	80042e6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4413      	add	r3, r2
 8004266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004270:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004274:	d118      	bne.n	80042a8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10a      	bne.n	8004292 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004288:	461a      	mov	r2, r3
 800428a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	e013      	b.n	80042ba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429e:	461a      	mov	r2, r3
 80042a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	e008      	b.n	80042ba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b4:	461a      	mov	r2, r3
 80042b6:	2300      	movs	r3, #0
 80042b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c6:	461a      	mov	r2, r3
 80042c8:	2300      	movs	r3, #0
 80042ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d8:	461a      	mov	r2, r3
 80042da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	3301      	adds	r3, #1
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d3b7      	bcc.n	800425e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042ee:	2300      	movs	r3, #0
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	e043      	b.n	800437c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004306:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800430a:	d118      	bne.n	800433e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10a      	bne.n	8004328 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431e:	461a      	mov	r2, r3
 8004320:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	e013      	b.n	8004350 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004334:	461a      	mov	r2, r3
 8004336:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	e008      	b.n	8004350 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434a:	461a      	mov	r2, r3
 800434c:	2300      	movs	r3, #0
 800434e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435c:	461a      	mov	r2, r3
 800435e:	2300      	movs	r3, #0
 8004360:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436e:	461a      	mov	r2, r3
 8004370:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004374:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	3301      	adds	r3, #1
 800437a:	613b      	str	r3, [r7, #16]
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	429a      	cmp	r2, r3
 8004382:	d3b7      	bcc.n	80042f4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004396:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80043a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d105      	bne.n	80043b8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	f043 0210 	orr.w	r2, r3, #16
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699a      	ldr	r2, [r3, #24]
 80043bc:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <USB_DevInit+0x2c4>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80043c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d005      	beq.n	80043d6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	f043 0208 	orr.w	r2, r3, #8
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80043d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d107      	bne.n	80043ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043e4:	f043 0304 	orr.w	r3, r3, #4
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80043ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043f8:	b004      	add	sp, #16
 80043fa:	4770      	bx	lr
 80043fc:	803c3800 	.word	0x803c3800

08004400 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	019b      	lsls	r3, r3, #6
 8004412:	f043 0220 	orr.w	r2, r3, #32
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	3301      	adds	r3, #1
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	4a08      	ldr	r2, [pc, #32]	; (8004444 <USB_FlushTxFifo+0x44>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d901      	bls.n	800442a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e006      	b.n	8004438 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	2b20      	cmp	r3, #32
 8004434:	d0f1      	beq.n	800441a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	00030d40 	.word	0x00030d40

08004448 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2210      	movs	r2, #16
 8004458:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	3301      	adds	r3, #1
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	4a08      	ldr	r2, [pc, #32]	; (8004484 <USB_FlushRxFifo+0x3c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d901      	bls.n	800446a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e006      	b.n	8004478 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0310 	and.w	r3, r3, #16
 8004472:	2b10      	cmp	r3, #16
 8004474:	d0f1      	beq.n	800445a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	00030d40 	.word	0x00030d40

08004488 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	78fb      	ldrb	r3, [r7, #3]
 80044a2:	68f9      	ldr	r1, [r7, #12]
 80044a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044a8:	4313      	orrs	r3, r2
 80044aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b087      	sub	sp, #28
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 0306 	and.w	r3, r3, #6
 80044d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d102      	bne.n	80044e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80044da:	2300      	movs	r3, #0
 80044dc:	75fb      	strb	r3, [r7, #23]
 80044de:	e00a      	b.n	80044f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d002      	beq.n	80044ec <USB_GetDevSpeed+0x32>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2b06      	cmp	r3, #6
 80044ea:	d102      	bne.n	80044f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80044ec:	2302      	movs	r3, #2
 80044ee:	75fb      	strb	r3, [r7, #23]
 80044f0:	e001      	b.n	80044f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80044f2:	230f      	movs	r3, #15
 80044f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80044f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	785b      	ldrb	r3, [r3, #1]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d13a      	bne.n	8004596 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004526:	69da      	ldr	r2, [r3, #28]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	f003 030f 	and.w	r3, r3, #15
 8004530:	2101      	movs	r1, #1
 8004532:	fa01 f303 	lsl.w	r3, r1, r3
 8004536:	b29b      	uxth	r3, r3
 8004538:	68f9      	ldr	r1, [r7, #12]
 800453a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800453e:	4313      	orrs	r3, r2
 8004540:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4413      	add	r3, r2
 800454a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d155      	bne.n	8004604 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	78db      	ldrb	r3, [r3, #3]
 8004572:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004574:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	059b      	lsls	r3, r3, #22
 800457a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800457c:	4313      	orrs	r3, r2
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	0151      	lsls	r1, r2, #5
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	440a      	add	r2, r1
 8004586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800458a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800458e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	e036      	b.n	8004604 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800459c:	69da      	ldr	r2, [r3, #28]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	2101      	movs	r1, #1
 80045a8:	fa01 f303 	lsl.w	r3, r1, r3
 80045ac:	041b      	lsls	r3, r3, #16
 80045ae:	68f9      	ldr	r1, [r7, #12]
 80045b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045b4:	4313      	orrs	r3, r2
 80045b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d11a      	bne.n	8004604 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	78db      	ldrb	r3, [r3, #3]
 80045e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045ea:	430b      	orrs	r3, r1
 80045ec:	4313      	orrs	r3, r2
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	0151      	lsls	r1, r2, #5
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	440a      	add	r2, r1
 80045f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004602:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
	...

08004614 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	785b      	ldrb	r3, [r3, #1]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d161      	bne.n	80046f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004642:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004646:	d11f      	bne.n	8004688 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	0151      	lsls	r1, r2, #5
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	440a      	add	r2, r1
 800465e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004662:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004666:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	0151      	lsls	r1, r2, #5
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	440a      	add	r2, r1
 800467e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004682:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004686:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800468e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	2101      	movs	r1, #1
 800469a:	fa01 f303 	lsl.w	r3, r1, r3
 800469e:	b29b      	uxth	r3, r3
 80046a0:	43db      	mvns	r3, r3
 80046a2:	68f9      	ldr	r1, [r7, #12]
 80046a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046a8:	4013      	ands	r3, r2
 80046aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b2:	69da      	ldr	r2, [r3, #28]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	2101      	movs	r1, #1
 80046be:	fa01 f303 	lsl.w	r3, r1, r3
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	43db      	mvns	r3, r3
 80046c6:	68f9      	ldr	r1, [r7, #12]
 80046c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046cc:	4013      	ands	r3, r2
 80046ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	0159      	lsls	r1, r3, #5
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	440b      	add	r3, r1
 80046e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ea:	4619      	mov	r1, r3
 80046ec:	4b35      	ldr	r3, [pc, #212]	; (80047c4 <USB_DeactivateEndpoint+0x1b0>)
 80046ee:	4013      	ands	r3, r2
 80046f0:	600b      	str	r3, [r1, #0]
 80046f2:	e060      	b.n	80047b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004706:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800470a:	d11f      	bne.n	800474c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	0151      	lsls	r1, r2, #5
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	440a      	add	r2, r1
 8004722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004726:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800472a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	0151      	lsls	r1, r2, #5
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	440a      	add	r2, r1
 8004742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004746:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800474a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004752:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	f003 030f 	and.w	r3, r3, #15
 800475c:	2101      	movs	r1, #1
 800475e:	fa01 f303 	lsl.w	r3, r1, r3
 8004762:	041b      	lsls	r3, r3, #16
 8004764:	43db      	mvns	r3, r3
 8004766:	68f9      	ldr	r1, [r7, #12]
 8004768:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800476c:	4013      	ands	r3, r2
 800476e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004776:	69da      	ldr	r2, [r3, #28]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	f003 030f 	and.w	r3, r3, #15
 8004780:	2101      	movs	r1, #1
 8004782:	fa01 f303 	lsl.w	r3, r1, r3
 8004786:	041b      	lsls	r3, r3, #16
 8004788:	43db      	mvns	r3, r3
 800478a:	68f9      	ldr	r1, [r7, #12]
 800478c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004790:	4013      	ands	r3, r2
 8004792:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	0159      	lsls	r1, r3, #5
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	440b      	add	r3, r1
 80047aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ae:	4619      	mov	r1, r3
 80047b0:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <USB_DeactivateEndpoint+0x1b4>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	ec337800 	.word	0xec337800
 80047c8:	eff37800 	.word	0xeff37800

080047cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08a      	sub	sp, #40	; 0x28
 80047d0:	af02      	add	r7, sp, #8
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	4613      	mov	r3, r2
 80047d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	785b      	ldrb	r3, [r3, #1]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	f040 815c 	bne.w	8004aa6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d132      	bne.n	800485c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	0151      	lsls	r1, r2, #5
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	440a      	add	r2, r1
 800480c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004810:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004814:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004818:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	4413      	add	r3, r2
 8004822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	0151      	lsls	r1, r2, #5
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	440a      	add	r2, r1
 8004830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004834:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004838:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	4413      	add	r3, r2
 8004842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	0151      	lsls	r1, r2, #5
 800484c:	69fa      	ldr	r2, [r7, #28]
 800484e:	440a      	add	r2, r1
 8004850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004854:	0cdb      	lsrs	r3, r3, #19
 8004856:	04db      	lsls	r3, r3, #19
 8004858:	6113      	str	r3, [r2, #16]
 800485a:	e074      	b.n	8004946 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	0151      	lsls	r1, r2, #5
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	440a      	add	r2, r1
 8004872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004876:	0cdb      	lsrs	r3, r3, #19
 8004878:	04db      	lsls	r3, r3, #19
 800487a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	4413      	add	r3, r2
 8004884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	0151      	lsls	r1, r2, #5
 800488e:	69fa      	ldr	r2, [r7, #28]
 8004890:	440a      	add	r2, r1
 8004892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004896:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800489a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800489e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	6959      	ldr	r1, [r3, #20]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	440b      	add	r3, r1
 80048b8:	1e59      	subs	r1, r3, #1
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	fbb1 f3f3 	udiv	r3, r1, r3
 80048c2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80048c4:	4b9d      	ldr	r3, [pc, #628]	; (8004b3c <USB_EPStartXfer+0x370>)
 80048c6:	400b      	ands	r3, r1
 80048c8:	69b9      	ldr	r1, [r7, #24]
 80048ca:	0148      	lsls	r0, r1, #5
 80048cc:	69f9      	ldr	r1, [r7, #28]
 80048ce:	4401      	add	r1, r0
 80048d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048d4:	4313      	orrs	r3, r2
 80048d6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e4:	691a      	ldr	r2, [r3, #16]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ee:	69b9      	ldr	r1, [r7, #24]
 80048f0:	0148      	lsls	r0, r1, #5
 80048f2:	69f9      	ldr	r1, [r7, #28]
 80048f4:	4401      	add	r1, r0
 80048f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048fa:	4313      	orrs	r3, r2
 80048fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	78db      	ldrb	r3, [r3, #3]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d11f      	bne.n	8004946 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	0151      	lsls	r1, r2, #5
 8004918:	69fa      	ldr	r2, [r7, #28]
 800491a:	440a      	add	r2, r1
 800491c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004920:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004924:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	4413      	add	r3, r2
 800492e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	0151      	lsls	r1, r2, #5
 8004938:	69fa      	ldr	r2, [r7, #28]
 800493a:	440a      	add	r2, r1
 800493c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004940:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004944:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004946:	79fb      	ldrb	r3, [r7, #7]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d14b      	bne.n	80049e4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d009      	beq.n	8004968 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004960:	461a      	mov	r2, r3
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	78db      	ldrb	r3, [r3, #3]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d128      	bne.n	80049c2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497c:	2b00      	cmp	r3, #0
 800497e:	d110      	bne.n	80049a2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	0151      	lsls	r1, r2, #5
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	440a      	add	r2, r1
 8004996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800499a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	e00f      	b.n	80049c2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	0151      	lsls	r1, r2, #5
 80049b4:	69fa      	ldr	r2, [r7, #28]
 80049b6:	440a      	add	r2, r1
 80049b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	0151      	lsls	r1, r2, #5
 80049d4:	69fa      	ldr	r2, [r7, #28]
 80049d6:	440a      	add	r2, r1
 80049d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	e12f      	b.n	8004c44 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	0151      	lsls	r1, r2, #5
 80049f6:	69fa      	ldr	r2, [r7, #28]
 80049f8:	440a      	add	r2, r1
 80049fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a02:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	78db      	ldrb	r3, [r3, #3]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d015      	beq.n	8004a38 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 8117 	beq.w	8004c44 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	2101      	movs	r1, #1
 8004a28:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2c:	69f9      	ldr	r1, [r7, #28]
 8004a2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a32:	4313      	orrs	r3, r2
 8004a34:	634b      	str	r3, [r1, #52]	; 0x34
 8004a36:	e105      	b.n	8004c44 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d110      	bne.n	8004a6a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	0151      	lsls	r1, r2, #5
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	440a      	add	r2, r1
 8004a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	e00f      	b.n	8004a8a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	0151      	lsls	r1, r2, #5
 8004a7c:	69fa      	ldr	r2, [r7, #28]
 8004a7e:	440a      	add	r2, r1
 8004a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a88:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	68d9      	ldr	r1, [r3, #12]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	781a      	ldrb	r2, [r3, #0]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	b298      	uxth	r0, r3
 8004a98:	79fb      	ldrb	r3, [r7, #7]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 fa2b 	bl	8004efa <USB_WritePacket>
 8004aa4:	e0ce      	b.n	8004c44 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	0151      	lsls	r1, r2, #5
 8004ab8:	69fa      	ldr	r2, [r7, #28]
 8004aba:	440a      	add	r2, r1
 8004abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ac0:	0cdb      	lsrs	r3, r3, #19
 8004ac2:	04db      	lsls	r3, r3, #19
 8004ac4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	0151      	lsls	r1, r2, #5
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	440a      	add	r2, r1
 8004adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ae4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ae8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d126      	bne.n	8004b40 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afe:	691a      	ldr	r2, [r3, #16]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b08:	69b9      	ldr	r1, [r7, #24]
 8004b0a:	0148      	lsls	r0, r1, #5
 8004b0c:	69f9      	ldr	r1, [r7, #28]
 8004b0e:	4401      	add	r1, r0
 8004b10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b14:	4313      	orrs	r3, r2
 8004b16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	0151      	lsls	r1, r2, #5
 8004b2a:	69fa      	ldr	r2, [r7, #28]
 8004b2c:	440a      	add	r2, r1
 8004b2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b36:	6113      	str	r3, [r2, #16]
 8004b38:	e036      	b.n	8004ba8 <USB_EPStartXfer+0x3dc>
 8004b3a:	bf00      	nop
 8004b3c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	695a      	ldr	r2, [r3, #20]
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	4413      	add	r3, r2
 8004b4a:	1e5a      	subs	r2, r3, #1
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b54:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b62:	691a      	ldr	r2, [r3, #16]
 8004b64:	8afb      	ldrh	r3, [r7, #22]
 8004b66:	04d9      	lsls	r1, r3, #19
 8004b68:	4b39      	ldr	r3, [pc, #228]	; (8004c50 <USB_EPStartXfer+0x484>)
 8004b6a:	400b      	ands	r3, r1
 8004b6c:	69b9      	ldr	r1, [r7, #24]
 8004b6e:	0148      	lsls	r0, r1, #5
 8004b70:	69f9      	ldr	r1, [r7, #28]
 8004b72:	4401      	add	r1, r0
 8004b74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b88:	691a      	ldr	r2, [r3, #16]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	8af9      	ldrh	r1, [r7, #22]
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b98:	69b9      	ldr	r1, [r7, #24]
 8004b9a:	0148      	lsls	r0, r1, #5
 8004b9c:	69f9      	ldr	r1, [r7, #28]
 8004b9e:	4401      	add	r1, r0
 8004ba0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ba8:	79fb      	ldrb	r3, [r7, #7]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d10d      	bne.n	8004bca <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d009      	beq.n	8004bca <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	68d9      	ldr	r1, [r3, #12]
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc6:	460a      	mov	r2, r1
 8004bc8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	78db      	ldrb	r3, [r3, #3]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d128      	bne.n	8004c24 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d110      	bne.n	8004c04 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	0151      	lsls	r1, r2, #5
 8004bf4:	69fa      	ldr	r2, [r7, #28]
 8004bf6:	440a      	add	r2, r1
 8004bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	e00f      	b.n	8004c24 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	0151      	lsls	r1, r2, #5
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	440a      	add	r2, r1
 8004c1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c22:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	0151      	lsls	r1, r2, #5
 8004c36:	69fa      	ldr	r2, [r7, #28]
 8004c38:	440a      	add	r2, r1
 8004c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3720      	adds	r7, #32
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	1ff80000 	.word	0x1ff80000

08004c54 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	785b      	ldrb	r3, [r3, #1]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	f040 80cd 	bne.w	8004e10 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d132      	bne.n	8004ce4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	0151      	lsls	r1, r2, #5
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	440a      	add	r2, r1
 8004c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ca0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	0151      	lsls	r1, r2, #5
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	440a      	add	r2, r1
 8004cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	015a      	lsls	r2, r3, #5
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	0151      	lsls	r1, r2, #5
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	440a      	add	r2, r1
 8004cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cdc:	0cdb      	lsrs	r3, r3, #19
 8004cde:	04db      	lsls	r3, r3, #19
 8004ce0:	6113      	str	r3, [r2, #16]
 8004ce2:	e04e      	b.n	8004d82 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	0151      	lsls	r1, r2, #5
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	440a      	add	r2, r1
 8004cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cfe:	0cdb      	lsrs	r3, r3, #19
 8004d00:	04db      	lsls	r3, r3, #19
 8004d02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	0151      	lsls	r1, r2, #5
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	440a      	add	r2, r1
 8004d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d26:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	695a      	ldr	r2, [r3, #20]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d903      	bls.n	8004d3c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	0151      	lsls	r1, r2, #5
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	440a      	add	r2, r1
 8004d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d68:	691a      	ldr	r2, [r3, #16]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d72:	6939      	ldr	r1, [r7, #16]
 8004d74:	0148      	lsls	r0, r1, #5
 8004d76:	6979      	ldr	r1, [r7, #20]
 8004d78:	4401      	add	r1, r0
 8004d7a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d11e      	bne.n	8004dc6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d009      	beq.n	8004da4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	0151      	lsls	r1, r2, #5
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	440a      	add	r2, r1
 8004dba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	e092      	b.n	8004eec <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	0151      	lsls	r1, r2, #5
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	440a      	add	r2, r1
 8004ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004de4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d07e      	beq.n	8004eec <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	2101      	movs	r1, #1
 8004e00:	fa01 f303 	lsl.w	r3, r1, r3
 8004e04:	6979      	ldr	r1, [r7, #20]
 8004e06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	634b      	str	r3, [r1, #52]	; 0x34
 8004e0e:	e06d      	b.n	8004eec <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	0151      	lsls	r1, r2, #5
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	440a      	add	r2, r1
 8004e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e2a:	0cdb      	lsrs	r3, r3, #19
 8004e2c:	04db      	lsls	r3, r3, #19
 8004e2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	0151      	lsls	r1, r2, #5
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	440a      	add	r2, r1
 8004e46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e52:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	0151      	lsls	r1, r2, #5
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	440a      	add	r2, r1
 8004e7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e9a:	6939      	ldr	r1, [r7, #16]
 8004e9c:	0148      	lsls	r0, r1, #5
 8004e9e:	6979      	ldr	r1, [r7, #20]
 8004ea0:	4401      	add	r1, r0
 8004ea2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004eaa:	79fb      	ldrb	r3, [r7, #7]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d10d      	bne.n	8004ecc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d009      	beq.n	8004ecc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	68d9      	ldr	r1, [r3, #12]
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec8:	460a      	mov	r2, r1
 8004eca:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	0151      	lsls	r1, r2, #5
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	440a      	add	r2, r1
 8004ee2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ee6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004eea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	371c      	adds	r7, #28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b089      	sub	sp, #36	; 0x24
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	4611      	mov	r1, r2
 8004f06:	461a      	mov	r2, r3
 8004f08:	460b      	mov	r3, r1
 8004f0a:	71fb      	strb	r3, [r7, #7]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d123      	bne.n	8004f68 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f20:	88bb      	ldrh	r3, [r7, #4]
 8004f22:	3303      	adds	r3, #3
 8004f24:	089b      	lsrs	r3, r3, #2
 8004f26:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f28:	2300      	movs	r3, #0
 8004f2a:	61bb      	str	r3, [r7, #24]
 8004f2c:	e018      	b.n	8004f60 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f2e:	79fb      	ldrb	r3, [r7, #7]
 8004f30:	031a      	lsls	r2, r3, #12
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	3301      	adds	r3, #1
 8004f46:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	3301      	adds	r3, #1
 8004f52:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	3301      	adds	r3, #1
 8004f58:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	61bb      	str	r3, [r7, #24]
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d3e2      	bcc.n	8004f2e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3724      	adds	r7, #36	; 0x24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b08b      	sub	sp, #44	; 0x2c
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	60f8      	str	r0, [r7, #12]
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	4613      	mov	r3, r2
 8004f82:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f8c:	88fb      	ldrh	r3, [r7, #6]
 8004f8e:	089b      	lsrs	r3, r3, #2
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f94:	88fb      	ldrh	r3, [r7, #6]
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	623b      	str	r3, [r7, #32]
 8004fa0:	e014      	b.n	8004fcc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	601a      	str	r2, [r3, #0]
    pDest++;
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	623b      	str	r3, [r7, #32]
 8004fcc:	6a3a      	ldr	r2, [r7, #32]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d3e6      	bcc.n	8004fa2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004fd4:	8bfb      	ldrh	r3, [r7, #30]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d01e      	beq.n	8005018 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	f107 0310 	add.w	r3, r7, #16
 8004fea:	6812      	ldr	r2, [r2, #0]
 8004fec:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	701a      	strb	r2, [r3, #0]
      i++;
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	3301      	adds	r3, #1
 8005004:	623b      	str	r3, [r7, #32]
      pDest++;
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	3301      	adds	r3, #1
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800500c:	8bfb      	ldrh	r3, [r7, #30]
 800500e:	3b01      	subs	r3, #1
 8005010:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005012:	8bfb      	ldrh	r3, [r7, #30]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1ea      	bne.n	8004fee <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800501a:	4618      	mov	r0, r3
 800501c:	372c      	adds	r7, #44	; 0x2c
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005026:	b480      	push	{r7}
 8005028:	b085      	sub	sp, #20
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	785b      	ldrb	r3, [r3, #1]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d12c      	bne.n	800509c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	db12      	blt.n	800507a <USB_EPSetStall+0x54>
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00f      	beq.n	800507a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4413      	add	r3, r2
 8005062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	0151      	lsls	r1, r2, #5
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	440a      	add	r2, r1
 8005070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005074:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005078:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	0151      	lsls	r1, r2, #5
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	440a      	add	r2, r1
 8005090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005094:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	e02b      	b.n	80050f4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	db12      	blt.n	80050d4 <USB_EPSetStall+0xae>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00f      	beq.n	80050d4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	0151      	lsls	r1, r2, #5
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	440a      	add	r2, r1
 80050ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050d2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	0151      	lsls	r1, r2, #5
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	440a      	add	r2, r1
 80050ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005102:	b480      	push	{r7}
 8005104:	b085      	sub	sp, #20
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	785b      	ldrb	r3, [r3, #1]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d128      	bne.n	8005170 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	0151      	lsls	r1, r2, #5
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	440a      	add	r2, r1
 8005134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005138:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800513c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	78db      	ldrb	r3, [r3, #3]
 8005142:	2b03      	cmp	r3, #3
 8005144:	d003      	beq.n	800514e <USB_EPClearStall+0x4c>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	78db      	ldrb	r3, [r3, #3]
 800514a:	2b02      	cmp	r3, #2
 800514c:	d138      	bne.n	80051c0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	0151      	lsls	r1, r2, #5
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	440a      	add	r2, r1
 8005164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	e027      	b.n	80051c0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	0151      	lsls	r1, r2, #5
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	440a      	add	r2, r1
 8005186:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800518a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800518e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	78db      	ldrb	r3, [r3, #3]
 8005194:	2b03      	cmp	r3, #3
 8005196:	d003      	beq.n	80051a0 <USB_EPClearStall+0x9e>
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	78db      	ldrb	r3, [r3, #3]
 800519c:	2b02      	cmp	r3, #2
 800519e:	d10f      	bne.n	80051c0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	0151      	lsls	r1, r2, #5
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	440a      	add	r2, r1
 80051b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051be:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b085      	sub	sp, #20
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	460b      	mov	r3, r1
 80051d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80051f0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	78fb      	ldrb	r3, [r7, #3]
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005202:	68f9      	ldr	r1, [r7, #12]
 8005204:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005208:	4313      	orrs	r3, r2
 800520a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800521a:	b480      	push	{r7}
 800521c:	b085      	sub	sp, #20
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005234:	f023 0303 	bic.w	r3, r3, #3
 8005238:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005248:	f023 0302 	bic.w	r3, r3, #2
 800524c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005276:	f023 0303 	bic.w	r3, r3, #3
 800527a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800528a:	f043 0302 	orr.w	r3, r3, #2
 800528e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800529e:	b480      	push	{r7}
 80052a0:	b085      	sub	sp, #20
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	4013      	ands	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80052b6:	68fb      	ldr	r3, [r7, #12]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	4013      	ands	r3, r2
 80052e6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	0c1b      	lsrs	r3, r3, #16
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	4013      	ands	r3, r2
 800531a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	b29b      	uxth	r3, r3
}
 8005320:	4618      	mov	r0, r3
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	460b      	mov	r3, r1
 8005336:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800533c:	78fb      	ldrb	r3, [r7, #3]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	4013      	ands	r3, r2
 8005358:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800535a:	68bb      	ldr	r3, [r7, #8]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	460b      	mov	r3, r1
 8005372:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800538a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800538c:	78fb      	ldrb	r3, [r7, #3]
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	fa22 f303 	lsr.w	r3, r2, r3
 8005398:	01db      	lsls	r3, r3, #7
 800539a:	b2db      	uxtb	r3, r3
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80053a2:	78fb      	ldrb	r3, [r7, #3]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	4013      	ands	r3, r2
 80053b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80053b6:	68bb      	ldr	r3, [r7, #8]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	371c      	adds	r7, #28
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	f003 0301 	and.w	r3, r3, #1
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053fa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80053fe:	f023 0307 	bic.w	r3, r3, #7
 8005402:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005416:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
	...

08005428 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	460b      	mov	r3, r1
 8005432:	607a      	str	r2, [r7, #4]
 8005434:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	333c      	adds	r3, #60	; 0x3c
 800543e:	3304      	adds	r3, #4
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	4a26      	ldr	r2, [pc, #152]	; (80054e0 <USB_EP0_OutStart+0xb8>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d90a      	bls.n	8005462 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005458:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800545c:	d101      	bne.n	8005462 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	e037      	b.n	80054d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005468:	461a      	mov	r2, r3
 800546a:	2300      	movs	r3, #0
 800546c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800547c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005480:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005490:	f043 0318 	orr.w	r3, r3, #24
 8005494:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80054a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80054aa:	7afb      	ldrb	r3, [r7, #11]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d10f      	bne.n	80054d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b6:	461a      	mov	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80054ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	371c      	adds	r7, #28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	4f54300a 	.word	0x4f54300a

080054e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	3301      	adds	r3, #1
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	4a13      	ldr	r2, [pc, #76]	; (8005544 <USB_CoreReset+0x60>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d901      	bls.n	8005500 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e01a      	b.n	8005536 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	2b00      	cmp	r3, #0
 8005506:	daf3      	bge.n	80054f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	f043 0201 	orr.w	r2, r3, #1
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3301      	adds	r3, #1
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	4a09      	ldr	r2, [pc, #36]	; (8005544 <USB_CoreReset+0x60>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d901      	bls.n	8005528 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e006      	b.n	8005536 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b01      	cmp	r3, #1
 8005532:	d0f1      	beq.n	8005518 <USB_CoreReset+0x34>

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	00030d40 	.word	0x00030d40

08005548 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	460b      	mov	r3, r1
 8005552:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005554:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005558:	f002 f914 	bl	8007784 <USBD_static_malloc>
 800555c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d105      	bne.n	8005570 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800556c:	2302      	movs	r3, #2
 800556e:	e066      	b.n	800563e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	7c1b      	ldrb	r3, [r3, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d119      	bne.n	80055b4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005584:	2202      	movs	r2, #2
 8005586:	2181      	movs	r1, #129	; 0x81
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f001 ffd8 	bl	800753e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005598:	2202      	movs	r2, #2
 800559a:	2101      	movs	r1, #1
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f001 ffce 	bl	800753e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2210      	movs	r2, #16
 80055ae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80055b2:	e016      	b.n	80055e2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80055b4:	2340      	movs	r3, #64	; 0x40
 80055b6:	2202      	movs	r2, #2
 80055b8:	2181      	movs	r1, #129	; 0x81
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f001 ffbf 	bl	800753e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80055c6:	2340      	movs	r3, #64	; 0x40
 80055c8:	2202      	movs	r2, #2
 80055ca:	2101      	movs	r1, #1
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f001 ffb6 	bl	800753e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2210      	movs	r2, #16
 80055de:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80055e2:	2308      	movs	r3, #8
 80055e4:	2203      	movs	r2, #3
 80055e6:	2182      	movs	r1, #130	; 0x82
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f001 ffa8 	bl	800753e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	7c1b      	ldrb	r3, [r3, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d109      	bne.n	800562c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800561e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005622:	2101      	movs	r1, #1
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f002 f879 	bl	800771c <USBD_LL_PrepareReceive>
 800562a:	e007      	b.n	800563c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005632:	2340      	movs	r3, #64	; 0x40
 8005634:	2101      	movs	r1, #1
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f002 f870 	bl	800771c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b082      	sub	sp, #8
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
 800564e:	460b      	mov	r3, r1
 8005650:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005652:	2181      	movs	r1, #129	; 0x81
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f001 ff98 	bl	800758a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005660:	2101      	movs	r1, #1
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f001 ff91 	bl	800758a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005670:	2182      	movs	r1, #130	; 0x82
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f001 ff89 	bl	800758a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00e      	beq.n	80056b0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056a2:	4618      	mov	r0, r3
 80056a4:	f002 f87c 	bl	80077a0 <USBD_static_free>
    pdev->pClassData = NULL;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
	...

080056bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e0af      	b.n	8005844 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d03f      	beq.n	8005770 <USBD_CDC_Setup+0xb4>
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	f040 809f 	bne.w	8005834 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	88db      	ldrh	r3, [r3, #6]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d02e      	beq.n	800575c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	b25b      	sxtb	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	da16      	bge.n	8005736 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005714:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	88d2      	ldrh	r2, [r2, #6]
 800571a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	88db      	ldrh	r3, [r3, #6]
 8005720:	2b07      	cmp	r3, #7
 8005722:	bf28      	it	cs
 8005724:	2307      	movcs	r3, #7
 8005726:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	89fa      	ldrh	r2, [r7, #14]
 800572c:	4619      	mov	r1, r3
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f001 fae9 	bl	8006d06 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005734:	e085      	b.n	8005842 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	785a      	ldrb	r2, [r3, #1]
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	88db      	ldrh	r3, [r3, #6]
 8005744:	b2da      	uxtb	r2, r3
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800574c:	6939      	ldr	r1, [r7, #16]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	88db      	ldrh	r3, [r3, #6]
 8005752:	461a      	mov	r2, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f001 fb02 	bl	8006d5e <USBD_CtlPrepareRx>
      break;
 800575a:	e072      	b.n	8005842 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	7850      	ldrb	r0, [r2, #1]
 8005768:	2200      	movs	r2, #0
 800576a:	6839      	ldr	r1, [r7, #0]
 800576c:	4798      	blx	r3
      break;
 800576e:	e068      	b.n	8005842 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	785b      	ldrb	r3, [r3, #1]
 8005774:	2b0b      	cmp	r3, #11
 8005776:	d852      	bhi.n	800581e <USBD_CDC_Setup+0x162>
 8005778:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <USBD_CDC_Setup+0xc4>)
 800577a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577e:	bf00      	nop
 8005780:	080057b1 	.word	0x080057b1
 8005784:	0800582d 	.word	0x0800582d
 8005788:	0800581f 	.word	0x0800581f
 800578c:	0800581f 	.word	0x0800581f
 8005790:	0800581f 	.word	0x0800581f
 8005794:	0800581f 	.word	0x0800581f
 8005798:	0800581f 	.word	0x0800581f
 800579c:	0800581f 	.word	0x0800581f
 80057a0:	0800581f 	.word	0x0800581f
 80057a4:	0800581f 	.word	0x0800581f
 80057a8:	080057db 	.word	0x080057db
 80057ac:	08005805 	.word	0x08005805
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d107      	bne.n	80057cc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80057bc:	f107 030a 	add.w	r3, r7, #10
 80057c0:	2202      	movs	r2, #2
 80057c2:	4619      	mov	r1, r3
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f001 fa9e 	bl	8006d06 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80057ca:	e032      	b.n	8005832 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80057cc:	6839      	ldr	r1, [r7, #0]
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f001 fa28 	bl	8006c24 <USBD_CtlError>
            ret = USBD_FAIL;
 80057d4:	2303      	movs	r3, #3
 80057d6:	75fb      	strb	r3, [r7, #23]
          break;
 80057d8:	e02b      	b.n	8005832 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d107      	bne.n	80057f6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80057e6:	f107 030d 	add.w	r3, r7, #13
 80057ea:	2201      	movs	r2, #1
 80057ec:	4619      	mov	r1, r3
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f001 fa89 	bl	8006d06 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80057f4:	e01d      	b.n	8005832 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80057f6:	6839      	ldr	r1, [r7, #0]
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f001 fa13 	bl	8006c24 <USBD_CtlError>
            ret = USBD_FAIL;
 80057fe:	2303      	movs	r3, #3
 8005800:	75fb      	strb	r3, [r7, #23]
          break;
 8005802:	e016      	b.n	8005832 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b03      	cmp	r3, #3
 800580e:	d00f      	beq.n	8005830 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005810:	6839      	ldr	r1, [r7, #0]
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f001 fa06 	bl	8006c24 <USBD_CtlError>
            ret = USBD_FAIL;
 8005818:	2303      	movs	r3, #3
 800581a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800581c:	e008      	b.n	8005830 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800581e:	6839      	ldr	r1, [r7, #0]
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f001 f9ff 	bl	8006c24 <USBD_CtlError>
          ret = USBD_FAIL;
 8005826:	2303      	movs	r3, #3
 8005828:	75fb      	strb	r3, [r7, #23]
          break;
 800582a:	e002      	b.n	8005832 <USBD_CDC_Setup+0x176>
          break;
 800582c:	bf00      	nop
 800582e:	e008      	b.n	8005842 <USBD_CDC_Setup+0x186>
          break;
 8005830:	bf00      	nop
      }
      break;
 8005832:	e006      	b.n	8005842 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005834:	6839      	ldr	r1, [r7, #0]
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f001 f9f4 	bl	8006c24 <USBD_CtlError>
      ret = USBD_FAIL;
 800583c:	2303      	movs	r3, #3
 800583e:	75fb      	strb	r3, [r7, #23]
      break;
 8005840:	bf00      	nop
  }

  return (uint8_t)ret;
 8005842:	7dfb      	ldrb	r3, [r7, #23]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	460b      	mov	r3, r1
 8005856:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800585e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800586a:	2303      	movs	r3, #3
 800586c:	e04f      	b.n	800590e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005874:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005876:	78fa      	ldrb	r2, [r7, #3]
 8005878:	6879      	ldr	r1, [r7, #4]
 800587a:	4613      	mov	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	440b      	add	r3, r1
 8005884:	3318      	adds	r3, #24
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d029      	beq.n	80058e0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800588c:	78fa      	ldrb	r2, [r7, #3]
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	4613      	mov	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	440b      	add	r3, r1
 800589a:	3318      	adds	r3, #24
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	78f9      	ldrb	r1, [r7, #3]
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	460b      	mov	r3, r1
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	1a5b      	subs	r3, r3, r1
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4403      	add	r3, r0
 80058ac:	3344      	adds	r3, #68	; 0x44
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80058b4:	fb03 f301 	mul.w	r3, r3, r1
 80058b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d110      	bne.n	80058e0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80058be:	78fa      	ldrb	r2, [r7, #3]
 80058c0:	6879      	ldr	r1, [r7, #4]
 80058c2:	4613      	mov	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	440b      	add	r3, r1
 80058cc:	3318      	adds	r3, #24
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80058d2:	78f9      	ldrb	r1, [r7, #3]
 80058d4:	2300      	movs	r3, #0
 80058d6:	2200      	movs	r2, #0
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f001 fefe 	bl	80076da <USBD_LL_Transmit>
 80058de:	e015      	b.n	800590c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00b      	beq.n	800590c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005908:	78fa      	ldrb	r2, [r7, #3]
 800590a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b084      	sub	sp, #16
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	460b      	mov	r3, r1
 8005920:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005928:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005934:	2303      	movs	r3, #3
 8005936:	e015      	b.n	8005964 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	4619      	mov	r1, r3
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f001 ff0e 	bl	800775e <USBD_LL_GetRxDataSize>
 8005942:	4602      	mov	r2, r0
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800595e:	4611      	mov	r1, r2
 8005960:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800597a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005982:	2303      	movs	r3, #3
 8005984:	e01b      	b.n	80059be <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d015      	beq.n	80059bc <USBD_CDC_EP0_RxReady+0x50>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005996:	2bff      	cmp	r3, #255	; 0xff
 8005998:	d010      	beq.n	80059bc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80059a8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80059b0:	b292      	uxth	r2, r2
 80059b2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	22ff      	movs	r2, #255	; 0xff
 80059b8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2243      	movs	r2, #67	; 0x43
 80059d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80059d6:	4b03      	ldr	r3, [pc, #12]	; (80059e4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80059d8:	4618      	mov	r0, r3
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	20000094 	.word	0x20000094

080059e8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2243      	movs	r2, #67	; 0x43
 80059f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80059f6:	4b03      	ldr	r3, [pc, #12]	; (8005a04 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	20000050 	.word	0x20000050

08005a08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2243      	movs	r2, #67	; 0x43
 8005a14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005a16:	4b03      	ldr	r3, [pc, #12]	; (8005a24 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	200000d8 	.word	0x200000d8

08005a28 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	220a      	movs	r2, #10
 8005a34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005a36:	4b03      	ldr	r3, [pc, #12]	; (8005a44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	2000000c 	.word	0x2000000c

08005a48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e004      	b.n	8005a66 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b087      	sub	sp, #28
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	60f8      	str	r0, [r7, #12]
 8005a7a:	60b9      	str	r1, [r7, #8]
 8005a7c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a84:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e008      	b.n	8005aa2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	371c      	adds	r7, #28
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b085      	sub	sp, #20
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005abe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e004      	b.n	8005ad4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005aee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e016      	b.n	8005b2c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	7c1b      	ldrb	r3, [r3, #16]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d109      	bne.n	8005b1a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b10:	2101      	movs	r1, #1
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f001 fe02 	bl	800771c <USBD_LL_PrepareReceive>
 8005b18:	e007      	b.n	8005b2a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b20:	2340      	movs	r3, #64	; 0x40
 8005b22:	2101      	movs	r1, #1
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f001 fdf9 	bl	800771c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e01f      	b.n	8005b8c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	79fa      	ldrb	r2, [r7, #7]
 8005b7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f001 fc75 	bl	8007470 <USBD_LL_Init>
 8005b86:	4603      	mov	r3, r0
 8005b88:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e016      	b.n	8005bda <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00b      	beq.n	8005bd8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	f107 020e 	add.w	r2, r7, #14
 8005bcc:	4610      	mov	r0, r2
 8005bce:	4798      	blx	r3
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b082      	sub	sp, #8
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f001 fc8c 	bl	8007508 <USBD_LL_Start>
 8005bf0:	4603      	mov	r3, r0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b083      	sub	sp, #12
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d009      	beq.n	8005c3e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	78fa      	ldrb	r2, [r7, #3]
 8005c34:	4611      	mov	r1, r2
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	4798      	blx	r3
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d007      	beq.n	8005c6e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	78fa      	ldrb	r2, [r7, #3]
 8005c68:	4611      	mov	r1, r2
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	4798      	blx	r3
  }

  return USBD_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c88:	6839      	ldr	r1, [r7, #0]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 ff90 	bl	8006bb0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005cac:	f003 031f 	and.w	r3, r3, #31
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d01a      	beq.n	8005cea <USBD_LL_SetupStage+0x72>
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d822      	bhi.n	8005cfe <USBD_LL_SetupStage+0x86>
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <USBD_LL_SetupStage+0x4a>
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d00a      	beq.n	8005cd6 <USBD_LL_SetupStage+0x5e>
 8005cc0:	e01d      	b.n	8005cfe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005cc8:	4619      	mov	r1, r3
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fa62 	bl	8006194 <USBD_StdDevReq>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8005cd4:	e020      	b.n	8005d18 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005cdc:	4619      	mov	r1, r3
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fac6 	bl	8006270 <USBD_StdItfReq>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ce8:	e016      	b.n	8005d18 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fb05 	bl	8006302 <USBD_StdEPReq>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8005cfc:	e00c      	b.n	8005d18 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d04:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f001 fc5b 	bl	80075c8 <USBD_LL_StallEP>
 8005d12:	4603      	mov	r3, r0
 8005d14:	73fb      	strb	r3, [r7, #15]
      break;
 8005d16:	bf00      	nop
  }

  return ret;
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b086      	sub	sp, #24
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	60f8      	str	r0, [r7, #12]
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	607a      	str	r2, [r7, #4]
 8005d2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005d30:	7afb      	ldrb	r3, [r7, #11]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d138      	bne.n	8005da8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005d3c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d14a      	bne.n	8005dde <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d913      	bls.n	8005d7c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	1ad2      	subs	r2, r2, r3
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	68da      	ldr	r2, [r3, #12]
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	bf28      	it	cs
 8005d6e:	4613      	movcs	r3, r2
 8005d70:	461a      	mov	r2, r3
 8005d72:	6879      	ldr	r1, [r7, #4]
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f001 f80f 	bl	8006d98 <USBD_CtlContinueRx>
 8005d7a:	e030      	b.n	8005dde <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b03      	cmp	r3, #3
 8005d86:	d10b      	bne.n	8005da0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d005      	beq.n	8005da0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f001 f80a 	bl	8006dba <USBD_CtlSendStatus>
 8005da6:	e01a      	b.n	8005dde <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b03      	cmp	r3, #3
 8005db2:	d114      	bne.n	8005dde <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00e      	beq.n	8005dde <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	7afa      	ldrb	r2, [r7, #11]
 8005dca:	4611      	mov	r1, r2
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	4798      	blx	r3
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005dd4:	7dfb      	ldrb	r3, [r7, #23]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005dda:	7dfb      	ldrb	r3, [r7, #23]
 8005ddc:	e000      	b.n	8005de0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3718      	adds	r7, #24
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	460b      	mov	r3, r1
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005df6:	7afb      	ldrb	r3, [r7, #11]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d16b      	bne.n	8005ed4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	3314      	adds	r3, #20
 8005e00:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d156      	bne.n	8005eba <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d914      	bls.n	8005e42 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	1ad2      	subs	r2, r2, r3
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 ff84 	bl	8006d3c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e34:	2300      	movs	r3, #0
 8005e36:	2200      	movs	r2, #0
 8005e38:	2100      	movs	r1, #0
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f001 fc6e 	bl	800771c <USBD_LL_PrepareReceive>
 8005e40:	e03b      	b.n	8005eba <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	68da      	ldr	r2, [r3, #12]
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d11c      	bne.n	8005e88 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d316      	bcc.n	8005e88 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d20f      	bcs.n	8005e88 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005e68:	2200      	movs	r2, #0
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f000 ff65 	bl	8006d3c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2100      	movs	r1, #0
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f001 fc4b 	bl	800771c <USBD_LL_PrepareReceive>
 8005e86:	e018      	b.n	8005eba <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b03      	cmp	r3, #3
 8005e92:	d10b      	bne.n	8005eac <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d005      	beq.n	8005eac <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005eac:	2180      	movs	r1, #128	; 0x80
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f001 fb8a 	bl	80075c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f000 ff93 	bl	8006de0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d122      	bne.n	8005f0a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f7ff fe98 	bl	8005bfa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005ed2:	e01a      	b.n	8005f0a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	d114      	bne.n	8005f0a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00e      	beq.n	8005f0a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	7afa      	ldrb	r2, [r7, #11]
 8005ef6:	4611      	mov	r1, r2
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	4798      	blx	r3
 8005efc:	4603      	mov	r3, r0
 8005efe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005f00:	7dfb      	ldrb	r3, [r7, #23]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005f06:	7dfb      	ldrb	r3, [r7, #23]
 8005f08:	e000      	b.n	8005f0c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e02f      	b.n	8005fa8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00f      	beq.n	8005f72 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d009      	beq.n	8005f72 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	6852      	ldr	r2, [r2, #4]
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	4611      	mov	r1, r2
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f72:	2340      	movs	r3, #64	; 0x40
 8005f74:	2200      	movs	r2, #0
 8005f76:	2100      	movs	r1, #0
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f001 fae0 	bl	800753e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2240      	movs	r2, #64	; 0x40
 8005f8a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f8e:	2340      	movs	r3, #64	; 0x40
 8005f90:	2200      	movs	r2, #0
 8005f92:	2180      	movs	r1, #128	; 0x80
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f001 fad2 	bl	800753e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2240      	movs	r2, #64	; 0x40
 8005fa4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	78fa      	ldrb	r2, [r7, #3]
 8005fc0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2204      	movs	r2, #4
 8005fea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b04      	cmp	r3, #4
 800600e:	d106      	bne.n	800601e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006016:	b2da      	uxtb	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800603e:	2303      	movs	r3, #3
 8006040:	e012      	b.n	8006068 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b03      	cmp	r3, #3
 800604c:	d10b      	bne.n	8006066 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d005      	beq.n	8006066 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006086:	2303      	movs	r3, #3
 8006088:	e014      	b.n	80060b4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b03      	cmp	r3, #3
 8006094:	d10d      	bne.n	80060b2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d007      	beq.n	80060b2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	78fa      	ldrb	r2, [r7, #3]
 80060ac:	4611      	mov	r1, r2
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	460b      	mov	r3, r1
 80060c6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e014      	b.n	8006100 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b03      	cmp	r3, #3
 80060e0:	d10d      	bne.n	80060fe <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d007      	beq.n	80060fe <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	78fa      	ldrb	r2, [r7, #3]
 80060f8:	4611      	mov	r1, r2
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b082      	sub	sp, #8
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006134:	2b00      	cmp	r3, #0
 8006136:	d009      	beq.n	800614c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6852      	ldr	r2, [r2, #4]
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	4611      	mov	r1, r2
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	4798      	blx	r3
  }

  return USBD_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006156:	b480      	push	{r7}
 8006158:	b087      	sub	sp, #28
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	3301      	adds	r3, #1
 800616c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006174:	8a3b      	ldrh	r3, [r7, #16]
 8006176:	021b      	lsls	r3, r3, #8
 8006178:	b21a      	sxth	r2, r3
 800617a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800617e:	4313      	orrs	r3, r2
 8006180:	b21b      	sxth	r3, r3
 8006182:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006184:	89fb      	ldrh	r3, [r7, #14]
}
 8006186:	4618      	mov	r0, r3
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
	...

08006194 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800619e:	2300      	movs	r3, #0
 80061a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061aa:	2b40      	cmp	r3, #64	; 0x40
 80061ac:	d005      	beq.n	80061ba <USBD_StdDevReq+0x26>
 80061ae:	2b40      	cmp	r3, #64	; 0x40
 80061b0:	d853      	bhi.n	800625a <USBD_StdDevReq+0xc6>
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00b      	beq.n	80061ce <USBD_StdDevReq+0x3a>
 80061b6:	2b20      	cmp	r3, #32
 80061b8:	d14f      	bne.n	800625a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	6839      	ldr	r1, [r7, #0]
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	4798      	blx	r3
 80061c8:	4603      	mov	r3, r0
 80061ca:	73fb      	strb	r3, [r7, #15]
      break;
 80061cc:	e04a      	b.n	8006264 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	785b      	ldrb	r3, [r3, #1]
 80061d2:	2b09      	cmp	r3, #9
 80061d4:	d83b      	bhi.n	800624e <USBD_StdDevReq+0xba>
 80061d6:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <USBD_StdDevReq+0x48>)
 80061d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061dc:	08006231 	.word	0x08006231
 80061e0:	08006245 	.word	0x08006245
 80061e4:	0800624f 	.word	0x0800624f
 80061e8:	0800623b 	.word	0x0800623b
 80061ec:	0800624f 	.word	0x0800624f
 80061f0:	0800620f 	.word	0x0800620f
 80061f4:	08006205 	.word	0x08006205
 80061f8:	0800624f 	.word	0x0800624f
 80061fc:	08006227 	.word	0x08006227
 8006200:	08006219 	.word	0x08006219
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006204:	6839      	ldr	r1, [r7, #0]
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f9de 	bl	80065c8 <USBD_GetDescriptor>
          break;
 800620c:	e024      	b.n	8006258 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800620e:	6839      	ldr	r1, [r7, #0]
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fb43 	bl	800689c <USBD_SetAddress>
          break;
 8006216:	e01f      	b.n	8006258 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fb82 	bl	8006924 <USBD_SetConfig>
 8006220:	4603      	mov	r3, r0
 8006222:	73fb      	strb	r3, [r7, #15]
          break;
 8006224:	e018      	b.n	8006258 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006226:	6839      	ldr	r1, [r7, #0]
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fc21 	bl	8006a70 <USBD_GetConfig>
          break;
 800622e:	e013      	b.n	8006258 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fc52 	bl	8006adc <USBD_GetStatus>
          break;
 8006238:	e00e      	b.n	8006258 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800623a:	6839      	ldr	r1, [r7, #0]
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fc81 	bl	8006b44 <USBD_SetFeature>
          break;
 8006242:	e009      	b.n	8006258 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006244:	6839      	ldr	r1, [r7, #0]
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fc90 	bl	8006b6c <USBD_ClrFeature>
          break;
 800624c:	e004      	b.n	8006258 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800624e:	6839      	ldr	r1, [r7, #0]
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fce7 	bl	8006c24 <USBD_CtlError>
          break;
 8006256:	bf00      	nop
      }
      break;
 8006258:	e004      	b.n	8006264 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800625a:	6839      	ldr	r1, [r7, #0]
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fce1 	bl	8006c24 <USBD_CtlError>
      break;
 8006262:	bf00      	nop
  }

  return ret;
 8006264:	7bfb      	ldrb	r3, [r7, #15]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop

08006270 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006286:	2b40      	cmp	r3, #64	; 0x40
 8006288:	d005      	beq.n	8006296 <USBD_StdItfReq+0x26>
 800628a:	2b40      	cmp	r3, #64	; 0x40
 800628c:	d82f      	bhi.n	80062ee <USBD_StdItfReq+0x7e>
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <USBD_StdItfReq+0x26>
 8006292:	2b20      	cmp	r3, #32
 8006294:	d12b      	bne.n	80062ee <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800629c:	b2db      	uxtb	r3, r3
 800629e:	3b01      	subs	r3, #1
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d81d      	bhi.n	80062e0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	889b      	ldrh	r3, [r3, #4]
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d813      	bhi.n	80062d6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	6839      	ldr	r1, [r7, #0]
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	4798      	blx	r3
 80062bc:	4603      	mov	r3, r0
 80062be:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	88db      	ldrh	r3, [r3, #6]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d110      	bne.n	80062ea <USBD_StdItfReq+0x7a>
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10d      	bne.n	80062ea <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fd73 	bl	8006dba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80062d4:	e009      	b.n	80062ea <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80062d6:	6839      	ldr	r1, [r7, #0]
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fca3 	bl	8006c24 <USBD_CtlError>
          break;
 80062de:	e004      	b.n	80062ea <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80062e0:	6839      	ldr	r1, [r7, #0]
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fc9e 	bl	8006c24 <USBD_CtlError>
          break;
 80062e8:	e000      	b.n	80062ec <USBD_StdItfReq+0x7c>
          break;
 80062ea:	bf00      	nop
      }
      break;
 80062ec:	e004      	b.n	80062f8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80062ee:	6839      	ldr	r1, [r7, #0]
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fc97 	bl	8006c24 <USBD_CtlError>
      break;
 80062f6:	bf00      	nop
  }

  return ret;
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800630c:	2300      	movs	r3, #0
 800630e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	889b      	ldrh	r3, [r3, #4]
 8006314:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800631e:	2b40      	cmp	r3, #64	; 0x40
 8006320:	d007      	beq.n	8006332 <USBD_StdEPReq+0x30>
 8006322:	2b40      	cmp	r3, #64	; 0x40
 8006324:	f200 8145 	bhi.w	80065b2 <USBD_StdEPReq+0x2b0>
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00c      	beq.n	8006346 <USBD_StdEPReq+0x44>
 800632c:	2b20      	cmp	r3, #32
 800632e:	f040 8140 	bne.w	80065b2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	4798      	blx	r3
 8006340:	4603      	mov	r3, r0
 8006342:	73fb      	strb	r3, [r7, #15]
      break;
 8006344:	e13a      	b.n	80065bc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	785b      	ldrb	r3, [r3, #1]
 800634a:	2b03      	cmp	r3, #3
 800634c:	d007      	beq.n	800635e <USBD_StdEPReq+0x5c>
 800634e:	2b03      	cmp	r3, #3
 8006350:	f300 8129 	bgt.w	80065a6 <USBD_StdEPReq+0x2a4>
 8006354:	2b00      	cmp	r3, #0
 8006356:	d07f      	beq.n	8006458 <USBD_StdEPReq+0x156>
 8006358:	2b01      	cmp	r3, #1
 800635a:	d03c      	beq.n	80063d6 <USBD_StdEPReq+0xd4>
 800635c:	e123      	b.n	80065a6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d002      	beq.n	8006370 <USBD_StdEPReq+0x6e>
 800636a:	2b03      	cmp	r3, #3
 800636c:	d016      	beq.n	800639c <USBD_StdEPReq+0x9a>
 800636e:	e02c      	b.n	80063ca <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006370:	7bbb      	ldrb	r3, [r7, #14]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00d      	beq.n	8006392 <USBD_StdEPReq+0x90>
 8006376:	7bbb      	ldrb	r3, [r7, #14]
 8006378:	2b80      	cmp	r3, #128	; 0x80
 800637a:	d00a      	beq.n	8006392 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800637c:	7bbb      	ldrb	r3, [r7, #14]
 800637e:	4619      	mov	r1, r3
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f001 f921 	bl	80075c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006386:	2180      	movs	r1, #128	; 0x80
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f001 f91d 	bl	80075c8 <USBD_LL_StallEP>
 800638e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006390:	e020      	b.n	80063d4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006392:	6839      	ldr	r1, [r7, #0]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fc45 	bl	8006c24 <USBD_CtlError>
              break;
 800639a:	e01b      	b.n	80063d4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	885b      	ldrh	r3, [r3, #2]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10e      	bne.n	80063c2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80063a4:	7bbb      	ldrb	r3, [r7, #14]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00b      	beq.n	80063c2 <USBD_StdEPReq+0xc0>
 80063aa:	7bbb      	ldrb	r3, [r7, #14]
 80063ac:	2b80      	cmp	r3, #128	; 0x80
 80063ae:	d008      	beq.n	80063c2 <USBD_StdEPReq+0xc0>
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	88db      	ldrh	r3, [r3, #6]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d104      	bne.n	80063c2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80063b8:	7bbb      	ldrb	r3, [r7, #14]
 80063ba:	4619      	mov	r1, r3
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f001 f903 	bl	80075c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fcf9 	bl	8006dba <USBD_CtlSendStatus>

              break;
 80063c8:	e004      	b.n	80063d4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fc29 	bl	8006c24 <USBD_CtlError>
              break;
 80063d2:	bf00      	nop
          }
          break;
 80063d4:	e0ec      	b.n	80065b0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d002      	beq.n	80063e8 <USBD_StdEPReq+0xe6>
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d016      	beq.n	8006414 <USBD_StdEPReq+0x112>
 80063e6:	e030      	b.n	800644a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063e8:	7bbb      	ldrb	r3, [r7, #14]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00d      	beq.n	800640a <USBD_StdEPReq+0x108>
 80063ee:	7bbb      	ldrb	r3, [r7, #14]
 80063f0:	2b80      	cmp	r3, #128	; 0x80
 80063f2:	d00a      	beq.n	800640a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80063f4:	7bbb      	ldrb	r3, [r7, #14]
 80063f6:	4619      	mov	r1, r3
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f001 f8e5 	bl	80075c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80063fe:	2180      	movs	r1, #128	; 0x80
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f001 f8e1 	bl	80075c8 <USBD_LL_StallEP>
 8006406:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006408:	e025      	b.n	8006456 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800640a:	6839      	ldr	r1, [r7, #0]
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fc09 	bl	8006c24 <USBD_CtlError>
              break;
 8006412:	e020      	b.n	8006456 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	885b      	ldrh	r3, [r3, #2]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d11b      	bne.n	8006454 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800641c:	7bbb      	ldrb	r3, [r7, #14]
 800641e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006422:	2b00      	cmp	r3, #0
 8006424:	d004      	beq.n	8006430 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006426:	7bbb      	ldrb	r3, [r7, #14]
 8006428:	4619      	mov	r1, r3
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f001 f8eb 	bl	8007606 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fcc2 	bl	8006dba <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	6839      	ldr	r1, [r7, #0]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	4798      	blx	r3
 8006444:	4603      	mov	r3, r0
 8006446:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006448:	e004      	b.n	8006454 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800644a:	6839      	ldr	r1, [r7, #0]
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fbe9 	bl	8006c24 <USBD_CtlError>
              break;
 8006452:	e000      	b.n	8006456 <USBD_StdEPReq+0x154>
              break;
 8006454:	bf00      	nop
          }
          break;
 8006456:	e0ab      	b.n	80065b0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d002      	beq.n	800646a <USBD_StdEPReq+0x168>
 8006464:	2b03      	cmp	r3, #3
 8006466:	d032      	beq.n	80064ce <USBD_StdEPReq+0x1cc>
 8006468:	e097      	b.n	800659a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800646a:	7bbb      	ldrb	r3, [r7, #14]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d007      	beq.n	8006480 <USBD_StdEPReq+0x17e>
 8006470:	7bbb      	ldrb	r3, [r7, #14]
 8006472:	2b80      	cmp	r3, #128	; 0x80
 8006474:	d004      	beq.n	8006480 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fbd3 	bl	8006c24 <USBD_CtlError>
                break;
 800647e:	e091      	b.n	80065a4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006480:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006484:	2b00      	cmp	r3, #0
 8006486:	da0b      	bge.n	80064a0 <USBD_StdEPReq+0x19e>
 8006488:	7bbb      	ldrb	r3, [r7, #14]
 800648a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800648e:	4613      	mov	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	3310      	adds	r3, #16
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	4413      	add	r3, r2
 800649c:	3304      	adds	r3, #4
 800649e:	e00b      	b.n	80064b8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064a0:	7bbb      	ldrb	r3, [r7, #14]
 80064a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064a6:	4613      	mov	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	4413      	add	r3, r2
 80064b6:	3304      	adds	r3, #4
 80064b8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2200      	movs	r2, #0
 80064be:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2202      	movs	r2, #2
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fc1d 	bl	8006d06 <USBD_CtlSendData>
              break;
 80064cc:	e06a      	b.n	80065a4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80064ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	da11      	bge.n	80064fa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80064d6:	7bbb      	ldrb	r3, [r7, #14]
 80064d8:	f003 020f 	and.w	r2, r3, #15
 80064dc:	6879      	ldr	r1, [r7, #4]
 80064de:	4613      	mov	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4413      	add	r3, r2
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	440b      	add	r3, r1
 80064e8:	3324      	adds	r3, #36	; 0x24
 80064ea:	881b      	ldrh	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d117      	bne.n	8006520 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fb96 	bl	8006c24 <USBD_CtlError>
                  break;
 80064f8:	e054      	b.n	80065a4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064fa:	7bbb      	ldrb	r3, [r7, #14]
 80064fc:	f003 020f 	and.w	r2, r3, #15
 8006500:	6879      	ldr	r1, [r7, #4]
 8006502:	4613      	mov	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	440b      	add	r3, r1
 800650c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d104      	bne.n	8006520 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006516:	6839      	ldr	r1, [r7, #0]
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fb83 	bl	8006c24 <USBD_CtlError>
                  break;
 800651e:	e041      	b.n	80065a4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006520:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006524:	2b00      	cmp	r3, #0
 8006526:	da0b      	bge.n	8006540 <USBD_StdEPReq+0x23e>
 8006528:	7bbb      	ldrb	r3, [r7, #14]
 800652a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800652e:	4613      	mov	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	3310      	adds	r3, #16
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	4413      	add	r3, r2
 800653c:	3304      	adds	r3, #4
 800653e:	e00b      	b.n	8006558 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006540:	7bbb      	ldrb	r3, [r7, #14]
 8006542:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006546:	4613      	mov	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	4413      	add	r3, r2
 8006556:	3304      	adds	r3, #4
 8006558:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800655a:	7bbb      	ldrb	r3, [r7, #14]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <USBD_StdEPReq+0x264>
 8006560:	7bbb      	ldrb	r3, [r7, #14]
 8006562:	2b80      	cmp	r3, #128	; 0x80
 8006564:	d103      	bne.n	800656e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	e00e      	b.n	800658c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800656e:	7bbb      	ldrb	r3, [r7, #14]
 8006570:	4619      	mov	r1, r3
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f001 f866 	bl	8007644 <USBD_LL_IsStallEP>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2201      	movs	r2, #1
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	e002      	b.n	800658c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2200      	movs	r2, #0
 800658a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2202      	movs	r2, #2
 8006590:	4619      	mov	r1, r3
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fbb7 	bl	8006d06 <USBD_CtlSendData>
              break;
 8006598:	e004      	b.n	80065a4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fb41 	bl	8006c24 <USBD_CtlError>
              break;
 80065a2:	bf00      	nop
          }
          break;
 80065a4:	e004      	b.n	80065b0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80065a6:	6839      	ldr	r1, [r7, #0]
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fb3b 	bl	8006c24 <USBD_CtlError>
          break;
 80065ae:	bf00      	nop
      }
      break;
 80065b0:	e004      	b.n	80065bc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fb35 	bl	8006c24 <USBD_CtlError>
      break;
 80065ba:	bf00      	nop
  }

  return ret;
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
	...

080065c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80065d6:	2300      	movs	r3, #0
 80065d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80065da:	2300      	movs	r3, #0
 80065dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	885b      	ldrh	r3, [r3, #2]
 80065e2:	0a1b      	lsrs	r3, r3, #8
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	3b01      	subs	r3, #1
 80065e8:	2b06      	cmp	r3, #6
 80065ea:	f200 8128 	bhi.w	800683e <USBD_GetDescriptor+0x276>
 80065ee:	a201      	add	r2, pc, #4	; (adr r2, 80065f4 <USBD_GetDescriptor+0x2c>)
 80065f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f4:	08006611 	.word	0x08006611
 80065f8:	08006629 	.word	0x08006629
 80065fc:	08006669 	.word	0x08006669
 8006600:	0800683f 	.word	0x0800683f
 8006604:	0800683f 	.word	0x0800683f
 8006608:	080067df 	.word	0x080067df
 800660c:	0800680b 	.word	0x0800680b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	7c12      	ldrb	r2, [r2, #16]
 800661c:	f107 0108 	add.w	r1, r7, #8
 8006620:	4610      	mov	r0, r2
 8006622:	4798      	blx	r3
 8006624:	60f8      	str	r0, [r7, #12]
      break;
 8006626:	e112      	b.n	800684e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	7c1b      	ldrb	r3, [r3, #16]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10d      	bne.n	800664c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006638:	f107 0208 	add.w	r2, r7, #8
 800663c:	4610      	mov	r0, r2
 800663e:	4798      	blx	r3
 8006640:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3301      	adds	r3, #1
 8006646:	2202      	movs	r2, #2
 8006648:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800664a:	e100      	b.n	800684e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006654:	f107 0208 	add.w	r2, r7, #8
 8006658:	4610      	mov	r0, r2
 800665a:	4798      	blx	r3
 800665c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	3301      	adds	r3, #1
 8006662:	2202      	movs	r2, #2
 8006664:	701a      	strb	r2, [r3, #0]
      break;
 8006666:	e0f2      	b.n	800684e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	885b      	ldrh	r3, [r3, #2]
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b05      	cmp	r3, #5
 8006670:	f200 80ac 	bhi.w	80067cc <USBD_GetDescriptor+0x204>
 8006674:	a201      	add	r2, pc, #4	; (adr r2, 800667c <USBD_GetDescriptor+0xb4>)
 8006676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667a:	bf00      	nop
 800667c:	08006695 	.word	0x08006695
 8006680:	080066c9 	.word	0x080066c9
 8006684:	080066fd 	.word	0x080066fd
 8006688:	08006731 	.word	0x08006731
 800668c:	08006765 	.word	0x08006765
 8006690:	08006799 	.word	0x08006799
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00b      	beq.n	80066b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	7c12      	ldrb	r2, [r2, #16]
 80066ac:	f107 0108 	add.w	r1, r7, #8
 80066b0:	4610      	mov	r0, r2
 80066b2:	4798      	blx	r3
 80066b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066b6:	e091      	b.n	80067dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066b8:	6839      	ldr	r1, [r7, #0]
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fab2 	bl	8006c24 <USBD_CtlError>
            err++;
 80066c0:	7afb      	ldrb	r3, [r7, #11]
 80066c2:	3301      	adds	r3, #1
 80066c4:	72fb      	strb	r3, [r7, #11]
          break;
 80066c6:	e089      	b.n	80067dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00b      	beq.n	80066ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	7c12      	ldrb	r2, [r2, #16]
 80066e0:	f107 0108 	add.w	r1, r7, #8
 80066e4:	4610      	mov	r0, r2
 80066e6:	4798      	blx	r3
 80066e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066ea:	e077      	b.n	80067dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fa98 	bl	8006c24 <USBD_CtlError>
            err++;
 80066f4:	7afb      	ldrb	r3, [r7, #11]
 80066f6:	3301      	adds	r3, #1
 80066f8:	72fb      	strb	r3, [r7, #11]
          break;
 80066fa:	e06f      	b.n	80067dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00b      	beq.n	8006720 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	7c12      	ldrb	r2, [r2, #16]
 8006714:	f107 0108 	add.w	r1, r7, #8
 8006718:	4610      	mov	r0, r2
 800671a:	4798      	blx	r3
 800671c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800671e:	e05d      	b.n	80067dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006720:	6839      	ldr	r1, [r7, #0]
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fa7e 	bl	8006c24 <USBD_CtlError>
            err++;
 8006728:	7afb      	ldrb	r3, [r7, #11]
 800672a:	3301      	adds	r3, #1
 800672c:	72fb      	strb	r3, [r7, #11]
          break;
 800672e:	e055      	b.n	80067dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00b      	beq.n	8006754 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	7c12      	ldrb	r2, [r2, #16]
 8006748:	f107 0108 	add.w	r1, r7, #8
 800674c:	4610      	mov	r0, r2
 800674e:	4798      	blx	r3
 8006750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006752:	e043      	b.n	80067dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006754:	6839      	ldr	r1, [r7, #0]
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fa64 	bl	8006c24 <USBD_CtlError>
            err++;
 800675c:	7afb      	ldrb	r3, [r7, #11]
 800675e:	3301      	adds	r3, #1
 8006760:	72fb      	strb	r3, [r7, #11]
          break;
 8006762:	e03b      	b.n	80067dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00b      	beq.n	8006788 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	7c12      	ldrb	r2, [r2, #16]
 800677c:	f107 0108 	add.w	r1, r7, #8
 8006780:	4610      	mov	r0, r2
 8006782:	4798      	blx	r3
 8006784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006786:	e029      	b.n	80067dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006788:	6839      	ldr	r1, [r7, #0]
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fa4a 	bl	8006c24 <USBD_CtlError>
            err++;
 8006790:	7afb      	ldrb	r3, [r7, #11]
 8006792:	3301      	adds	r3, #1
 8006794:	72fb      	strb	r3, [r7, #11]
          break;
 8006796:	e021      	b.n	80067dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00b      	beq.n	80067bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	7c12      	ldrb	r2, [r2, #16]
 80067b0:	f107 0108 	add.w	r1, r7, #8
 80067b4:	4610      	mov	r0, r2
 80067b6:	4798      	blx	r3
 80067b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067ba:	e00f      	b.n	80067dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067bc:	6839      	ldr	r1, [r7, #0]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fa30 	bl	8006c24 <USBD_CtlError>
            err++;
 80067c4:	7afb      	ldrb	r3, [r7, #11]
 80067c6:	3301      	adds	r3, #1
 80067c8:	72fb      	strb	r3, [r7, #11]
          break;
 80067ca:	e007      	b.n	80067dc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80067cc:	6839      	ldr	r1, [r7, #0]
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fa28 	bl	8006c24 <USBD_CtlError>
          err++;
 80067d4:	7afb      	ldrb	r3, [r7, #11]
 80067d6:	3301      	adds	r3, #1
 80067d8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80067da:	bf00      	nop
      }
      break;
 80067dc:	e037      	b.n	800684e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	7c1b      	ldrb	r3, [r3, #16]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d109      	bne.n	80067fa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ee:	f107 0208 	add.w	r2, r7, #8
 80067f2:	4610      	mov	r0, r2
 80067f4:	4798      	blx	r3
 80067f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067f8:	e029      	b.n	800684e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067fa:	6839      	ldr	r1, [r7, #0]
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fa11 	bl	8006c24 <USBD_CtlError>
        err++;
 8006802:	7afb      	ldrb	r3, [r7, #11]
 8006804:	3301      	adds	r3, #1
 8006806:	72fb      	strb	r3, [r7, #11]
      break;
 8006808:	e021      	b.n	800684e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	7c1b      	ldrb	r3, [r3, #16]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10d      	bne.n	800682e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681a:	f107 0208 	add.w	r2, r7, #8
 800681e:	4610      	mov	r0, r2
 8006820:	4798      	blx	r3
 8006822:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	3301      	adds	r3, #1
 8006828:	2207      	movs	r2, #7
 800682a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800682c:	e00f      	b.n	800684e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f9f7 	bl	8006c24 <USBD_CtlError>
        err++;
 8006836:	7afb      	ldrb	r3, [r7, #11]
 8006838:	3301      	adds	r3, #1
 800683a:	72fb      	strb	r3, [r7, #11]
      break;
 800683c:	e007      	b.n	800684e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f9ef 	bl	8006c24 <USBD_CtlError>
      err++;
 8006846:	7afb      	ldrb	r3, [r7, #11]
 8006848:	3301      	adds	r3, #1
 800684a:	72fb      	strb	r3, [r7, #11]
      break;
 800684c:	bf00      	nop
  }

  if (err != 0U)
 800684e:	7afb      	ldrb	r3, [r7, #11]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d11e      	bne.n	8006892 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	88db      	ldrh	r3, [r3, #6]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d016      	beq.n	800688a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800685c:	893b      	ldrh	r3, [r7, #8]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00e      	beq.n	8006880 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	88da      	ldrh	r2, [r3, #6]
 8006866:	893b      	ldrh	r3, [r7, #8]
 8006868:	4293      	cmp	r3, r2
 800686a:	bf28      	it	cs
 800686c:	4613      	movcs	r3, r2
 800686e:	b29b      	uxth	r3, r3
 8006870:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006872:	893b      	ldrh	r3, [r7, #8]
 8006874:	461a      	mov	r2, r3
 8006876:	68f9      	ldr	r1, [r7, #12]
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fa44 	bl	8006d06 <USBD_CtlSendData>
 800687e:	e009      	b.n	8006894 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006880:	6839      	ldr	r1, [r7, #0]
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f9ce 	bl	8006c24 <USBD_CtlError>
 8006888:	e004      	b.n	8006894 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fa95 	bl	8006dba <USBD_CtlSendStatus>
 8006890:	e000      	b.n	8006894 <USBD_GetDescriptor+0x2cc>
    return;
 8006892:	bf00      	nop
  }
}
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop

0800689c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	889b      	ldrh	r3, [r3, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d131      	bne.n	8006912 <USBD_SetAddress+0x76>
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	88db      	ldrh	r3, [r3, #6]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d12d      	bne.n	8006912 <USBD_SetAddress+0x76>
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	885b      	ldrh	r3, [r3, #2]
 80068ba:	2b7f      	cmp	r3, #127	; 0x7f
 80068bc:	d829      	bhi.n	8006912 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	885b      	ldrh	r3, [r3, #2]
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b03      	cmp	r3, #3
 80068d4:	d104      	bne.n	80068e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80068d6:	6839      	ldr	r1, [r7, #0]
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f9a3 	bl	8006c24 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068de:	e01d      	b.n	800691c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	7bfa      	ldrb	r2, [r7, #15]
 80068e4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
 80068ea:	4619      	mov	r1, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fed5 	bl	800769c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fa61 	bl	8006dba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d004      	beq.n	8006908 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2202      	movs	r2, #2
 8006902:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006906:	e009      	b.n	800691c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006910:	e004      	b.n	800691c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006912:	6839      	ldr	r1, [r7, #0]
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f985 	bl	8006c24 <USBD_CtlError>
  }
}
 800691a:	bf00      	nop
 800691c:	bf00      	nop
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	885b      	ldrh	r3, [r3, #2]
 8006936:	b2da      	uxtb	r2, r3
 8006938:	4b4c      	ldr	r3, [pc, #304]	; (8006a6c <USBD_SetConfig+0x148>)
 800693a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800693c:	4b4b      	ldr	r3, [pc, #300]	; (8006a6c <USBD_SetConfig+0x148>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d905      	bls.n	8006950 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f96c 	bl	8006c24 <USBD_CtlError>
    return USBD_FAIL;
 800694c:	2303      	movs	r3, #3
 800694e:	e088      	b.n	8006a62 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b02      	cmp	r3, #2
 800695a:	d002      	beq.n	8006962 <USBD_SetConfig+0x3e>
 800695c:	2b03      	cmp	r3, #3
 800695e:	d025      	beq.n	80069ac <USBD_SetConfig+0x88>
 8006960:	e071      	b.n	8006a46 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006962:	4b42      	ldr	r3, [pc, #264]	; (8006a6c <USBD_SetConfig+0x148>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d01c      	beq.n	80069a4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800696a:	4b40      	ldr	r3, [pc, #256]	; (8006a6c <USBD_SetConfig+0x148>)
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	461a      	mov	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006974:	4b3d      	ldr	r3, [pc, #244]	; (8006a6c <USBD_SetConfig+0x148>)
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	4619      	mov	r1, r3
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7ff f948 	bl	8005c10 <USBD_SetClassConfig>
 8006980:	4603      	mov	r3, r0
 8006982:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006984:	7bfb      	ldrb	r3, [r7, #15]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d004      	beq.n	8006994 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f949 	bl	8006c24 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006992:	e065      	b.n	8006a60 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fa10 	bl	8006dba <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2203      	movs	r2, #3
 800699e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80069a2:	e05d      	b.n	8006a60 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fa08 	bl	8006dba <USBD_CtlSendStatus>
      break;
 80069aa:	e059      	b.n	8006a60 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80069ac:	4b2f      	ldr	r3, [pc, #188]	; (8006a6c <USBD_SetConfig+0x148>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d112      	bne.n	80069da <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80069bc:	4b2b      	ldr	r3, [pc, #172]	; (8006a6c <USBD_SetConfig+0x148>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	461a      	mov	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069c6:	4b29      	ldr	r3, [pc, #164]	; (8006a6c <USBD_SetConfig+0x148>)
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	4619      	mov	r1, r3
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7ff f93b 	bl	8005c48 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f9f1 	bl	8006dba <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80069d8:	e042      	b.n	8006a60 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80069da:	4b24      	ldr	r3, [pc, #144]	; (8006a6c <USBD_SetConfig+0x148>)
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d02a      	beq.n	8006a3e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff f929 	bl	8005c48 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80069f6:	4b1d      	ldr	r3, [pc, #116]	; (8006a6c <USBD_SetConfig+0x148>)
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a00:	4b1a      	ldr	r3, [pc, #104]	; (8006a6c <USBD_SetConfig+0x148>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7ff f902 	bl	8005c10 <USBD_SetClassConfig>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00f      	beq.n	8006a36 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006a16:	6839      	ldr	r1, [r7, #0]
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f903 	bl	8006c24 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	4619      	mov	r1, r3
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7ff f90e 	bl	8005c48 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a34:	e014      	b.n	8006a60 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f9bf 	bl	8006dba <USBD_CtlSendStatus>
      break;
 8006a3c:	e010      	b.n	8006a60 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f9bb 	bl	8006dba <USBD_CtlSendStatus>
      break;
 8006a44:	e00c      	b.n	8006a60 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f8eb 	bl	8006c24 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a4e:	4b07      	ldr	r3, [pc, #28]	; (8006a6c <USBD_SetConfig+0x148>)
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7ff f8f7 	bl	8005c48 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a5e:	bf00      	nop
  }

  return ret;
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	2000019c 	.word	0x2000019c

08006a70 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	88db      	ldrh	r3, [r3, #6]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d004      	beq.n	8006a8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a82:	6839      	ldr	r1, [r7, #0]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f8cd 	bl	8006c24 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a8a:	e023      	b.n	8006ad4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	dc02      	bgt.n	8006a9e <USBD_GetConfig+0x2e>
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	dc03      	bgt.n	8006aa4 <USBD_GetConfig+0x34>
 8006a9c:	e015      	b.n	8006aca <USBD_GetConfig+0x5a>
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d00b      	beq.n	8006aba <USBD_GetConfig+0x4a>
 8006aa2:	e012      	b.n	8006aca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	3308      	adds	r3, #8
 8006aae:	2201      	movs	r2, #1
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f927 	bl	8006d06 <USBD_CtlSendData>
        break;
 8006ab8:	e00c      	b.n	8006ad4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	3304      	adds	r3, #4
 8006abe:	2201      	movs	r2, #1
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f91f 	bl	8006d06 <USBD_CtlSendData>
        break;
 8006ac8:	e004      	b.n	8006ad4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f8a9 	bl	8006c24 <USBD_CtlError>
        break;
 8006ad2:	bf00      	nop
}
 8006ad4:	bf00      	nop
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	3b01      	subs	r3, #1
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d81e      	bhi.n	8006b32 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	88db      	ldrh	r3, [r3, #6]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d004      	beq.n	8006b06 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006afc:	6839      	ldr	r1, [r7, #0]
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f890 	bl	8006c24 <USBD_CtlError>
        break;
 8006b04:	e01a      	b.n	8006b3c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d005      	beq.n	8006b22 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	f043 0202 	orr.w	r2, r3, #2
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	330c      	adds	r3, #12
 8006b26:	2202      	movs	r2, #2
 8006b28:	4619      	mov	r1, r3
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f8eb 	bl	8006d06 <USBD_CtlSendData>
      break;
 8006b30:	e004      	b.n	8006b3c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f875 	bl	8006c24 <USBD_CtlError>
      break;
 8006b3a:	bf00      	nop
  }
}
 8006b3c:	bf00      	nop
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	885b      	ldrh	r3, [r3, #2]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d106      	bne.n	8006b64 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f92b 	bl	8006dba <USBD_CtlSendStatus>
  }
}
 8006b64:	bf00      	nop
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d80b      	bhi.n	8006b9c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	885b      	ldrh	r3, [r3, #2]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d10c      	bne.n	8006ba6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f910 	bl	8006dba <USBD_CtlSendStatus>
      }
      break;
 8006b9a:	e004      	b.n	8006ba6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f840 	bl	8006c24 <USBD_CtlError>
      break;
 8006ba4:	e000      	b.n	8006ba8 <USBD_ClrFeature+0x3c>
      break;
 8006ba6:	bf00      	nop
  }
}
 8006ba8:	bf00      	nop
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	781a      	ldrb	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	781a      	ldrb	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f7ff fabb 	bl	8006156 <SWAPBYTE>
 8006be0:	4603      	mov	r3, r0
 8006be2:	461a      	mov	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	3301      	adds	r3, #1
 8006bec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f7ff faae 	bl	8006156 <SWAPBYTE>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3301      	adds	r3, #1
 8006c06:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f7ff faa1 	bl	8006156 <SWAPBYTE>
 8006c14:	4603      	mov	r3, r0
 8006c16:	461a      	mov	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	80da      	strh	r2, [r3, #6]
}
 8006c1c:	bf00      	nop
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c2e:	2180      	movs	r1, #128	; 0x80
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fcc9 	bl	80075c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c36:	2100      	movs	r1, #0
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fcc5 	bl	80075c8 <USBD_LL_StallEP>
}
 8006c3e:	bf00      	nop
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b086      	sub	sp, #24
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	60f8      	str	r0, [r7, #12]
 8006c4e:	60b9      	str	r1, [r7, #8]
 8006c50:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c52:	2300      	movs	r3, #0
 8006c54:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d036      	beq.n	8006cca <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c60:	6938      	ldr	r0, [r7, #16]
 8006c62:	f000 f836 	bl	8006cd2 <USBD_GetLen>
 8006c66:	4603      	mov	r3, r0
 8006c68:	3301      	adds	r3, #1
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c74:	7dfb      	ldrb	r3, [r7, #23]
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	4413      	add	r3, r2
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	7812      	ldrb	r2, [r2, #0]
 8006c7e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c80:	7dfb      	ldrb	r3, [r7, #23]
 8006c82:	3301      	adds	r3, #1
 8006c84:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c86:	7dfb      	ldrb	r3, [r7, #23]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	2203      	movs	r2, #3
 8006c8e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c90:	7dfb      	ldrb	r3, [r7, #23]
 8006c92:	3301      	adds	r3, #1
 8006c94:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c96:	e013      	b.n	8006cc0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	7812      	ldrb	r2, [r2, #0]
 8006ca2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	613b      	str	r3, [r7, #16]
    idx++;
 8006caa:	7dfb      	ldrb	r3, [r7, #23]
 8006cac:	3301      	adds	r3, #1
 8006cae:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006cb0:	7dfb      	ldrb	r3, [r7, #23]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	701a      	strb	r2, [r3, #0]
    idx++;
 8006cba:	7dfb      	ldrb	r3, [r7, #23]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e7      	bne.n	8006c98 <USBD_GetString+0x52>
 8006cc8:	e000      	b.n	8006ccc <USBD_GetString+0x86>
    return;
 8006cca:	bf00      	nop
  }
}
 8006ccc:	3718      	adds	r7, #24
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b085      	sub	sp, #20
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006ce2:	e005      	b.n	8006cf0 <USBD_GetLen+0x1e>
  {
    len++;
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	3301      	adds	r3, #1
 8006cee:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1f5      	bne.n	8006ce4 <USBD_GetLen+0x12>
  }

  return len;
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2202      	movs	r2, #2
 8006d16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 fcd4 	bl	80076da <USBD_LL_Transmit>

  return USBD_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 fcc3 	bl	80076da <USBD_LL_Transmit>

  return USBD_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	60f8      	str	r0, [r7, #12]
 8006d66:	60b9      	str	r1, [r7, #8]
 8006d68:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2203      	movs	r2, #3
 8006d6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	2100      	movs	r1, #0
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 fcc7 	bl	800771c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	2100      	movs	r1, #0
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 fcb6 	bl	800771c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b082      	sub	sp, #8
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2204      	movs	r2, #4
 8006dc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006dca:	2300      	movs	r3, #0
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2100      	movs	r1, #0
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fc82 	bl	80076da <USBD_LL_Transmit>

  return USBD_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2205      	movs	r2, #5
 8006dec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006df0:	2300      	movs	r3, #0
 8006df2:	2200      	movs	r2, #0
 8006df4:	2100      	movs	r1, #0
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fc90 	bl	800771c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3708      	adds	r7, #8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
	...

08006e08 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	4912      	ldr	r1, [pc, #72]	; (8006e58 <MX_USB_DEVICE_Init+0x50>)
 8006e10:	4812      	ldr	r0, [pc, #72]	; (8006e5c <MX_USB_DEVICE_Init+0x54>)
 8006e12:	f7fe fe8f 	bl	8005b34 <USBD_Init>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e1c:	f7f9 fd7e 	bl	800091c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006e20:	490f      	ldr	r1, [pc, #60]	; (8006e60 <MX_USB_DEVICE_Init+0x58>)
 8006e22:	480e      	ldr	r0, [pc, #56]	; (8006e5c <MX_USB_DEVICE_Init+0x54>)
 8006e24:	f7fe feb6 	bl	8005b94 <USBD_RegisterClass>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e2e:	f7f9 fd75 	bl	800091c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006e32:	490c      	ldr	r1, [pc, #48]	; (8006e64 <MX_USB_DEVICE_Init+0x5c>)
 8006e34:	4809      	ldr	r0, [pc, #36]	; (8006e5c <MX_USB_DEVICE_Init+0x54>)
 8006e36:	f7fe fe07 	bl	8005a48 <USBD_CDC_RegisterInterface>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e40:	f7f9 fd6c 	bl	800091c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e44:	4805      	ldr	r0, [pc, #20]	; (8006e5c <MX_USB_DEVICE_Init+0x54>)
 8006e46:	f7fe fecc 	bl	8005be2 <USBD_Start>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e50:	f7f9 fd64 	bl	800091c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e54:	bf00      	nop
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	20000130 	.word	0x20000130
 8006e5c:	200004b8 	.word	0x200004b8
 8006e60:	20000018 	.word	0x20000018
 8006e64:	2000011c 	.word	0x2000011c

08006e68 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	4905      	ldr	r1, [pc, #20]	; (8006e84 <CDC_Init_FS+0x1c>)
 8006e70:	4805      	ldr	r0, [pc, #20]	; (8006e88 <CDC_Init_FS+0x20>)
 8006e72:	f7fe fdfe 	bl	8005a72 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e76:	4905      	ldr	r1, [pc, #20]	; (8006e8c <CDC_Init_FS+0x24>)
 8006e78:	4803      	ldr	r0, [pc, #12]	; (8006e88 <CDC_Init_FS+0x20>)
 8006e7a:	f7fe fe18 	bl	8005aae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e7e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20000f88 	.word	0x20000f88
 8006e88:	200004b8 	.word	0x200004b8
 8006e8c:	20000788 	.word	0x20000788

08006e90 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006e94:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	6039      	str	r1, [r7, #0]
 8006eaa:	71fb      	strb	r3, [r7, #7]
 8006eac:	4613      	mov	r3, r2
 8006eae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006eb0:	79fb      	ldrb	r3, [r7, #7]
 8006eb2:	2b23      	cmp	r3, #35	; 0x23
 8006eb4:	d84a      	bhi.n	8006f4c <CDC_Control_FS+0xac>
 8006eb6:	a201      	add	r2, pc, #4	; (adr r2, 8006ebc <CDC_Control_FS+0x1c>)
 8006eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ebc:	08006f4d 	.word	0x08006f4d
 8006ec0:	08006f4d 	.word	0x08006f4d
 8006ec4:	08006f4d 	.word	0x08006f4d
 8006ec8:	08006f4d 	.word	0x08006f4d
 8006ecc:	08006f4d 	.word	0x08006f4d
 8006ed0:	08006f4d 	.word	0x08006f4d
 8006ed4:	08006f4d 	.word	0x08006f4d
 8006ed8:	08006f4d 	.word	0x08006f4d
 8006edc:	08006f4d 	.word	0x08006f4d
 8006ee0:	08006f4d 	.word	0x08006f4d
 8006ee4:	08006f4d 	.word	0x08006f4d
 8006ee8:	08006f4d 	.word	0x08006f4d
 8006eec:	08006f4d 	.word	0x08006f4d
 8006ef0:	08006f4d 	.word	0x08006f4d
 8006ef4:	08006f4d 	.word	0x08006f4d
 8006ef8:	08006f4d 	.word	0x08006f4d
 8006efc:	08006f4d 	.word	0x08006f4d
 8006f00:	08006f4d 	.word	0x08006f4d
 8006f04:	08006f4d 	.word	0x08006f4d
 8006f08:	08006f4d 	.word	0x08006f4d
 8006f0c:	08006f4d 	.word	0x08006f4d
 8006f10:	08006f4d 	.word	0x08006f4d
 8006f14:	08006f4d 	.word	0x08006f4d
 8006f18:	08006f4d 	.word	0x08006f4d
 8006f1c:	08006f4d 	.word	0x08006f4d
 8006f20:	08006f4d 	.word	0x08006f4d
 8006f24:	08006f4d 	.word	0x08006f4d
 8006f28:	08006f4d 	.word	0x08006f4d
 8006f2c:	08006f4d 	.word	0x08006f4d
 8006f30:	08006f4d 	.word	0x08006f4d
 8006f34:	08006f4d 	.word	0x08006f4d
 8006f38:	08006f4d 	.word	0x08006f4d
 8006f3c:	08006f4d 	.word	0x08006f4d
 8006f40:	08006f4d 	.word	0x08006f4d
 8006f44:	08006f4d 	.word	0x08006f4d
 8006f48:	08006f4d 	.word	0x08006f4d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f4c:	bf00      	nop
  }

  return (USBD_OK);
 8006f4e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f66:	6879      	ldr	r1, [r7, #4]
 8006f68:	4805      	ldr	r0, [pc, #20]	; (8006f80 <CDC_Receive_FS+0x24>)
 8006f6a:	f7fe fda0 	bl	8005aae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f6e:	4804      	ldr	r0, [pc, #16]	; (8006f80 <CDC_Receive_FS+0x24>)
 8006f70:	f7fe fdb6 	bl	8005ae0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006f74:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	200004b8 	.word	0x200004b8

08006f84 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006f96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	371c      	adds	r7, #28
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
	...

08006fa8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	4603      	mov	r3, r0
 8006fb0:	6039      	str	r1, [r7, #0]
 8006fb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	2212      	movs	r2, #18
 8006fb8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006fba:	4b03      	ldr	r3, [pc, #12]	; (8006fc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	2000014c 	.word	0x2000014c

08006fcc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	6039      	str	r1, [r7, #0]
 8006fd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	2204      	movs	r2, #4
 8006fdc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006fde:	4b03      	ldr	r3, [pc, #12]	; (8006fec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	20000160 	.word	0x20000160

08006ff0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	6039      	str	r1, [r7, #0]
 8006ffa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ffc:	79fb      	ldrb	r3, [r7, #7]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d105      	bne.n	800700e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	4907      	ldr	r1, [pc, #28]	; (8007024 <USBD_FS_ProductStrDescriptor+0x34>)
 8007006:	4808      	ldr	r0, [pc, #32]	; (8007028 <USBD_FS_ProductStrDescriptor+0x38>)
 8007008:	f7ff fe1d 	bl	8006c46 <USBD_GetString>
 800700c:	e004      	b.n	8007018 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	4904      	ldr	r1, [pc, #16]	; (8007024 <USBD_FS_ProductStrDescriptor+0x34>)
 8007012:	4805      	ldr	r0, [pc, #20]	; (8007028 <USBD_FS_ProductStrDescriptor+0x38>)
 8007014:	f7ff fe17 	bl	8006c46 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007018:	4b02      	ldr	r3, [pc, #8]	; (8007024 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20001788 	.word	0x20001788
 8007028:	0800787c 	.word	0x0800787c

0800702c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	4603      	mov	r3, r0
 8007034:	6039      	str	r1, [r7, #0]
 8007036:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	4904      	ldr	r1, [pc, #16]	; (800704c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800703c:	4804      	ldr	r0, [pc, #16]	; (8007050 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800703e:	f7ff fe02 	bl	8006c46 <USBD_GetString>
  return USBD_StrDesc;
 8007042:	4b02      	ldr	r3, [pc, #8]	; (800704c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007044:	4618      	mov	r0, r3
 8007046:	3708      	adds	r7, #8
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	20001788 	.word	0x20001788
 8007050:	08007894 	.word	0x08007894

08007054 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	4603      	mov	r3, r0
 800705c:	6039      	str	r1, [r7, #0]
 800705e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	221a      	movs	r2, #26
 8007064:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007066:	f000 f843 	bl	80070f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800706a:	4b02      	ldr	r3, [pc, #8]	; (8007074 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800706c:	4618      	mov	r0, r3
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	20000164 	.word	0x20000164

08007078 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	4603      	mov	r3, r0
 8007080:	6039      	str	r1, [r7, #0]
 8007082:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007084:	79fb      	ldrb	r3, [r7, #7]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d105      	bne.n	8007096 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	4907      	ldr	r1, [pc, #28]	; (80070ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800708e:	4808      	ldr	r0, [pc, #32]	; (80070b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007090:	f7ff fdd9 	bl	8006c46 <USBD_GetString>
 8007094:	e004      	b.n	80070a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	4904      	ldr	r1, [pc, #16]	; (80070ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800709a:	4805      	ldr	r0, [pc, #20]	; (80070b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800709c:	f7ff fdd3 	bl	8006c46 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070a0:	4b02      	ldr	r3, [pc, #8]	; (80070ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	20001788 	.word	0x20001788
 80070b0:	080078a8 	.word	0x080078a8

080070b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	4603      	mov	r3, r0
 80070bc:	6039      	str	r1, [r7, #0]
 80070be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80070c0:	79fb      	ldrb	r3, [r7, #7]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d105      	bne.n	80070d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	4907      	ldr	r1, [pc, #28]	; (80070e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80070ca:	4808      	ldr	r0, [pc, #32]	; (80070ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80070cc:	f7ff fdbb 	bl	8006c46 <USBD_GetString>
 80070d0:	e004      	b.n	80070dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	4904      	ldr	r1, [pc, #16]	; (80070e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80070d6:	4805      	ldr	r0, [pc, #20]	; (80070ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80070d8:	f7ff fdb5 	bl	8006c46 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070dc:	4b02      	ldr	r3, [pc, #8]	; (80070e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	20001788 	.word	0x20001788
 80070ec:	080078b4 	.word	0x080078b4

080070f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80070f6:	4b0f      	ldr	r3, [pc, #60]	; (8007134 <Get_SerialNum+0x44>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80070fc:	4b0e      	ldr	r3, [pc, #56]	; (8007138 <Get_SerialNum+0x48>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007102:	4b0e      	ldr	r3, [pc, #56]	; (800713c <Get_SerialNum+0x4c>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4413      	add	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d009      	beq.n	800712a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007116:	2208      	movs	r2, #8
 8007118:	4909      	ldr	r1, [pc, #36]	; (8007140 <Get_SerialNum+0x50>)
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f000 f814 	bl	8007148 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007120:	2204      	movs	r2, #4
 8007122:	4908      	ldr	r1, [pc, #32]	; (8007144 <Get_SerialNum+0x54>)
 8007124:	68b8      	ldr	r0, [r7, #8]
 8007126:	f000 f80f 	bl	8007148 <IntToUnicode>
  }
}
 800712a:	bf00      	nop
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	1fff7a10 	.word	0x1fff7a10
 8007138:	1fff7a14 	.word	0x1fff7a14
 800713c:	1fff7a18 	.word	0x1fff7a18
 8007140:	20000166 	.word	0x20000166
 8007144:	20000176 	.word	0x20000176

08007148 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007148:	b480      	push	{r7}
 800714a:	b087      	sub	sp, #28
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	4613      	mov	r3, r2
 8007154:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007156:	2300      	movs	r3, #0
 8007158:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800715a:	2300      	movs	r3, #0
 800715c:	75fb      	strb	r3, [r7, #23]
 800715e:	e027      	b.n	80071b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	0f1b      	lsrs	r3, r3, #28
 8007164:	2b09      	cmp	r3, #9
 8007166:	d80b      	bhi.n	8007180 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	0f1b      	lsrs	r3, r3, #28
 800716c:	b2da      	uxtb	r2, r3
 800716e:	7dfb      	ldrb	r3, [r7, #23]
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	4619      	mov	r1, r3
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	440b      	add	r3, r1
 8007178:	3230      	adds	r2, #48	; 0x30
 800717a:	b2d2      	uxtb	r2, r2
 800717c:	701a      	strb	r2, [r3, #0]
 800717e:	e00a      	b.n	8007196 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	0f1b      	lsrs	r3, r3, #28
 8007184:	b2da      	uxtb	r2, r3
 8007186:	7dfb      	ldrb	r3, [r7, #23]
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	4619      	mov	r1, r3
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	440b      	add	r3, r1
 8007190:	3237      	adds	r2, #55	; 0x37
 8007192:	b2d2      	uxtb	r2, r2
 8007194:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	011b      	lsls	r3, r3, #4
 800719a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800719c:	7dfb      	ldrb	r3, [r7, #23]
 800719e:	005b      	lsls	r3, r3, #1
 80071a0:	3301      	adds	r3, #1
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	4413      	add	r3, r2
 80071a6:	2200      	movs	r2, #0
 80071a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80071aa:	7dfb      	ldrb	r3, [r7, #23]
 80071ac:	3301      	adds	r3, #1
 80071ae:	75fb      	strb	r3, [r7, #23]
 80071b0:	7dfa      	ldrb	r2, [r7, #23]
 80071b2:	79fb      	ldrb	r3, [r7, #7]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d3d3      	bcc.n	8007160 <IntToUnicode+0x18>
  }
}
 80071b8:	bf00      	nop
 80071ba:	bf00      	nop
 80071bc:	371c      	adds	r7, #28
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
	...

080071c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08a      	sub	sp, #40	; 0x28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071d0:	f107 0314 	add.w	r3, r7, #20
 80071d4:	2200      	movs	r2, #0
 80071d6:	601a      	str	r2, [r3, #0]
 80071d8:	605a      	str	r2, [r3, #4]
 80071da:	609a      	str	r2, [r3, #8]
 80071dc:	60da      	str	r2, [r3, #12]
 80071de:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071e8:	d147      	bne.n	800727a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071ea:	2300      	movs	r3, #0
 80071ec:	613b      	str	r3, [r7, #16]
 80071ee:	4b25      	ldr	r3, [pc, #148]	; (8007284 <HAL_PCD_MspInit+0xbc>)
 80071f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f2:	4a24      	ldr	r2, [pc, #144]	; (8007284 <HAL_PCD_MspInit+0xbc>)
 80071f4:	f043 0301 	orr.w	r3, r3, #1
 80071f8:	6313      	str	r3, [r2, #48]	; 0x30
 80071fa:	4b22      	ldr	r3, [pc, #136]	; (8007284 <HAL_PCD_MspInit+0xbc>)
 80071fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	613b      	str	r3, [r7, #16]
 8007204:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007206:	f44f 7300 	mov.w	r3, #512	; 0x200
 800720a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800720c:	2300      	movs	r3, #0
 800720e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007210:	2300      	movs	r3, #0
 8007212:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007214:	f107 0314 	add.w	r3, r7, #20
 8007218:	4619      	mov	r1, r3
 800721a:	481b      	ldr	r0, [pc, #108]	; (8007288 <HAL_PCD_MspInit+0xc0>)
 800721c:	f7f9 fed4 	bl	8000fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007220:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007226:	2302      	movs	r3, #2
 8007228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800722a:	2300      	movs	r3, #0
 800722c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800722e:	2300      	movs	r3, #0
 8007230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007232:	230a      	movs	r3, #10
 8007234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007236:	f107 0314 	add.w	r3, r7, #20
 800723a:	4619      	mov	r1, r3
 800723c:	4812      	ldr	r0, [pc, #72]	; (8007288 <HAL_PCD_MspInit+0xc0>)
 800723e:	f7f9 fec3 	bl	8000fc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007242:	4b10      	ldr	r3, [pc, #64]	; (8007284 <HAL_PCD_MspInit+0xbc>)
 8007244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007246:	4a0f      	ldr	r2, [pc, #60]	; (8007284 <HAL_PCD_MspInit+0xbc>)
 8007248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800724c:	6353      	str	r3, [r2, #52]	; 0x34
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	4b0c      	ldr	r3, [pc, #48]	; (8007284 <HAL_PCD_MspInit+0xbc>)
 8007254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007256:	4a0b      	ldr	r2, [pc, #44]	; (8007284 <HAL_PCD_MspInit+0xbc>)
 8007258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800725c:	6453      	str	r3, [r2, #68]	; 0x44
 800725e:	4b09      	ldr	r3, [pc, #36]	; (8007284 <HAL_PCD_MspInit+0xbc>)
 8007260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800726a:	2200      	movs	r2, #0
 800726c:	2100      	movs	r1, #0
 800726e:	2043      	movs	r0, #67	; 0x43
 8007270:	f7f9 fe73 	bl	8000f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007274:	2043      	movs	r0, #67	; 0x43
 8007276:	f7f9 fe8c 	bl	8000f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800727a:	bf00      	nop
 800727c:	3728      	adds	r7, #40	; 0x28
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	40023800 	.word	0x40023800
 8007288:	40020000 	.word	0x40020000

0800728c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80072a0:	4619      	mov	r1, r3
 80072a2:	4610      	mov	r0, r2
 80072a4:	f7fe fce8 	bl	8005c78 <USBD_LL_SetupStage>
}
 80072a8:	bf00      	nop
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	460b      	mov	r3, r1
 80072ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80072c2:	78fa      	ldrb	r2, [r7, #3]
 80072c4:	6879      	ldr	r1, [r7, #4]
 80072c6:	4613      	mov	r3, r2
 80072c8:	00db      	lsls	r3, r3, #3
 80072ca:	1a9b      	subs	r3, r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	440b      	add	r3, r1
 80072d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	78fb      	ldrb	r3, [r7, #3]
 80072d8:	4619      	mov	r1, r3
 80072da:	f7fe fd22 	bl	8005d22 <USBD_LL_DataOutStage>
}
 80072de:	bf00      	nop
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b082      	sub	sp, #8
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	460b      	mov	r3, r1
 80072f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80072f8:	78fa      	ldrb	r2, [r7, #3]
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	4613      	mov	r3, r2
 80072fe:	00db      	lsls	r3, r3, #3
 8007300:	1a9b      	subs	r3, r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	440b      	add	r3, r1
 8007306:	3348      	adds	r3, #72	; 0x48
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	78fb      	ldrb	r3, [r7, #3]
 800730c:	4619      	mov	r1, r3
 800730e:	f7fe fd6b 	bl	8005de8 <USBD_LL_DataInStage>
}
 8007312:	bf00      	nop
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b082      	sub	sp, #8
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007328:	4618      	mov	r0, r3
 800732a:	f7fe fe7f 	bl	800602c <USBD_LL_SOF>
}
 800732e:	bf00      	nop
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b084      	sub	sp, #16
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800733e:	2301      	movs	r3, #1
 8007340:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d102      	bne.n	8007350 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800734a:	2300      	movs	r3, #0
 800734c:	73fb      	strb	r3, [r7, #15]
 800734e:	e008      	b.n	8007362 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	2b02      	cmp	r3, #2
 8007356:	d102      	bne.n	800735e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007358:	2301      	movs	r3, #1
 800735a:	73fb      	strb	r3, [r7, #15]
 800735c:	e001      	b.n	8007362 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800735e:	f7f9 fadd 	bl	800091c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007368:	7bfa      	ldrb	r2, [r7, #15]
 800736a:	4611      	mov	r1, r2
 800736c:	4618      	mov	r0, r3
 800736e:	f7fe fe1f 	bl	8005fb0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007378:	4618      	mov	r0, r3
 800737a:	f7fe fdcb 	bl	8005f14 <USBD_LL_Reset>
}
 800737e:	bf00      	nop
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007396:	4618      	mov	r0, r3
 8007398:	f7fe fe1a 	bl	8005fd0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	6812      	ldr	r2, [r2, #0]
 80073aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073ae:	f043 0301 	orr.w	r3, r3, #1
 80073b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d005      	beq.n	80073c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80073bc:	4b04      	ldr	r3, [pc, #16]	; (80073d0 <HAL_PCD_SuspendCallback+0x48>)
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	4a03      	ldr	r2, [pc, #12]	; (80073d0 <HAL_PCD_SuspendCallback+0x48>)
 80073c2:	f043 0306 	orr.w	r3, r3, #6
 80073c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80073c8:	bf00      	nop
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	e000ed00 	.word	0xe000ed00

080073d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fe fe0a 	bl	8005ffc <USBD_LL_Resume>
}
 80073e8:	bf00      	nop
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	460b      	mov	r3, r1
 80073fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007402:	78fa      	ldrb	r2, [r7, #3]
 8007404:	4611      	mov	r1, r2
 8007406:	4618      	mov	r0, r3
 8007408:	f7fe fe58 	bl	80060bc <USBD_LL_IsoOUTIncomplete>
}
 800740c:	bf00      	nop
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	460b      	mov	r3, r1
 800741e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007426:	78fa      	ldrb	r2, [r7, #3]
 8007428:	4611      	mov	r1, r2
 800742a:	4618      	mov	r0, r3
 800742c:	f7fe fe20 	bl	8006070 <USBD_LL_IsoINIncomplete>
}
 8007430:	bf00      	nop
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007446:	4618      	mov	r0, r3
 8007448:	f7fe fe5e 	bl	8006108 <USBD_LL_DevConnected>
}
 800744c:	bf00      	nop
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007462:	4618      	mov	r0, r3
 8007464:	f7fe fe5b 	bl	800611e <USBD_LL_DevDisconnected>
}
 8007468:	bf00      	nop
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d13c      	bne.n	80074fa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007480:	4a20      	ldr	r2, [pc, #128]	; (8007504 <USBD_LL_Init+0x94>)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a1e      	ldr	r2, [pc, #120]	; (8007504 <USBD_LL_Init+0x94>)
 800748c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007490:	4b1c      	ldr	r3, [pc, #112]	; (8007504 <USBD_LL_Init+0x94>)
 8007492:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007496:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007498:	4b1a      	ldr	r3, [pc, #104]	; (8007504 <USBD_LL_Init+0x94>)
 800749a:	2204      	movs	r2, #4
 800749c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800749e:	4b19      	ldr	r3, [pc, #100]	; (8007504 <USBD_LL_Init+0x94>)
 80074a0:	2202      	movs	r2, #2
 80074a2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80074a4:	4b17      	ldr	r3, [pc, #92]	; (8007504 <USBD_LL_Init+0x94>)
 80074a6:	2200      	movs	r2, #0
 80074a8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80074aa:	4b16      	ldr	r3, [pc, #88]	; (8007504 <USBD_LL_Init+0x94>)
 80074ac:	2202      	movs	r2, #2
 80074ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80074b0:	4b14      	ldr	r3, [pc, #80]	; (8007504 <USBD_LL_Init+0x94>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80074b6:	4b13      	ldr	r3, [pc, #76]	; (8007504 <USBD_LL_Init+0x94>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80074bc:	4b11      	ldr	r3, [pc, #68]	; (8007504 <USBD_LL_Init+0x94>)
 80074be:	2200      	movs	r2, #0
 80074c0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80074c2:	4b10      	ldr	r3, [pc, #64]	; (8007504 <USBD_LL_Init+0x94>)
 80074c4:	2201      	movs	r2, #1
 80074c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80074c8:	4b0e      	ldr	r3, [pc, #56]	; (8007504 <USBD_LL_Init+0x94>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80074ce:	480d      	ldr	r0, [pc, #52]	; (8007504 <USBD_LL_Init+0x94>)
 80074d0:	f7fa fd14 	bl	8001efc <HAL_PCD_Init>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80074da:	f7f9 fa1f 	bl	800091c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80074de:	2180      	movs	r1, #128	; 0x80
 80074e0:	4808      	ldr	r0, [pc, #32]	; (8007504 <USBD_LL_Init+0x94>)
 80074e2:	f7fb fe72 	bl	80031ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80074e6:	2240      	movs	r2, #64	; 0x40
 80074e8:	2100      	movs	r1, #0
 80074ea:	4806      	ldr	r0, [pc, #24]	; (8007504 <USBD_LL_Init+0x94>)
 80074ec:	f7fb fe26 	bl	800313c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80074f0:	2280      	movs	r2, #128	; 0x80
 80074f2:	2101      	movs	r1, #1
 80074f4:	4803      	ldr	r0, [pc, #12]	; (8007504 <USBD_LL_Init+0x94>)
 80074f6:	f7fb fe21 	bl	800313c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	20001988 	.word	0x20001988

08007508 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800751e:	4618      	mov	r0, r3
 8007520:	f7fa fe09 	bl	8002136 <HAL_PCD_Start>
 8007524:	4603      	mov	r3, r0
 8007526:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007528:	7bfb      	ldrb	r3, [r7, #15]
 800752a:	4618      	mov	r0, r3
 800752c:	f000 f942 	bl	80077b4 <USBD_Get_USB_Status>
 8007530:	4603      	mov	r3, r0
 8007532:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007534:	7bbb      	ldrb	r3, [r7, #14]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	4608      	mov	r0, r1
 8007548:	4611      	mov	r1, r2
 800754a:	461a      	mov	r2, r3
 800754c:	4603      	mov	r3, r0
 800754e:	70fb      	strb	r3, [r7, #3]
 8007550:	460b      	mov	r3, r1
 8007552:	70bb      	strb	r3, [r7, #2]
 8007554:	4613      	mov	r3, r2
 8007556:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007558:	2300      	movs	r3, #0
 800755a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800755c:	2300      	movs	r3, #0
 800755e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007566:	78bb      	ldrb	r3, [r7, #2]
 8007568:	883a      	ldrh	r2, [r7, #0]
 800756a:	78f9      	ldrb	r1, [r7, #3]
 800756c:	f7fb f9ed 	bl	800294a <HAL_PCD_EP_Open>
 8007570:	4603      	mov	r3, r0
 8007572:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	4618      	mov	r0, r3
 8007578:	f000 f91c 	bl	80077b4 <USBD_Get_USB_Status>
 800757c:	4603      	mov	r3, r0
 800757e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007580:	7bbb      	ldrb	r3, [r7, #14]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	460b      	mov	r3, r1
 8007594:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075a4:	78fa      	ldrb	r2, [r7, #3]
 80075a6:	4611      	mov	r1, r2
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fb fa36 	bl	8002a1a <HAL_PCD_EP_Close>
 80075ae:	4603      	mov	r3, r0
 80075b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f000 f8fd 	bl	80077b4 <USBD_Get_USB_Status>
 80075ba:	4603      	mov	r3, r0
 80075bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075be:	7bbb      	ldrb	r3, [r7, #14]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	460b      	mov	r3, r1
 80075d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075d8:	2300      	movs	r3, #0
 80075da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075e2:	78fa      	ldrb	r2, [r7, #3]
 80075e4:	4611      	mov	r1, r2
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fb fb0e 	bl	8002c08 <HAL_PCD_EP_SetStall>
 80075ec:	4603      	mov	r3, r0
 80075ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 f8de 	bl	80077b4 <USBD_Get_USB_Status>
 80075f8:	4603      	mov	r3, r0
 80075fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b084      	sub	sp, #16
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	460b      	mov	r3, r1
 8007610:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007612:	2300      	movs	r3, #0
 8007614:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007620:	78fa      	ldrb	r2, [r7, #3]
 8007622:	4611      	mov	r1, r2
 8007624:	4618      	mov	r0, r3
 8007626:	f7fb fb53 	bl	8002cd0 <HAL_PCD_EP_ClrStall>
 800762a:	4603      	mov	r3, r0
 800762c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800762e:	7bfb      	ldrb	r3, [r7, #15]
 8007630:	4618      	mov	r0, r3
 8007632:	f000 f8bf 	bl	80077b4 <USBD_Get_USB_Status>
 8007636:	4603      	mov	r3, r0
 8007638:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800763a:	7bbb      	ldrb	r3, [r7, #14]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	460b      	mov	r3, r1
 800764e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007656:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800765c:	2b00      	cmp	r3, #0
 800765e:	da0b      	bge.n	8007678 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007660:	78fb      	ldrb	r3, [r7, #3]
 8007662:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007666:	68f9      	ldr	r1, [r7, #12]
 8007668:	4613      	mov	r3, r2
 800766a:	00db      	lsls	r3, r3, #3
 800766c:	1a9b      	subs	r3, r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	440b      	add	r3, r1
 8007672:	333e      	adds	r3, #62	; 0x3e
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	e00b      	b.n	8007690 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007678:	78fb      	ldrb	r3, [r7, #3]
 800767a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800767e:	68f9      	ldr	r1, [r7, #12]
 8007680:	4613      	mov	r3, r2
 8007682:	00db      	lsls	r3, r3, #3
 8007684:	1a9b      	subs	r3, r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	440b      	add	r3, r1
 800768a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800768e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076b6:	78fa      	ldrb	r2, [r7, #3]
 80076b8:	4611      	mov	r1, r2
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7fb f920 	bl	8002900 <HAL_PCD_SetAddress>
 80076c0:	4603      	mov	r3, r0
 80076c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076c4:	7bfb      	ldrb	r3, [r7, #15]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 f874 	bl	80077b4 <USBD_Get_USB_Status>
 80076cc:	4603      	mov	r3, r0
 80076ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b086      	sub	sp, #24
 80076de:	af00      	add	r7, sp, #0
 80076e0:	60f8      	str	r0, [r7, #12]
 80076e2:	607a      	str	r2, [r7, #4]
 80076e4:	603b      	str	r3, [r7, #0]
 80076e6:	460b      	mov	r3, r1
 80076e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076ea:	2300      	movs	r3, #0
 80076ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80076f8:	7af9      	ldrb	r1, [r7, #11]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	f7fb fa39 	bl	8002b74 <HAL_PCD_EP_Transmit>
 8007702:	4603      	mov	r3, r0
 8007704:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007706:	7dfb      	ldrb	r3, [r7, #23]
 8007708:	4618      	mov	r0, r3
 800770a:	f000 f853 	bl	80077b4 <USBD_Get_USB_Status>
 800770e:	4603      	mov	r3, r0
 8007710:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007712:	7dbb      	ldrb	r3, [r7, #22]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3718      	adds	r7, #24
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	607a      	str	r2, [r7, #4]
 8007726:	603b      	str	r3, [r7, #0]
 8007728:	460b      	mov	r3, r1
 800772a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800772c:	2300      	movs	r3, #0
 800772e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007730:	2300      	movs	r3, #0
 8007732:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800773a:	7af9      	ldrb	r1, [r7, #11]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	f7fb f9b5 	bl	8002aae <HAL_PCD_EP_Receive>
 8007744:	4603      	mov	r3, r0
 8007746:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007748:	7dfb      	ldrb	r3, [r7, #23]
 800774a:	4618      	mov	r0, r3
 800774c:	f000 f832 	bl	80077b4 <USBD_Get_USB_Status>
 8007750:	4603      	mov	r3, r0
 8007752:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007754:	7dbb      	ldrb	r3, [r7, #22]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3718      	adds	r7, #24
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b082      	sub	sp, #8
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	460b      	mov	r3, r1
 8007768:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007770:	78fa      	ldrb	r2, [r7, #3]
 8007772:	4611      	mov	r1, r2
 8007774:	4618      	mov	r0, r3
 8007776:	f7fb f9e5 	bl	8002b44 <HAL_PCD_EP_GetRxCount>
 800777a:	4603      	mov	r3, r0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3708      	adds	r7, #8
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800778c:	4b03      	ldr	r3, [pc, #12]	; (800779c <USBD_static_malloc+0x18>)
}
 800778e:	4618      	mov	r0, r3
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	200001a0 	.word	0x200001a0

080077a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]

}
 80077a8:	bf00      	nop
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	4603      	mov	r3, r0
 80077bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80077c2:	79fb      	ldrb	r3, [r7, #7]
 80077c4:	2b03      	cmp	r3, #3
 80077c6:	d817      	bhi.n	80077f8 <USBD_Get_USB_Status+0x44>
 80077c8:	a201      	add	r2, pc, #4	; (adr r2, 80077d0 <USBD_Get_USB_Status+0x1c>)
 80077ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ce:	bf00      	nop
 80077d0:	080077e1 	.word	0x080077e1
 80077d4:	080077e7 	.word	0x080077e7
 80077d8:	080077ed 	.word	0x080077ed
 80077dc:	080077f3 	.word	0x080077f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80077e0:	2300      	movs	r3, #0
 80077e2:	73fb      	strb	r3, [r7, #15]
    break;
 80077e4:	e00b      	b.n	80077fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80077e6:	2303      	movs	r3, #3
 80077e8:	73fb      	strb	r3, [r7, #15]
    break;
 80077ea:	e008      	b.n	80077fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80077ec:	2301      	movs	r3, #1
 80077ee:	73fb      	strb	r3, [r7, #15]
    break;
 80077f0:	e005      	b.n	80077fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80077f2:	2303      	movs	r3, #3
 80077f4:	73fb      	strb	r3, [r7, #15]
    break;
 80077f6:	e002      	b.n	80077fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80077f8:	2303      	movs	r3, #3
 80077fa:	73fb      	strb	r3, [r7, #15]
    break;
 80077fc:	bf00      	nop
  }
  return usb_status;
 80077fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <__libc_init_array>:
 800780c:	b570      	push	{r4, r5, r6, lr}
 800780e:	4d0d      	ldr	r5, [pc, #52]	; (8007844 <__libc_init_array+0x38>)
 8007810:	4c0d      	ldr	r4, [pc, #52]	; (8007848 <__libc_init_array+0x3c>)
 8007812:	1b64      	subs	r4, r4, r5
 8007814:	10a4      	asrs	r4, r4, #2
 8007816:	2600      	movs	r6, #0
 8007818:	42a6      	cmp	r6, r4
 800781a:	d109      	bne.n	8007830 <__libc_init_array+0x24>
 800781c:	4d0b      	ldr	r5, [pc, #44]	; (800784c <__libc_init_array+0x40>)
 800781e:	4c0c      	ldr	r4, [pc, #48]	; (8007850 <__libc_init_array+0x44>)
 8007820:	f000 f820 	bl	8007864 <_init>
 8007824:	1b64      	subs	r4, r4, r5
 8007826:	10a4      	asrs	r4, r4, #2
 8007828:	2600      	movs	r6, #0
 800782a:	42a6      	cmp	r6, r4
 800782c:	d105      	bne.n	800783a <__libc_init_array+0x2e>
 800782e:	bd70      	pop	{r4, r5, r6, pc}
 8007830:	f855 3b04 	ldr.w	r3, [r5], #4
 8007834:	4798      	blx	r3
 8007836:	3601      	adds	r6, #1
 8007838:	e7ee      	b.n	8007818 <__libc_init_array+0xc>
 800783a:	f855 3b04 	ldr.w	r3, [r5], #4
 800783e:	4798      	blx	r3
 8007840:	3601      	adds	r6, #1
 8007842:	e7f2      	b.n	800782a <__libc_init_array+0x1e>
 8007844:	080078e4 	.word	0x080078e4
 8007848:	080078e4 	.word	0x080078e4
 800784c:	080078e4 	.word	0x080078e4
 8007850:	080078e8 	.word	0x080078e8

08007854 <memset>:
 8007854:	4402      	add	r2, r0
 8007856:	4603      	mov	r3, r0
 8007858:	4293      	cmp	r3, r2
 800785a:	d100      	bne.n	800785e <memset+0xa>
 800785c:	4770      	bx	lr
 800785e:	f803 1b01 	strb.w	r1, [r3], #1
 8007862:	e7f9      	b.n	8007858 <memset+0x4>

08007864 <_init>:
 8007864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007866:	bf00      	nop
 8007868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800786a:	bc08      	pop	{r3}
 800786c:	469e      	mov	lr, r3
 800786e:	4770      	bx	lr

08007870 <_fini>:
 8007870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007872:	bf00      	nop
 8007874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007876:	bc08      	pop	{r3}
 8007878:	469e      	mov	lr, r3
 800787a:	4770      	bx	lr
