
STM32_I2C_CS43L22_Basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009678  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08009808  08009808  00019808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098c8  080098c8  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  080098c8  080098c8  000198c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098d0  080098d0  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098d0  080098d0  000198d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098d4  080098d4  000198d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  080098d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020160  2**0
                  CONTENTS
 10 .bss          00001e40  20000160  20000160  00020160  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001fa0  20001fa0  00020160  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016565  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c09  00000000  00000000  000366f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001248  00000000  00000000  0003a300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001088  00000000  00000000  0003b548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000250e1  00000000  00000000  0003c5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a0cc  00000000  00000000  000616b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caca9  00000000  00000000  0007b77d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00146426  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e38  00000000  00000000  00146478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000160 	.word	0x20000160
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080097f0 	.word	0x080097f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000164 	.word	0x20000164
 80001cc:	080097f0 	.word	0x080097f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08c      	sub	sp, #48	; 0x30
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 031c 	add.w	r3, r7, #28
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
 800059e:	4b72      	ldr	r3, [pc, #456]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a71      	ldr	r2, [pc, #452]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005a4:	f043 0310 	orr.w	r3, r3, #16
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b6f      	ldr	r3, [pc, #444]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0310 	and.w	r3, r3, #16
 80005b2:	61bb      	str	r3, [r7, #24]
 80005b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
 80005ba:	4b6b      	ldr	r3, [pc, #428]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a6a      	ldr	r2, [pc, #424]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005c0:	f043 0304 	orr.w	r3, r3, #4
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b68      	ldr	r3, [pc, #416]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0304 	and.w	r3, r3, #4
 80005ce:	617b      	str	r3, [r7, #20]
 80005d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
 80005d6:	4b64      	ldr	r3, [pc, #400]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a63      	ldr	r2, [pc, #396]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b61      	ldr	r3, [pc, #388]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	4b5d      	ldr	r3, [pc, #372]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a5c      	ldr	r2, [pc, #368]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b5a      	ldr	r3, [pc, #360]	; (8000768 <MX_GPIO_Init+0x1e4>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	4b56      	ldr	r3, [pc, #344]	; (8000768 <MX_GPIO_Init+0x1e4>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a55      	ldr	r2, [pc, #340]	; (8000768 <MX_GPIO_Init+0x1e4>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b53      	ldr	r3, [pc, #332]	; (8000768 <MX_GPIO_Init+0x1e4>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	4b4f      	ldr	r3, [pc, #316]	; (8000768 <MX_GPIO_Init+0x1e4>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a4e      	ldr	r2, [pc, #312]	; (8000768 <MX_GPIO_Init+0x1e4>)
 8000630:	f043 0308 	orr.w	r3, r3, #8
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b4c      	ldr	r3, [pc, #304]	; (8000768 <MX_GPIO_Init+0x1e4>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2108      	movs	r1, #8
 8000646:	4849      	ldr	r0, [pc, #292]	; (800076c <MX_GPIO_Init+0x1e8>)
 8000648:	f000 ff54 	bl	80014f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	2101      	movs	r1, #1
 8000650:	4847      	ldr	r0, [pc, #284]	; (8000770 <MX_GPIO_Init+0x1ec>)
 8000652:	f000 ff4f 	bl	80014f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000656:	2200      	movs	r2, #0
 8000658:	f24f 0110 	movw	r1, #61456	; 0xf010
 800065c:	4845      	ldr	r0, [pc, #276]	; (8000774 <MX_GPIO_Init+0x1f0>)
 800065e:	f000 ff49 	bl	80014f4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000662:	2308      	movs	r3, #8
 8000664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2300      	movs	r3, #0
 8000670:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	483c      	ldr	r0, [pc, #240]	; (800076c <MX_GPIO_Init+0x1e8>)
 800067a:	f000 fd87 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800067e:	2301      	movs	r3, #1
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000682:	2301      	movs	r3, #1
 8000684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	4619      	mov	r1, r3
 8000694:	4836      	ldr	r0, [pc, #216]	; (8000770 <MX_GPIO_Init+0x1ec>)
 8000696:	f000 fd79 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800069a:	2308      	movs	r3, #8
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069e:	2302      	movs	r3, #2
 80006a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	2300      	movs	r3, #0
 80006a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006aa:	2305      	movs	r3, #5
 80006ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	4619      	mov	r1, r3
 80006b4:	482e      	ldr	r0, [pc, #184]	; (8000770 <MX_GPIO_Init+0x1ec>)
 80006b6:	f000 fd69 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ba:	2301      	movs	r3, #1
 80006bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006be:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4619      	mov	r1, r3
 80006ce:	482a      	ldr	r0, [pc, #168]	; (8000778 <MX_GPIO_Init+0x1f4>)
 80006d0:	f000 fd5c 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006d4:	2304      	movs	r3, #4
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d8:	2300      	movs	r3, #0
 80006da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4619      	mov	r1, r3
 80006e6:	4825      	ldr	r0, [pc, #148]	; (800077c <MX_GPIO_Init+0x1f8>)
 80006e8:	f000 fd50 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f2:	2302      	movs	r3, #2
 80006f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006fe:	2305      	movs	r3, #5
 8000700:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4619      	mov	r1, r3
 8000708:	481c      	ldr	r0, [pc, #112]	; (800077c <MX_GPIO_Init+0x1f8>)
 800070a:	f000 fd3f 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800070e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000712:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	2301      	movs	r3, #1
 8000716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	2300      	movs	r3, #0
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4619      	mov	r1, r3
 8000726:	4813      	ldr	r0, [pc, #76]	; (8000774 <MX_GPIO_Init+0x1f0>)
 8000728:	f000 fd30 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800072c:	2320      	movs	r3, #32
 800072e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000730:	2300      	movs	r3, #0
 8000732:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	4619      	mov	r1, r3
 800073e:	480d      	ldr	r0, [pc, #52]	; (8000774 <MX_GPIO_Init+0x1f0>)
 8000740:	f000 fd24 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000744:	2302      	movs	r3, #2
 8000746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000748:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800074c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	4619      	mov	r1, r3
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_GPIO_Init+0x1e8>)
 800075a:	f000 fd17 	bl	800118c <HAL_GPIO_Init>

}
 800075e:	bf00      	nop
 8000760:	3730      	adds	r7, #48	; 0x30
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40021000 	.word	0x40021000
 8000770:	40020800 	.word	0x40020800
 8000774:	40020c00 	.word	0x40020c00
 8000778:	40020000 	.word	0x40020000
 800077c:	40020400 	.word	0x40020400

08000780 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_I2C1_Init+0x50>)
 8000786:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <MX_I2C1_Init+0x54>)
 8000788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_I2C1_Init+0x50>)
 800078c:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <MX_I2C1_Init+0x58>)
 800078e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_I2C1_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_I2C1_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_I2C1_Init+0x50>)
 800079e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_I2C1_Init+0x50>)
 80007be:	f000 fecd 	bl	800155c <HAL_I2C_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007c8:	f000 f9e6 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000017c 	.word	0x2000017c
 80007d4:	40005400 	.word	0x40005400
 80007d8:	000186a0 	.word	0x000186a0

080007dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a19      	ldr	r2, [pc, #100]	; (8000860 <HAL_I2C_MspInit+0x84>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d12c      	bne.n	8000858 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_I2C_MspInit+0x88>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a17      	ldr	r2, [pc, #92]	; (8000864 <HAL_I2C_MspInit+0x88>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <HAL_I2C_MspInit+0x88>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800081a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800081e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000820:	2312      	movs	r3, #18
 8000822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000824:	2301      	movs	r3, #1
 8000826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800082c:	2304      	movs	r3, #4
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	480c      	ldr	r0, [pc, #48]	; (8000868 <HAL_I2C_MspInit+0x8c>)
 8000838:	f000 fca8 	bl	800118c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_I2C_MspInit+0x88>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	4a07      	ldr	r2, [pc, #28]	; (8000864 <HAL_I2C_MspInit+0x88>)
 8000846:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800084a:	6413      	str	r3, [r2, #64]	; 0x40
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <HAL_I2C_MspInit+0x88>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	; 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40005400 	.word	0x40005400
 8000864:	40023800 	.word	0x40023800
 8000868:	40020400 	.word	0x40020400

0800086c <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_I2S3_Init+0x54>)
 8000872:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <MX_I2S3_Init+0x58>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_I2S3_Init+0x54>)
 8000878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_I2S3_Init+0x54>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_I2S3_Init+0x54>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <MX_I2S3_Init+0x54>)
 800088c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000890:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_I2S3_Init+0x54>)
 8000894:	4a0c      	ldr	r2, [pc, #48]	; (80008c8 <MX_I2S3_Init+0x5c>)
 8000896:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_I2S3_Init+0x54>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_I2S3_Init+0x54>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_I2S3_Init+0x54>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_I2S3_Init+0x54>)
 80008ac:	f001 fc44 	bl	8002138 <HAL_I2S_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008b6:	f000 f96f 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200001d0 	.word	0x200001d0
 80008c4:	40003c00 	.word	0x40003c00
 80008c8:	00017700 	.word	0x00017700

080008cc <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08e      	sub	sp, #56	; 0x38
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a31      	ldr	r2, [pc, #196]	; (80009bc <HAL_I2S_MspInit+0xf0>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d15a      	bne.n	80009b2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008fc:	2301      	movs	r3, #1
 80008fe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000900:	23c0      	movs	r3, #192	; 0xc0
 8000902:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000904:	2302      	movs	r3, #2
 8000906:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4618      	mov	r0, r3
 800090e:	f003 ffb5 	bl	800487c <HAL_RCCEx_PeriphCLKConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000918:	f000 f93e 	bl	8000b98 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	4a26      	ldr	r2, [pc, #152]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 8000926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800092a:	6413      	str	r3, [r2, #64]	; 0x40
 800092c:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 800093e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000940:	4a1f      	ldr	r2, [pc, #124]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	6313      	str	r3, [r2, #48]	; 0x30
 8000948:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095c:	4a18      	ldr	r2, [pc, #96]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	6313      	str	r3, [r2, #48]	; 0x30
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000970:	2310      	movs	r3, #16
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000980:	2306      	movs	r3, #6
 8000982:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000988:	4619      	mov	r1, r3
 800098a:	480e      	ldr	r0, [pc, #56]	; (80009c4 <HAL_I2S_MspInit+0xf8>)
 800098c:	f000 fbfe 	bl	800118c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000990:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009a2:	2306      	movs	r3, #6
 80009a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009aa:	4619      	mov	r1, r3
 80009ac:	4806      	ldr	r0, [pc, #24]	; (80009c8 <HAL_I2S_MspInit+0xfc>)
 80009ae:	f000 fbed 	bl	800118c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009b2:	bf00      	nop
 80009b4:	3738      	adds	r7, #56	; 0x38
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40003c00 	.word	0x40003c00
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020000 	.word	0x40020000
 80009c8:	40020800 	.word	0x40020800

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d2:	f000 fa33 	bl	8000e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d6:	f000 f875 	bl	8000ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009da:	f7ff fdd3 	bl	8000584 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009de:	f7ff fecf 	bl	8000780 <MX_I2C1_Init>
  MX_I2S3_Init();
 80009e2:	f7ff ff43 	bl	800086c <MX_I2S3_Init>
  MX_SPI1_Init();
 80009e6:	f000 f8dd 	bl	8000ba4 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80009ea:	f007 fd25 	bl	8008438 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4,GPIO_PIN_SET);   // Set Reset line to proper state.
 80009ee:	2201      	movs	r2, #1
 80009f0:	2110      	movs	r1, #16
 80009f2:	482b      	ldr	r0, [pc, #172]	; (8000aa0 <main+0xd4>)
 80009f4:	f000 fd7e 	bl	80014f4 <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 80009f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009fc:	f000 fa90 	bl	8000f20 <HAL_Delay>
  // uint16_tDevAddress,uint16_tMemAddress,uint16_tMemAddSize,uint8_t*pData,uint16_tSize,uint32_tTimeout);
  retval = HAL_I2C_Mem_Read(&hi2c1, 0x94, 0x01, I2C_MEMADD_SIZE_8BIT, &Value, 1, 1000);
 8000a00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a04:	9302      	str	r3, [sp, #8]
 8000a06:	2301      	movs	r3, #1
 8000a08:	9301      	str	r3, [sp, #4]
 8000a0a:	4b26      	ldr	r3, [pc, #152]	; (8000aa4 <main+0xd8>)
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	2301      	movs	r3, #1
 8000a10:	2201      	movs	r2, #1
 8000a12:	2194      	movs	r1, #148	; 0x94
 8000a14:	4824      	ldr	r0, [pc, #144]	; (8000aa8 <main+0xdc>)
 8000a16:	f000 fee5 	bl	80017e4 <HAL_I2C_Mem_Read>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b23      	ldr	r3, [pc, #140]	; (8000aac <main+0xe0>)
 8000a20:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000a22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a26:	481e      	ldr	r0, [pc, #120]	; (8000aa0 <main+0xd4>)
 8000a28:	f000 fd7d 	bl	8001526 <HAL_GPIO_TogglePin>
	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000a2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a30:	481b      	ldr	r0, [pc, #108]	; (8000aa0 <main+0xd4>)
 8000a32:	f000 fd78 	bl	8001526 <HAL_GPIO_TogglePin>
	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000a36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a3a:	4819      	ldr	r0, [pc, #100]	; (8000aa0 <main+0xd4>)
 8000a3c:	f000 fd73 	bl	8001526 <HAL_GPIO_TogglePin>

	 KeyState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000a40:	2101      	movs	r1, #1
 8000a42:	481b      	ldr	r0, [pc, #108]	; (8000ab0 <main+0xe4>)
 8000a44:	f000 fd3e 	bl	80014c4 <HAL_GPIO_ReadPin>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <main+0xe8>)
 8000a4e:	601a      	str	r2, [r3, #0]
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, KeyState);
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <main+0xe8>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	461a      	mov	r2, r3
 8000a58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a5c:	4810      	ldr	r0, [pc, #64]	; (8000aa0 <main+0xd4>)
 8000a5e:	f000 fd49 	bl	80014f4 <HAL_GPIO_WritePin>


	  snprintf(SendBuffer,BUFSIZE,"Hello World [%d]: Key:%d | Id:%02x \r\n",Counter++,KeyState,Value);
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <main+0xec>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	1c5a      	adds	r2, r3, #1
 8000a68:	4913      	ldr	r1, [pc, #76]	; (8000ab8 <main+0xec>)
 8000a6a:	600a      	str	r2, [r1, #0]
 8000a6c:	4a11      	ldr	r2, [pc, #68]	; (8000ab4 <main+0xe8>)
 8000a6e:	6812      	ldr	r2, [r2, #0]
 8000a70:	490c      	ldr	r1, [pc, #48]	; (8000aa4 <main+0xd8>)
 8000a72:	7809      	ldrb	r1, [r1, #0]
 8000a74:	9101      	str	r1, [sp, #4]
 8000a76:	9200      	str	r2, [sp, #0]
 8000a78:	4a10      	ldr	r2, [pc, #64]	; (8000abc <main+0xf0>)
 8000a7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a7e:	4810      	ldr	r0, [pc, #64]	; (8000ac0 <main+0xf4>)
 8000a80:	f008 fa34 	bl	8008eec <sniprintf>
	  CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 8000a84:	480e      	ldr	r0, [pc, #56]	; (8000ac0 <main+0xf4>)
 8000a86:	f7ff fba3 	bl	80001d0 <strlen>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <main+0xf4>)
 8000a90:	f007 fd90 	bl	80085b4 <CDC_Transmit_FS>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 8000a94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a98:	f000 fa42 	bl	8000f20 <HAL_Delay>
  {
 8000a9c:	e7c1      	b.n	8000a22 <main+0x56>
 8000a9e:	bf00      	nop
 8000aa0:	40020c00 	.word	0x40020c00
 8000aa4:	20000321 	.word	0x20000321
 8000aa8:	2000017c 	.word	0x2000017c
 8000aac:	20000320 	.word	0x20000320
 8000ab0:	40020000 	.word	0x40020000
 8000ab4:	2000031c 	.word	0x2000031c
 8000ab8:	20000318 	.word	0x20000318
 8000abc:	08009808 	.word	0x08009808
 8000ac0:	20000218 	.word	0x20000218

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b094      	sub	sp, #80	; 0x50
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0320 	add.w	r3, r7, #32
 8000ace:	2230      	movs	r2, #48	; 0x30
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f008 fa02 	bl	8008edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	4b28      	ldr	r3, [pc, #160]	; (8000b90 <SystemClock_Config+0xcc>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	4a27      	ldr	r2, [pc, #156]	; (8000b90 <SystemClock_Config+0xcc>)
 8000af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af6:	6413      	str	r3, [r2, #64]	; 0x40
 8000af8:	4b25      	ldr	r3, [pc, #148]	; (8000b90 <SystemClock_Config+0xcc>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b04:	2300      	movs	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <SystemClock_Config+0xd0>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a21      	ldr	r2, [pc, #132]	; (8000b94 <SystemClock_Config+0xd0>)
 8000b0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <SystemClock_Config+0xd0>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b20:	2301      	movs	r3, #1
 8000b22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b34:	2308      	movs	r3, #8
 8000b36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b38:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b42:	2307      	movs	r3, #7
 8000b44:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b46:	f107 0320 	add.w	r3, r7, #32
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f003 fa12 	bl	8003f74 <HAL_RCC_OscConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b56:	f000 f81f 	bl	8000b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5a:	230f      	movs	r3, #15
 8000b5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b66:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	2105      	movs	r1, #5
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f003 fc73 	bl	8004464 <HAL_RCC_ClockConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b84:	f000 f808 	bl	8000b98 <Error_Handler>
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3750      	adds	r7, #80	; 0x50
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40007000 	.word	0x40007000

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <Error_Handler+0x8>
	...

08000ba4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ba8:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000baa:	4a18      	ldr	r2, [pc, #96]	; (8000c0c <MX_SPI1_Init+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000bb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000bf0:	220a      	movs	r2, #10
 8000bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000bf6:	f003 ff81 	bl	8004afc <HAL_SPI_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c00:	f7ff ffca 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000324 	.word	0x20000324
 8000c0c:	40013000 	.word	0x40013000

08000c10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <HAL_SPI_MspInit+0x84>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d12b      	bne.n	8000c8a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <HAL_SPI_MspInit+0x88>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	4a17      	ldr	r2, [pc, #92]	; (8000c98 <HAL_SPI_MspInit+0x88>)
 8000c3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c40:	6453      	str	r3, [r2, #68]	; 0x44
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_SPI_MspInit+0x88>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_SPI_MspInit+0x88>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a10      	ldr	r2, [pc, #64]	; (8000c98 <HAL_SPI_MspInit+0x88>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_SPI_MspInit+0x88>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c6a:	23e0      	movs	r3, #224	; 0xe0
 8000c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c7a:	2305      	movs	r3, #5
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <HAL_SPI_MspInit+0x8c>)
 8000c86:	f000 fa81 	bl	800118c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	3728      	adds	r7, #40	; 0x28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40013000 	.word	0x40013000
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020000 	.word	0x40020000

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <HAL_MspInit+0x4c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	4a0f      	ldr	r2, [pc, #60]	; (8000cec <HAL_MspInit+0x4c>)
 8000cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <HAL_MspInit+0x4c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	4a08      	ldr	r2, [pc, #32]	; (8000cec <HAL_MspInit+0x4c>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_MspInit+0x4c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cde:	2007      	movs	r0, #7
 8000ce0:	f000 fa12 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40023800 	.word	0x40023800

08000cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <NMI_Handler+0x4>

08000cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <HardFault_Handler+0x4>

08000cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <MemManage_Handler+0x4>

08000d02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <BusFault_Handler+0x4>

08000d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <UsageFault_Handler+0x4>

08000d0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3c:	f000 f8d0 	bl	8000ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <OTG_FS_IRQHandler+0x10>)
 8000d4a:	f001 ffe5 	bl	8002d18 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20001864 	.word	0x20001864

08000d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d60:	4a14      	ldr	r2, [pc, #80]	; (8000db4 <_sbrk+0x5c>)
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <_sbrk+0x60>)
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d102      	bne.n	8000d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <_sbrk+0x64>)
 8000d76:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <_sbrk+0x68>)
 8000d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d207      	bcs.n	8000d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d88:	f008 f87e 	bl	8008e88 <__errno>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	220c      	movs	r2, #12
 8000d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295
 8000d96:	e009      	b.n	8000dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <_sbrk+0x64>)
 8000da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000daa:	68fb      	ldr	r3, [r7, #12]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20020000 	.word	0x20020000
 8000db8:	00000400 	.word	0x00000400
 8000dbc:	2000037c 	.word	0x2000037c
 8000dc0:	20001fa0 	.word	0x20001fa0

08000dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <SystemInit+0x20>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <SystemInit+0x20>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dee:	490e      	ldr	r1, [pc, #56]	; (8000e28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df0:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e04:	4c0b      	ldr	r4, [pc, #44]	; (8000e34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e12:	f7ff ffd7 	bl	8000dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e16:	f008 f83d 	bl	8008e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1a:	f7ff fdd7 	bl	80009cc <main>
  bx  lr    
 8000e1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000e2c:	080098d8 	.word	0x080098d8
  ldr r2, =_sbss
 8000e30:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000e34:	20001fa0 	.word	0x20001fa0

08000e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC_IRQHandler>
	...

08000e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <HAL_Init+0x40>)
 8000e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <HAL_Init+0x40>)
 8000e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <HAL_Init+0x40>)
 8000e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e64:	2003      	movs	r0, #3
 8000e66:	f000 f94f 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 f808 	bl	8000e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e70:	f7ff ff16 	bl	8000ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023c00 	.word	0x40023c00

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_InitTick+0x54>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x58>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 f967 	bl	8001172 <HAL_SYSTICK_Config>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00e      	b.n	8000ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b0f      	cmp	r3, #15
 8000eb2:	d80a      	bhi.n	8000eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f000 f92f 	bl	800111e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <HAL_InitTick+0x5c>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e000      	b.n	8000ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000004 	.word	0x20000004

08000ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x20>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x24>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <HAL_IncTick+0x24>)
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20000380 	.word	0x20000380

08000f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <HAL_GetTick+0x14>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000380 	.word	0x20000380

08000f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f28:	f7ff ffee 	bl	8000f08 <HAL_GetTick>
 8000f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f38:	d005      	beq.n	8000f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_Delay+0x44>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4413      	add	r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f46:	bf00      	nop
 8000f48:	f7ff ffde 	bl	8000f08 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d8f7      	bhi.n	8000f48 <HAL_Delay+0x28>
  {
  }
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000008 	.word	0x20000008

08000f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f84:	4013      	ands	r3, r2
 8000f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9a:	4a04      	ldr	r2, [pc, #16]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	60d3      	str	r3, [r2, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	f003 0307 	and.w	r3, r3, #7
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	db0b      	blt.n	8000ff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f003 021f 	and.w	r2, r3, #31
 8000fe4:	4907      	ldr	r1, [pc, #28]	; (8001004 <__NVIC_EnableIRQ+0x38>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	095b      	lsrs	r3, r3, #5
 8000fec:	2001      	movs	r0, #1
 8000fee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000e100 	.word	0xe000e100

08001008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0a      	blt.n	8001032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	490c      	ldr	r1, [pc, #48]	; (8001054 <__NVIC_SetPriority+0x4c>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001030:	e00a      	b.n	8001048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4908      	ldr	r1, [pc, #32]	; (8001058 <__NVIC_SetPriority+0x50>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	3b04      	subs	r3, #4
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	440b      	add	r3, r1
 8001046:	761a      	strb	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f1c3 0307 	rsb	r3, r3, #7
 8001076:	2b04      	cmp	r3, #4
 8001078:	bf28      	it	cs
 800107a:	2304      	movcs	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3304      	adds	r3, #4
 8001082:	2b06      	cmp	r3, #6
 8001084:	d902      	bls.n	800108c <NVIC_EncodePriority+0x30>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3b03      	subs	r3, #3
 800108a:	e000      	b.n	800108e <NVIC_EncodePriority+0x32>
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	f04f 32ff 	mov.w	r2, #4294967295
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	4313      	orrs	r3, r2
         );
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d4:	d301      	bcc.n	80010da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00f      	b.n	80010fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <SysTick_Config+0x40>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e2:	210f      	movs	r1, #15
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f7ff ff8e 	bl	8001008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <SysTick_Config+0x40>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	4b04      	ldr	r3, [pc, #16]	; (8001104 <SysTick_Config+0x40>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	e000e010 	.word	0xe000e010

08001108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff29 	bl	8000f68 <__NVIC_SetPriorityGrouping>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001130:	f7ff ff3e 	bl	8000fb0 <__NVIC_GetPriorityGrouping>
 8001134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff ff8e 	bl	800105c <NVIC_EncodePriority>
 8001140:	4602      	mov	r2, r0
 8001142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff5d 	bl	8001008 <__NVIC_SetPriority>
}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff31 	bl	8000fcc <__NVIC_EnableIRQ>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ffa2 	bl	80010c4 <SysTick_Config>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	e16b      	b.n	8001480 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	f040 815a 	bne.w	800147a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d005      	beq.n	80011de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d130      	bne.n	8001240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	f003 0201 	and.w	r2, r3, #1
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b03      	cmp	r3, #3
 800124a:	d017      	beq.n	800127c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d123      	bne.n	80012d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	220f      	movs	r2, #15
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	08da      	lsrs	r2, r3, #3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3208      	adds	r2, #8
 80012ca:	69b9      	ldr	r1, [r7, #24]
 80012cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0203 	and.w	r2, r3, #3
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80b4 	beq.w	800147a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b60      	ldr	r3, [pc, #384]	; (8001498 <HAL_GPIO_Init+0x30c>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a5f      	ldr	r2, [pc, #380]	; (8001498 <HAL_GPIO_Init+0x30c>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b5d      	ldr	r3, [pc, #372]	; (8001498 <HAL_GPIO_Init+0x30c>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800132e:	4a5b      	ldr	r2, [pc, #364]	; (800149c <HAL_GPIO_Init+0x310>)
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a52      	ldr	r2, [pc, #328]	; (80014a0 <HAL_GPIO_Init+0x314>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d02b      	beq.n	80013b2 <HAL_GPIO_Init+0x226>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a51      	ldr	r2, [pc, #324]	; (80014a4 <HAL_GPIO_Init+0x318>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d025      	beq.n	80013ae <HAL_GPIO_Init+0x222>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a50      	ldr	r2, [pc, #320]	; (80014a8 <HAL_GPIO_Init+0x31c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d01f      	beq.n	80013aa <HAL_GPIO_Init+0x21e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4f      	ldr	r2, [pc, #316]	; (80014ac <HAL_GPIO_Init+0x320>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d019      	beq.n	80013a6 <HAL_GPIO_Init+0x21a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4e      	ldr	r2, [pc, #312]	; (80014b0 <HAL_GPIO_Init+0x324>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d013      	beq.n	80013a2 <HAL_GPIO_Init+0x216>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4d      	ldr	r2, [pc, #308]	; (80014b4 <HAL_GPIO_Init+0x328>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d00d      	beq.n	800139e <HAL_GPIO_Init+0x212>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4c      	ldr	r2, [pc, #304]	; (80014b8 <HAL_GPIO_Init+0x32c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d007      	beq.n	800139a <HAL_GPIO_Init+0x20e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4b      	ldr	r2, [pc, #300]	; (80014bc <HAL_GPIO_Init+0x330>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d101      	bne.n	8001396 <HAL_GPIO_Init+0x20a>
 8001392:	2307      	movs	r3, #7
 8001394:	e00e      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 8001396:	2308      	movs	r3, #8
 8001398:	e00c      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 800139a:	2306      	movs	r3, #6
 800139c:	e00a      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 800139e:	2305      	movs	r3, #5
 80013a0:	e008      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013a2:	2304      	movs	r3, #4
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013a6:	2303      	movs	r3, #3
 80013a8:	e004      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e002      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013b2:	2300      	movs	r3, #0
 80013b4:	69fa      	ldr	r2, [r7, #28]
 80013b6:	f002 0203 	and.w	r2, r2, #3
 80013ba:	0092      	lsls	r2, r2, #2
 80013bc:	4093      	lsls	r3, r2
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c4:	4935      	ldr	r1, [pc, #212]	; (800149c <HAL_GPIO_Init+0x310>)
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013d2:	4b3b      	ldr	r3, [pc, #236]	; (80014c0 <HAL_GPIO_Init+0x334>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013f6:	4a32      	ldr	r2, [pc, #200]	; (80014c0 <HAL_GPIO_Init+0x334>)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013fc:	4b30      	ldr	r3, [pc, #192]	; (80014c0 <HAL_GPIO_Init+0x334>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001420:	4a27      	ldr	r2, [pc, #156]	; (80014c0 <HAL_GPIO_Init+0x334>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001426:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <HAL_GPIO_Init+0x334>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800144a:	4a1d      	ldr	r2, [pc, #116]	; (80014c0 <HAL_GPIO_Init+0x334>)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001450:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <HAL_GPIO_Init+0x334>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001474:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <HAL_GPIO_Init+0x334>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3301      	adds	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	2b0f      	cmp	r3, #15
 8001484:	f67f ae90 	bls.w	80011a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3724      	adds	r7, #36	; 0x24
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40013800 	.word	0x40013800
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40020400 	.word	0x40020400
 80014a8:	40020800 	.word	0x40020800
 80014ac:	40020c00 	.word	0x40020c00
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40021400 	.word	0x40021400
 80014b8:	40021800 	.word	0x40021800
 80014bc:	40021c00 	.word	0x40021c00
 80014c0:	40013c00 	.word	0x40013c00

080014c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691a      	ldr	r2, [r3, #16]
 80014d4:	887b      	ldrh	r3, [r7, #2]
 80014d6:	4013      	ands	r3, r2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d002      	beq.n	80014e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014dc:	2301      	movs	r3, #1
 80014de:	73fb      	strb	r3, [r7, #15]
 80014e0:	e001      	b.n	80014e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	807b      	strh	r3, [r7, #2]
 8001500:	4613      	mov	r3, r2
 8001502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001504:	787b      	ldrb	r3, [r7, #1]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800150a:	887a      	ldrh	r2, [r7, #2]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001510:	e003      	b.n	800151a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001512:	887b      	ldrh	r3, [r7, #2]
 8001514:	041a      	lsls	r2, r3, #16
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	619a      	str	r2, [r3, #24]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001526:	b480      	push	{r7}
 8001528:	b085      	sub	sp, #20
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	460b      	mov	r3, r1
 8001530:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001538:	887a      	ldrh	r2, [r7, #2]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4013      	ands	r3, r2
 800153e:	041a      	lsls	r2, r3, #16
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	43d9      	mvns	r1, r3
 8001544:	887b      	ldrh	r3, [r7, #2]
 8001546:	400b      	ands	r3, r1
 8001548:	431a      	orrs	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	619a      	str	r2, [r3, #24]
}
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e12b      	b.n	80017c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d106      	bne.n	8001588 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff f92a 	bl	80007dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2224      	movs	r2, #36	; 0x24
 800158c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0201 	bic.w	r2, r2, #1
 800159e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015c0:	f003 f948 	bl	8004854 <HAL_RCC_GetPCLK1Freq>
 80015c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4a81      	ldr	r2, [pc, #516]	; (80017d0 <HAL_I2C_Init+0x274>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d807      	bhi.n	80015e0 <HAL_I2C_Init+0x84>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4a80      	ldr	r2, [pc, #512]	; (80017d4 <HAL_I2C_Init+0x278>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	bf94      	ite	ls
 80015d8:	2301      	movls	r3, #1
 80015da:	2300      	movhi	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	e006      	b.n	80015ee <HAL_I2C_Init+0x92>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4a7d      	ldr	r2, [pc, #500]	; (80017d8 <HAL_I2C_Init+0x27c>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	bf94      	ite	ls
 80015e8:	2301      	movls	r3, #1
 80015ea:	2300      	movhi	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e0e7      	b.n	80017c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4a78      	ldr	r2, [pc, #480]	; (80017dc <HAL_I2C_Init+0x280>)
 80015fa:	fba2 2303 	umull	r2, r3, r2, r3
 80015fe:	0c9b      	lsrs	r3, r3, #18
 8001600:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	430a      	orrs	r2, r1
 8001614:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	4a6a      	ldr	r2, [pc, #424]	; (80017d0 <HAL_I2C_Init+0x274>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d802      	bhi.n	8001630 <HAL_I2C_Init+0xd4>
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	3301      	adds	r3, #1
 800162e:	e009      	b.n	8001644 <HAL_I2C_Init+0xe8>
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001636:	fb02 f303 	mul.w	r3, r2, r3
 800163a:	4a69      	ldr	r2, [pc, #420]	; (80017e0 <HAL_I2C_Init+0x284>)
 800163c:	fba2 2303 	umull	r2, r3, r2, r3
 8001640:	099b      	lsrs	r3, r3, #6
 8001642:	3301      	adds	r3, #1
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	430b      	orrs	r3, r1
 800164a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001656:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	495c      	ldr	r1, [pc, #368]	; (80017d0 <HAL_I2C_Init+0x274>)
 8001660:	428b      	cmp	r3, r1
 8001662:	d819      	bhi.n	8001698 <HAL_I2C_Init+0x13c>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	1e59      	subs	r1, r3, #1
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001672:	1c59      	adds	r1, r3, #1
 8001674:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001678:	400b      	ands	r3, r1
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00a      	beq.n	8001694 <HAL_I2C_Init+0x138>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1e59      	subs	r1, r3, #1
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fbb1 f3f3 	udiv	r3, r1, r3
 800168c:	3301      	adds	r3, #1
 800168e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001692:	e051      	b.n	8001738 <HAL_I2C_Init+0x1dc>
 8001694:	2304      	movs	r3, #4
 8001696:	e04f      	b.n	8001738 <HAL_I2C_Init+0x1dc>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d111      	bne.n	80016c4 <HAL_I2C_Init+0x168>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	1e58      	subs	r0, r3, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6859      	ldr	r1, [r3, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	440b      	add	r3, r1
 80016ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b2:	3301      	adds	r3, #1
 80016b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	bf0c      	ite	eq
 80016bc:	2301      	moveq	r3, #1
 80016be:	2300      	movne	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	e012      	b.n	80016ea <HAL_I2C_Init+0x18e>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	1e58      	subs	r0, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6859      	ldr	r1, [r3, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	0099      	lsls	r1, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016da:	3301      	adds	r3, #1
 80016dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	bf0c      	ite	eq
 80016e4:	2301      	moveq	r3, #1
 80016e6:	2300      	movne	r3, #0
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_I2C_Init+0x196>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e022      	b.n	8001738 <HAL_I2C_Init+0x1dc>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10e      	bne.n	8001718 <HAL_I2C_Init+0x1bc>
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	1e58      	subs	r0, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6859      	ldr	r1, [r3, #4]
 8001702:	460b      	mov	r3, r1
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	440b      	add	r3, r1
 8001708:	fbb0 f3f3 	udiv	r3, r0, r3
 800170c:	3301      	adds	r3, #1
 800170e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001716:	e00f      	b.n	8001738 <HAL_I2C_Init+0x1dc>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	1e58      	subs	r0, r3, #1
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6859      	ldr	r1, [r3, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	0099      	lsls	r1, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	fbb0 f3f3 	udiv	r3, r0, r3
 800172e:	3301      	adds	r3, #1
 8001730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	6809      	ldr	r1, [r1, #0]
 800173c:	4313      	orrs	r3, r2
 800173e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69da      	ldr	r2, [r3, #28]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001766:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6911      	ldr	r1, [r2, #16]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	68d2      	ldr	r2, [r2, #12]
 8001772:	4311      	orrs	r1, r2
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	430b      	orrs	r3, r1
 800177a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0201 	orr.w	r2, r2, #1
 80017a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2220      	movs	r2, #32
 80017b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	000186a0 	.word	0x000186a0
 80017d4:	001e847f 	.word	0x001e847f
 80017d8:	003d08ff 	.word	0x003d08ff
 80017dc:	431bde83 	.word	0x431bde83
 80017e0:	10624dd3 	.word	0x10624dd3

080017e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08c      	sub	sp, #48	; 0x30
 80017e8:	af02      	add	r7, sp, #8
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	4608      	mov	r0, r1
 80017ee:	4611      	mov	r1, r2
 80017f0:	461a      	mov	r2, r3
 80017f2:	4603      	mov	r3, r0
 80017f4:	817b      	strh	r3, [r7, #10]
 80017f6:	460b      	mov	r3, r1
 80017f8:	813b      	strh	r3, [r7, #8]
 80017fa:	4613      	mov	r3, r2
 80017fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017fe:	f7ff fb83 	bl	8000f08 <HAL_GetTick>
 8001802:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b20      	cmp	r3, #32
 800180e:	f040 8208 	bne.w	8001c22 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2319      	movs	r3, #25
 8001818:	2201      	movs	r2, #1
 800181a:	497b      	ldr	r1, [pc, #492]	; (8001a08 <HAL_I2C_Mem_Read+0x224>)
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f000 faef 	bl	8001e00 <I2C_WaitOnFlagUntilTimeout>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001828:	2302      	movs	r3, #2
 800182a:	e1fb      	b.n	8001c24 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001832:	2b01      	cmp	r3, #1
 8001834:	d101      	bne.n	800183a <HAL_I2C_Mem_Read+0x56>
 8001836:	2302      	movs	r3, #2
 8001838:	e1f4      	b.n	8001c24 <HAL_I2C_Mem_Read+0x440>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b01      	cmp	r3, #1
 800184e:	d007      	beq.n	8001860 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0201 	orr.w	r2, r2, #1
 800185e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800186e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2222      	movs	r2, #34	; 0x22
 8001874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2240      	movs	r2, #64	; 0x40
 800187c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800188a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001890:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001896:	b29a      	uxth	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4a5b      	ldr	r2, [pc, #364]	; (8001a0c <HAL_I2C_Mem_Read+0x228>)
 80018a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018a2:	88f8      	ldrh	r0, [r7, #6]
 80018a4:	893a      	ldrh	r2, [r7, #8]
 80018a6:	8979      	ldrh	r1, [r7, #10]
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	9301      	str	r3, [sp, #4]
 80018ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	4603      	mov	r3, r0
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 f9bc 	bl	8001c30 <I2C_RequestMemoryRead>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e1b0      	b.n	8001c24 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d113      	bne.n	80018f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	623b      	str	r3, [r7, #32]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	623b      	str	r3, [r7, #32]
 80018de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	e184      	b.n	8001bfc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d11b      	bne.n	8001932 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001908:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	61fb      	str	r3, [r7, #28]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	e164      	b.n	8001bfc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001936:	2b02      	cmp	r3, #2
 8001938:	d11b      	bne.n	8001972 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001948:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001958:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	61bb      	str	r3, [r7, #24]
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	e144      	b.n	8001bfc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001988:	e138      	b.n	8001bfc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800198e:	2b03      	cmp	r3, #3
 8001990:	f200 80f1 	bhi.w	8001b76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001998:	2b01      	cmp	r3, #1
 800199a:	d123      	bne.n	80019e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800199c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f000 fb44 	bl	800202e <I2C_WaitOnRXNEFlagUntilTimeout>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e139      	b.n	8001c24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	691a      	ldr	r2, [r3, #16]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019cc:	3b01      	subs	r3, #1
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d8:	b29b      	uxth	r3, r3
 80019da:	3b01      	subs	r3, #1
 80019dc:	b29a      	uxth	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019e2:	e10b      	b.n	8001bfc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d14e      	bne.n	8001a8a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019f2:	2200      	movs	r2, #0
 80019f4:	4906      	ldr	r1, [pc, #24]	; (8001a10 <HAL_I2C_Mem_Read+0x22c>)
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 fa02 	bl	8001e00 <I2C_WaitOnFlagUntilTimeout>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d008      	beq.n	8001a14 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e10e      	b.n	8001c24 <HAL_I2C_Mem_Read+0x440>
 8001a06:	bf00      	nop
 8001a08:	00100002 	.word	0x00100002
 8001a0c:	ffff0000 	.word	0xffff0000
 8001a10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	691a      	ldr	r2, [r3, #16]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a72:	3b01      	subs	r3, #1
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	3b01      	subs	r3, #1
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a88:	e0b8      	b.n	8001bfc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a90:	2200      	movs	r2, #0
 8001a92:	4966      	ldr	r1, [pc, #408]	; (8001c2c <HAL_I2C_Mem_Read+0x448>)
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f000 f9b3 	bl	8001e00 <I2C_WaitOnFlagUntilTimeout>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0bf      	b.n	8001c24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ab2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	691a      	ldr	r2, [r3, #16]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aec:	2200      	movs	r2, #0
 8001aee:	494f      	ldr	r1, [pc, #316]	; (8001c2c <HAL_I2C_Mem_Read+0x448>)
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f000 f985 	bl	8001e00 <I2C_WaitOnFlagUntilTimeout>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e091      	b.n	8001c24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	691a      	ldr	r2, [r3, #16]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b74:	e042      	b.n	8001bfc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 fa57 	bl	800202e <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e04c      	b.n	8001c24 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d118      	bne.n	8001bfc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	691a      	ldr	r2, [r3, #16]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be6:	3b01      	subs	r3, #1
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f47f aec2 	bne.w	800198a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e000      	b.n	8001c24 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001c22:	2302      	movs	r3, #2
  }
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3728      	adds	r7, #40	; 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	00010004 	.word	0x00010004

08001c30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	4608      	mov	r0, r1
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4603      	mov	r3, r0
 8001c40:	817b      	strh	r3, [r7, #10]
 8001c42:	460b      	mov	r3, r1
 8001c44:	813b      	strh	r3, [r7, #8]
 8001c46:	4613      	mov	r3, r2
 8001c48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 f8c2 	bl	8001e00 <I2C_WaitOnFlagUntilTimeout>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00d      	beq.n	8001c9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c90:	d103      	bne.n	8001c9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e0aa      	b.n	8001df4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c9e:	897b      	ldrh	r3, [r7, #10]
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	6a3a      	ldr	r2, [r7, #32]
 8001cb2:	4952      	ldr	r1, [pc, #328]	; (8001dfc <I2C_RequestMemoryRead+0x1cc>)
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 f8fa 	bl	8001eae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e097      	b.n	8001df4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cdc:	6a39      	ldr	r1, [r7, #32]
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 f964 	bl	8001fac <I2C_WaitOnTXEFlagUntilTimeout>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00d      	beq.n	8001d06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d107      	bne.n	8001d02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e076      	b.n	8001df4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d105      	bne.n	8001d18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d0c:	893b      	ldrh	r3, [r7, #8]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	611a      	str	r2, [r3, #16]
 8001d16:	e021      	b.n	8001d5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001d18:	893b      	ldrh	r3, [r7, #8]
 8001d1a:	0a1b      	lsrs	r3, r3, #8
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d28:	6a39      	ldr	r1, [r7, #32]
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f93e 	bl	8001fac <I2C_WaitOnTXEFlagUntilTimeout>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00d      	beq.n	8001d52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d107      	bne.n	8001d4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e050      	b.n	8001df4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d52:	893b      	ldrh	r3, [r7, #8]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5e:	6a39      	ldr	r1, [r7, #32]
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f000 f923 	bl	8001fac <I2C_WaitOnTXEFlagUntilTimeout>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00d      	beq.n	8001d88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d107      	bne.n	8001d84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e035      	b.n	8001df4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 f82b 	bl	8001e00 <I2C_WaitOnFlagUntilTimeout>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00d      	beq.n	8001dcc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dbe:	d103      	bne.n	8001dc8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e013      	b.n	8001df4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001dcc:	897b      	ldrh	r3, [r7, #10]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	6a3a      	ldr	r2, [r7, #32]
 8001de0:	4906      	ldr	r1, [pc, #24]	; (8001dfc <I2C_RequestMemoryRead+0x1cc>)
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 f863 	bl	8001eae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	00010002 	.word	0x00010002

08001e00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e10:	e025      	b.n	8001e5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e18:	d021      	beq.n	8001e5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e1a:	f7ff f875 	bl	8000f08 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d302      	bcc.n	8001e30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d116      	bne.n	8001e5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2220      	movs	r2, #32
 8001e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f043 0220 	orr.w	r2, r3, #32
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e023      	b.n	8001ea6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	0c1b      	lsrs	r3, r3, #16
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d10d      	bne.n	8001e84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	4013      	ands	r3, r2
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	bf0c      	ite	eq
 8001e7a:	2301      	moveq	r3, #1
 8001e7c:	2300      	movne	r3, #0
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	461a      	mov	r2, r3
 8001e82:	e00c      	b.n	8001e9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	bf0c      	ite	eq
 8001e96:	2301      	moveq	r3, #1
 8001e98:	2300      	movne	r3, #0
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d0b6      	beq.n	8001e12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b084      	sub	sp, #16
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ebc:	e051      	b.n	8001f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ecc:	d123      	bne.n	8001f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001edc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ee6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f043 0204 	orr.w	r2, r3, #4
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e046      	b.n	8001fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1c:	d021      	beq.n	8001f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f1e:	f7fe fff3 	bl	8000f08 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d302      	bcc.n	8001f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d116      	bne.n	8001f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f043 0220 	orr.w	r2, r3, #32
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e020      	b.n	8001fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	0c1b      	lsrs	r3, r3, #16
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d10c      	bne.n	8001f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	43da      	mvns	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	4013      	ands	r3, r2
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bf14      	ite	ne
 8001f7e:	2301      	movne	r3, #1
 8001f80:	2300      	moveq	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	e00b      	b.n	8001f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	43da      	mvns	r2, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	4013      	ands	r3, r2
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf14      	ite	ne
 8001f98:	2301      	movne	r3, #1
 8001f9a:	2300      	moveq	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d18d      	bne.n	8001ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fb8:	e02d      	b.n	8002016 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 f88d 	bl	80020da <I2C_IsAcknowledgeFailed>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e02d      	b.n	8002026 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd0:	d021      	beq.n	8002016 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd2:	f7fe ff99 	bl	8000f08 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d302      	bcc.n	8001fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d116      	bne.n	8002016 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f043 0220 	orr.w	r2, r3, #32
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e007      	b.n	8002026 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002020:	2b80      	cmp	r3, #128	; 0x80
 8002022:	d1ca      	bne.n	8001fba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b084      	sub	sp, #16
 8002032:	af00      	add	r7, sp, #0
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800203a:	e042      	b.n	80020c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b10      	cmp	r3, #16
 8002048:	d119      	bne.n	800207e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f06f 0210 	mvn.w	r2, #16
 8002052:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2220      	movs	r2, #32
 800205e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e029      	b.n	80020d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800207e:	f7fe ff43 	bl	8000f08 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	429a      	cmp	r2, r3
 800208c:	d302      	bcc.n	8002094 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d116      	bne.n	80020c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f043 0220 	orr.w	r2, r3, #32
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e007      	b.n	80020d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020cc:	2b40      	cmp	r3, #64	; 0x40
 80020ce:	d1b5      	bne.n	800203c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f0:	d11b      	bne.n	800212a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020fa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2220      	movs	r2, #32
 8002106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f043 0204 	orr.w	r2, r3, #4
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e128      	b.n	800239c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d109      	bne.n	800216a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a90      	ldr	r2, [pc, #576]	; (80023a4 <HAL_I2S_Init+0x26c>)
 8002162:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7fe fbb1 	bl	80008cc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2202      	movs	r2, #2
 800216e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002180:	f023 030f 	bic.w	r3, r3, #15
 8002184:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2202      	movs	r2, #2
 800218c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d060      	beq.n	8002258 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d102      	bne.n	80021a4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800219e:	2310      	movs	r3, #16
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	e001      	b.n	80021a8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80021a4:	2320      	movs	r3, #32
 80021a6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2b20      	cmp	r3, #32
 80021ae:	d802      	bhi.n	80021b6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80021b6:	2001      	movs	r0, #1
 80021b8:	f002 fc42 	bl	8004a40 <HAL_RCCEx_GetPeriphCLKFreq>
 80021bc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c6:	d125      	bne.n	8002214 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d010      	beq.n	80021f2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	461a      	mov	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ec:	3305      	adds	r3, #5
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	e01f      	b.n	8002232 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	461a      	mov	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	fbb2 f3f3 	udiv	r3, r2, r3
 800220e:	3305      	adds	r3, #5
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	e00e      	b.n	8002232 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	fbb2 f2f3 	udiv	r2, r2, r3
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	461a      	mov	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	fbb2 f3f3 	udiv	r3, r2, r3
 800222e:	3305      	adds	r3, #5
 8002230:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4a5c      	ldr	r2, [pc, #368]	; (80023a8 <HAL_I2S_Init+0x270>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	08db      	lsrs	r3, r3, #3
 800223c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	085b      	lsrs	r3, r3, #1
 800224e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	021b      	lsls	r3, r3, #8
 8002254:	61bb      	str	r3, [r7, #24]
 8002256:	e003      	b.n	8002260 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002258:	2302      	movs	r3, #2
 800225a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d902      	bls.n	800226c <HAL_I2S_Init+0x134>
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	2bff      	cmp	r3, #255	; 0xff
 800226a:	d907      	bls.n	800227c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002270:	f043 0210 	orr.w	r2, r3, #16
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e08f      	b.n	800239c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	ea42 0103 	orr.w	r1, r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	69fa      	ldr	r2, [r7, #28]
 800228c:	430a      	orrs	r2, r1
 800228e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800229a:	f023 030f 	bic.w	r3, r3, #15
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6851      	ldr	r1, [r2, #4]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6892      	ldr	r2, [r2, #8]
 80022a6:	4311      	orrs	r1, r2
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	68d2      	ldr	r2, [r2, #12]
 80022ac:	4311      	orrs	r1, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6992      	ldr	r2, [r2, #24]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022be:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d161      	bne.n	800238c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a38      	ldr	r2, [pc, #224]	; (80023ac <HAL_I2S_Init+0x274>)
 80022cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a37      	ldr	r2, [pc, #220]	; (80023b0 <HAL_I2S_Init+0x278>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d101      	bne.n	80022dc <HAL_I2S_Init+0x1a4>
 80022d8:	4b36      	ldr	r3, [pc, #216]	; (80023b4 <HAL_I2S_Init+0x27c>)
 80022da:	e001      	b.n	80022e0 <HAL_I2S_Init+0x1a8>
 80022dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	4932      	ldr	r1, [pc, #200]	; (80023b0 <HAL_I2S_Init+0x278>)
 80022e8:	428a      	cmp	r2, r1
 80022ea:	d101      	bne.n	80022f0 <HAL_I2S_Init+0x1b8>
 80022ec:	4a31      	ldr	r2, [pc, #196]	; (80023b4 <HAL_I2S_Init+0x27c>)
 80022ee:	e001      	b.n	80022f4 <HAL_I2S_Init+0x1bc>
 80022f0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80022f4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80022f8:	f023 030f 	bic.w	r3, r3, #15
 80022fc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a2b      	ldr	r2, [pc, #172]	; (80023b0 <HAL_I2S_Init+0x278>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d101      	bne.n	800230c <HAL_I2S_Init+0x1d4>
 8002308:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <HAL_I2S_Init+0x27c>)
 800230a:	e001      	b.n	8002310 <HAL_I2S_Init+0x1d8>
 800230c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002310:	2202      	movs	r2, #2
 8002312:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a25      	ldr	r2, [pc, #148]	; (80023b0 <HAL_I2S_Init+0x278>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d101      	bne.n	8002322 <HAL_I2S_Init+0x1ea>
 800231e:	4b25      	ldr	r3, [pc, #148]	; (80023b4 <HAL_I2S_Init+0x27c>)
 8002320:	e001      	b.n	8002326 <HAL_I2S_Init+0x1ee>
 8002322:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002332:	d003      	beq.n	800233c <HAL_I2S_Init+0x204>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d103      	bne.n	8002344 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800233c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	e001      	b.n	8002348 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002344:	2300      	movs	r3, #0
 8002346:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002352:	4313      	orrs	r3, r2
 8002354:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800235c:	4313      	orrs	r3, r2
 800235e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002366:	4313      	orrs	r3, r2
 8002368:	b29a      	uxth	r2, r3
 800236a:	897b      	ldrh	r3, [r7, #10]
 800236c:	4313      	orrs	r3, r2
 800236e:	b29b      	uxth	r3, r3
 8002370:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002374:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a0d      	ldr	r2, [pc, #52]	; (80023b0 <HAL_I2S_Init+0x278>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d101      	bne.n	8002384 <HAL_I2S_Init+0x24c>
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <HAL_I2S_Init+0x27c>)
 8002382:	e001      	b.n	8002388 <HAL_I2S_Init+0x250>
 8002384:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002388:	897a      	ldrh	r2, [r7, #10]
 800238a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3720      	adds	r7, #32
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	080024af 	.word	0x080024af
 80023a8:	cccccccd 	.word	0xcccccccd
 80023ac:	080025c5 	.word	0x080025c5
 80023b0:	40003800 	.word	0x40003800
 80023b4:	40003400 	.word	0x40003400

080023b8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	881a      	ldrh	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	1c9a      	adds	r2, r3, #2
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002416:	b29b      	uxth	r3, r3
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002424:	b29b      	uxth	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10e      	bne.n	8002448 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002438:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ffb8 	bl	80023b8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	b292      	uxth	r2, r2
 8002464:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	1c9a      	adds	r2, r3, #2
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002474:	b29b      	uxth	r3, r3
 8002476:	3b01      	subs	r3, #1
 8002478:	b29a      	uxth	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002482:	b29b      	uxth	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10e      	bne.n	80024a6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002496:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ff93 	bl	80023cc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b086      	sub	sp, #24
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d13a      	bne.n	8002540 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d109      	bne.n	80024e8 <I2S_IRQHandler+0x3a>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024de:	2b40      	cmp	r3, #64	; 0x40
 80024e0:	d102      	bne.n	80024e8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff ffb4 	bl	8002450 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ee:	2b40      	cmp	r3, #64	; 0x40
 80024f0:	d126      	bne.n	8002540 <I2S_IRQHandler+0x92>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0320 	and.w	r3, r3, #32
 80024fc:	2b20      	cmp	r3, #32
 80024fe:	d11f      	bne.n	8002540 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800250e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002510:	2300      	movs	r3, #0
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	f043 0202 	orr.w	r2, r3, #2
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ff50 	bl	80023e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b03      	cmp	r3, #3
 800254a:	d136      	bne.n	80025ba <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b02      	cmp	r3, #2
 8002554:	d109      	bne.n	800256a <I2S_IRQHandler+0xbc>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002560:	2b80      	cmp	r3, #128	; 0x80
 8002562:	d102      	bne.n	800256a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff ff45 	bl	80023f4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b08      	cmp	r3, #8
 8002572:	d122      	bne.n	80025ba <I2S_IRQHandler+0x10c>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 0320 	and.w	r3, r3, #32
 800257e:	2b20      	cmp	r3, #32
 8002580:	d11b      	bne.n	80025ba <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002590:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ac:	f043 0204 	orr.w	r2, r3, #4
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff ff13 	bl	80023e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025ba:	bf00      	nop
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a92      	ldr	r2, [pc, #584]	; (8002824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d101      	bne.n	80025e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80025de:	4b92      	ldr	r3, [pc, #584]	; (8002828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80025e0:	e001      	b.n	80025e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80025e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a8b      	ldr	r2, [pc, #556]	; (8002824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d101      	bne.n	8002600 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80025fc:	4b8a      	ldr	r3, [pc, #552]	; (8002828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80025fe:	e001      	b.n	8002604 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002600:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002610:	d004      	beq.n	800261c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 8099 	bne.w	800274e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b02      	cmp	r3, #2
 8002624:	d107      	bne.n	8002636 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f925 	bl	8002880 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b01      	cmp	r3, #1
 800263e:	d107      	bne.n	8002650 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d002      	beq.n	8002650 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f9c8 	bl	80029e0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002656:	2b40      	cmp	r3, #64	; 0x40
 8002658:	d13a      	bne.n	80026d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d035      	beq.n	80026d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a6e      	ldr	r2, [pc, #440]	; (8002824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d101      	bne.n	8002672 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800266e:	4b6e      	ldr	r3, [pc, #440]	; (8002828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002670:	e001      	b.n	8002676 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002672:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4969      	ldr	r1, [pc, #420]	; (8002824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800267e:	428b      	cmp	r3, r1
 8002680:	d101      	bne.n	8002686 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002682:	4b69      	ldr	r3, [pc, #420]	; (8002828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002684:	e001      	b.n	800268a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002686:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800268a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800268e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800269e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	f043 0202 	orr.w	r2, r3, #2
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff fe88 	bl	80023e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	f040 80c3 	bne.w	8002862 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f003 0320 	and.w	r3, r3, #32
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 80bd 	beq.w	8002862 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80026f6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a49      	ldr	r2, [pc, #292]	; (8002824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d101      	bne.n	8002706 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002702:	4b49      	ldr	r3, [pc, #292]	; (8002828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002704:	e001      	b.n	800270a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002706:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4944      	ldr	r1, [pc, #272]	; (8002824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002712:	428b      	cmp	r3, r1
 8002714:	d101      	bne.n	800271a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002716:	4b44      	ldr	r3, [pc, #272]	; (8002828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002718:	e001      	b.n	800271e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800271a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800271e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002722:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002724:	2300      	movs	r3, #0
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f043 0204 	orr.w	r2, r3, #4
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff fe4a 	bl	80023e0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800274c:	e089      	b.n	8002862 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b02      	cmp	r3, #2
 8002756:	d107      	bne.n	8002768 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f8be 	bl	80028e4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b01      	cmp	r3, #1
 8002770:	d107      	bne.n	8002782 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f8fd 	bl	800297c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002788:	2b40      	cmp	r3, #64	; 0x40
 800278a:	d12f      	bne.n	80027ec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f003 0320 	and.w	r3, r3, #32
 8002792:	2b00      	cmp	r3, #0
 8002794:	d02a      	beq.n	80027ec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027a4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a1e      	ldr	r2, [pc, #120]	; (8002824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d101      	bne.n	80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80027b0:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80027b2:	e001      	b.n	80027b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80027b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4919      	ldr	r1, [pc, #100]	; (8002824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80027c0:	428b      	cmp	r3, r1
 80027c2:	d101      	bne.n	80027c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80027c4:	4b18      	ldr	r3, [pc, #96]	; (8002828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80027c6:	e001      	b.n	80027cc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80027c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027d0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	f043 0202 	orr.w	r2, r3, #2
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff fdfa 	bl	80023e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d136      	bne.n	8002864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	f003 0320 	and.w	r3, r3, #32
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d031      	beq.n	8002864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a07      	ldr	r2, [pc, #28]	; (8002824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d101      	bne.n	800280e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800280a:	4b07      	ldr	r3, [pc, #28]	; (8002828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800280c:	e001      	b.n	8002812 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800280e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4902      	ldr	r1, [pc, #8]	; (8002824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800281a:	428b      	cmp	r3, r1
 800281c:	d106      	bne.n	800282c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800281e:	4b02      	ldr	r3, [pc, #8]	; (8002828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002820:	e006      	b.n	8002830 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002822:	bf00      	nop
 8002824:	40003800 	.word	0x40003800
 8002828:	40003400 	.word	0x40003400
 800282c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002830:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002834:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002844:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	f043 0204 	orr.w	r2, r3, #4
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff fdc0 	bl	80023e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002860:	e000      	b.n	8002864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002862:	bf00      	nop
}
 8002864:	bf00      	nop
 8002866:	3720      	adds	r7, #32
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	1c99      	adds	r1, r3, #2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6251      	str	r1, [r2, #36]	; 0x24
 8002892:	881a      	ldrh	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d113      	bne.n	80028da <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d106      	bne.n	80028da <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ffc9 	bl	800286c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	1c99      	adds	r1, r3, #2
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6251      	str	r1, [r2, #36]	; 0x24
 80028f6:	8819      	ldrh	r1, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a1d      	ldr	r2, [pc, #116]	; (8002974 <I2SEx_TxISR_I2SExt+0x90>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d101      	bne.n	8002906 <I2SEx_TxISR_I2SExt+0x22>
 8002902:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <I2SEx_TxISR_I2SExt+0x94>)
 8002904:	e001      	b.n	800290a <I2SEx_TxISR_I2SExt+0x26>
 8002906:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800290a:	460a      	mov	r2, r1
 800290c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002912:	b29b      	uxth	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d121      	bne.n	800296a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a12      	ldr	r2, [pc, #72]	; (8002974 <I2SEx_TxISR_I2SExt+0x90>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d101      	bne.n	8002934 <I2SEx_TxISR_I2SExt+0x50>
 8002930:	4b11      	ldr	r3, [pc, #68]	; (8002978 <I2SEx_TxISR_I2SExt+0x94>)
 8002932:	e001      	b.n	8002938 <I2SEx_TxISR_I2SExt+0x54>
 8002934:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	490d      	ldr	r1, [pc, #52]	; (8002974 <I2SEx_TxISR_I2SExt+0x90>)
 8002940:	428b      	cmp	r3, r1
 8002942:	d101      	bne.n	8002948 <I2SEx_TxISR_I2SExt+0x64>
 8002944:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <I2SEx_TxISR_I2SExt+0x94>)
 8002946:	e001      	b.n	800294c <I2SEx_TxISR_I2SExt+0x68>
 8002948:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800294c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002950:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d106      	bne.n	800296a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7ff ff81 	bl	800286c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40003800 	.word	0x40003800
 8002978:	40003400 	.word	0x40003400

0800297c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68d8      	ldr	r0, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298e:	1c99      	adds	r1, r3, #2
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002994:	b282      	uxth	r2, r0
 8002996:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800299c:	b29b      	uxth	r3, r3
 800299e:	3b01      	subs	r3, #1
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d113      	bne.n	80029d8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029be:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d106      	bne.n	80029d8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff ff4a 	bl	800286c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a20      	ldr	r2, [pc, #128]	; (8002a70 <I2SEx_RxISR_I2SExt+0x90>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d101      	bne.n	80029f6 <I2SEx_RxISR_I2SExt+0x16>
 80029f2:	4b20      	ldr	r3, [pc, #128]	; (8002a74 <I2SEx_RxISR_I2SExt+0x94>)
 80029f4:	e001      	b.n	80029fa <I2SEx_RxISR_I2SExt+0x1a>
 80029f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029fa:	68d8      	ldr	r0, [r3, #12]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	1c99      	adds	r1, r3, #2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002a06:	b282      	uxth	r2, r0
 8002a08:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d121      	bne.n	8002a66 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a12      	ldr	r2, [pc, #72]	; (8002a70 <I2SEx_RxISR_I2SExt+0x90>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d101      	bne.n	8002a30 <I2SEx_RxISR_I2SExt+0x50>
 8002a2c:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <I2SEx_RxISR_I2SExt+0x94>)
 8002a2e:	e001      	b.n	8002a34 <I2SEx_RxISR_I2SExt+0x54>
 8002a30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	490d      	ldr	r1, [pc, #52]	; (8002a70 <I2SEx_RxISR_I2SExt+0x90>)
 8002a3c:	428b      	cmp	r3, r1
 8002a3e:	d101      	bne.n	8002a44 <I2SEx_RxISR_I2SExt+0x64>
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <I2SEx_RxISR_I2SExt+0x94>)
 8002a42:	e001      	b.n	8002a48 <I2SEx_RxISR_I2SExt+0x68>
 8002a44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a48:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a4c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d106      	bne.n	8002a66 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ff03 	bl	800286c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40003800 	.word	0x40003800
 8002a74:	40003400 	.word	0x40003400

08002a78 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a7a:	b08f      	sub	sp, #60	; 0x3c
 8002a7c:	af0a      	add	r7, sp, #40	; 0x28
 8002a7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e10f      	b.n	8002caa <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d106      	bne.n	8002aaa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f005 fecd 	bl	8008844 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2203      	movs	r2, #3
 8002aae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d102      	bne.n	8002ac4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f002 f9b4 	bl	8004e36 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	603b      	str	r3, [r7, #0]
 8002ad4:	687e      	ldr	r6, [r7, #4]
 8002ad6:	466d      	mov	r5, sp
 8002ad8:	f106 0410 	add.w	r4, r6, #16
 8002adc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ade:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ae0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ae2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ae4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ae8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002aec:	1d33      	adds	r3, r6, #4
 8002aee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002af0:	6838      	ldr	r0, [r7, #0]
 8002af2:	f002 f88c 	bl	8004c0e <USB_CoreInit>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0d0      	b.n	8002caa <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f002 f9a2 	bl	8004e58 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b14:	2300      	movs	r3, #0
 8002b16:	73fb      	strb	r3, [r7, #15]
 8002b18:	e04a      	b.n	8002bb0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b1a:	7bfa      	ldrb	r2, [r7, #15]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	4413      	add	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	333d      	adds	r3, #61	; 0x3d
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	333c      	adds	r3, #60	; 0x3c
 8002b3e:	7bfa      	ldrb	r2, [r7, #15]
 8002b40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b42:	7bfa      	ldrb	r2, [r7, #15]
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	b298      	uxth	r0, r3
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	3344      	adds	r3, #68	; 0x44
 8002b56:	4602      	mov	r2, r0
 8002b58:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b5a:	7bfa      	ldrb	r2, [r7, #15]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	3340      	adds	r3, #64	; 0x40
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	3348      	adds	r3, #72	; 0x48
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b82:	7bfa      	ldrb	r2, [r7, #15]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	334c      	adds	r3, #76	; 0x4c
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b96:	7bfa      	ldrb	r2, [r7, #15]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	3354      	adds	r3, #84	; 0x54
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	3301      	adds	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d3af      	bcc.n	8002b1a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	73fb      	strb	r3, [r7, #15]
 8002bbe:	e044      	b.n	8002c4a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bc0:	7bfa      	ldrb	r2, [r7, #15]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bd6:	7bfa      	ldrb	r2, [r7, #15]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	3301      	adds	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
 8002c4a:	7bfa      	ldrb	r2, [r7, #15]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d3b5      	bcc.n	8002bc0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	603b      	str	r3, [r7, #0]
 8002c5a:	687e      	ldr	r6, [r7, #4]
 8002c5c:	466d      	mov	r5, sp
 8002c5e:	f106 0410 	add.w	r4, r6, #16
 8002c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c72:	1d33      	adds	r3, r6, #4
 8002c74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c76:	6838      	ldr	r0, [r7, #0]
 8002c78:	f002 f93a 	bl	8004ef0 <USB_DevInit>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d005      	beq.n	8002c8e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2202      	movs	r2, #2
 8002c86:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e00d      	b.n	8002caa <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f003 fa89 	bl	80061ba <USB_DevDisconnect>

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cb2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <HAL_PCD_Start+0x1c>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e020      	b.n	8002d10 <HAL_PCD_Start+0x5e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d109      	bne.n	8002cf2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d005      	beq.n	8002cf2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f002 f88c 	bl	8004e14 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f003 fa39 	bl	8006178 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d18:	b590      	push	{r4, r7, lr}
 8002d1a:	b08d      	sub	sp, #52	; 0x34
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f003 faf7 	bl	8006322 <USB_GetMode>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f040 848a 	bne.w	8003650 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f003 fa5b 	bl	80061fc <USB_ReadInterrupts>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 8480 	beq.w	800364e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	0a1b      	lsrs	r3, r3, #8
 8002d58:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f003 fa48 	bl	80061fc <USB_ReadInterrupts>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d107      	bne.n	8002d86 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695a      	ldr	r2, [r3, #20]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f002 0202 	and.w	r2, r2, #2
 8002d84:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f003 fa36 	bl	80061fc <USB_ReadInterrupts>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2b10      	cmp	r3, #16
 8002d98:	d161      	bne.n	8002e5e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699a      	ldr	r2, [r3, #24]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0210 	bic.w	r2, r2, #16
 8002da8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	f003 020f 	and.w	r2, r3, #15
 8002db6:	4613      	mov	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4413      	add	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	0c5b      	lsrs	r3, r3, #17
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d124      	bne.n	8002e20 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d035      	beq.n	8002e4e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	091b      	lsrs	r3, r3, #4
 8002dea:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	6a38      	ldr	r0, [r7, #32]
 8002df6:	f003 f86d 	bl	8005ed4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	691a      	ldr	r2, [r3, #16]
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e06:	441a      	add	r2, r3
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	6a1a      	ldr	r2, [r3, #32]
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	091b      	lsrs	r3, r3, #4
 8002e14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e18:	441a      	add	r2, r3
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	621a      	str	r2, [r3, #32]
 8002e1e:	e016      	b.n	8002e4e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	0c5b      	lsrs	r3, r3, #17
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	2b06      	cmp	r3, #6
 8002e2a:	d110      	bne.n	8002e4e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e32:	2208      	movs	r2, #8
 8002e34:	4619      	mov	r1, r3
 8002e36:	6a38      	ldr	r0, [r7, #32]
 8002e38:	f003 f84c 	bl	8005ed4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	6a1a      	ldr	r2, [r3, #32]
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	091b      	lsrs	r3, r3, #4
 8002e44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e48:	441a      	add	r2, r3
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699a      	ldr	r2, [r3, #24]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f042 0210 	orr.w	r2, r2, #16
 8002e5c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f003 f9ca 	bl	80061fc <USB_ReadInterrupts>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e6e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e72:	f040 80a7 	bne.w	8002fc4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f003 f9cf 	bl	8006222 <USB_ReadDevAllOutEpInterrupt>
 8002e84:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e86:	e099      	b.n	8002fbc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 808e 	beq.w	8002fb0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f003 f9f3 	bl	800628a <USB_ReadDevOutEPInterrupt>
 8002ea4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00c      	beq.n	8002eca <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	015a      	lsls	r2, r3, #5
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ec2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 fec3 	bl	8003c50 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00c      	beq.n	8002eee <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2308      	movs	r3, #8
 8002ee4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ee6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 ff99 	bl	8003e20 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f04:	461a      	mov	r2, r3
 8002f06:	2310      	movs	r3, #16
 8002f08:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d030      	beq.n	8002f76 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1c:	2b80      	cmp	r3, #128	; 0x80
 8002f1e:	d109      	bne.n	8002f34 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f32:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f36:	4613      	mov	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	3304      	adds	r3, #4
 8002f48:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	78db      	ldrb	r3, [r3, #3]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d108      	bne.n	8002f64 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2200      	movs	r2, #0
 8002f56:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f005 fd84 	bl	8008a6c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f70:	461a      	mov	r2, r3
 8002f72:	2302      	movs	r3, #2
 8002f74:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f003 0320 	and.w	r3, r3, #32
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	2320      	movs	r3, #32
 8002f90:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d009      	beq.n	8002fb0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa8:	461a      	mov	r2, r3
 8002faa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fae:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	085b      	lsrs	r3, r3, #1
 8002fba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f47f af62 	bne.w	8002e88 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f003 f917 	bl	80061fc <USB_ReadInterrupts>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fd8:	f040 80db 	bne.w	8003192 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f003 f938 	bl	8006256 <USB_ReadDevAllInEpInterrupt>
 8002fe6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002fec:	e0cd      	b.n	800318a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80c2 	beq.w	800317e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	4611      	mov	r1, r2
 8003004:	4618      	mov	r0, r3
 8003006:	f003 f95e 	bl	80062c6 <USB_ReadDevInEPInterrupt>
 800300a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d057      	beq.n	80030c6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	2201      	movs	r2, #1
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800302a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	43db      	mvns	r3, r3
 8003030:	69f9      	ldr	r1, [r7, #28]
 8003032:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003036:	4013      	ands	r3, r2
 8003038:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	4413      	add	r3, r2
 8003042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003046:	461a      	mov	r2, r3
 8003048:	2301      	movs	r3, #1
 800304a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d132      	bne.n	80030ba <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003058:	4613      	mov	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4413      	add	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	334c      	adds	r3, #76	; 0x4c
 8003064:	6819      	ldr	r1, [r3, #0]
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306a:	4613      	mov	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	4413      	add	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4403      	add	r3, r0
 8003074:	3348      	adds	r3, #72	; 0x48
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4419      	add	r1, r3
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307e:	4613      	mov	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4403      	add	r3, r0
 8003088:	334c      	adds	r3, #76	; 0x4c
 800308a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	2b00      	cmp	r3, #0
 8003090:	d113      	bne.n	80030ba <HAL_PCD_IRQHandler+0x3a2>
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003096:	4613      	mov	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	3354      	adds	r3, #84	; 0x54
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d108      	bne.n	80030ba <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030b2:	461a      	mov	r2, r3
 80030b4:	2101      	movs	r1, #1
 80030b6:	f003 f965 	bl	8006384 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	4619      	mov	r1, r3
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f005 fc4e 	bl	8008962 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030dc:	461a      	mov	r2, r3
 80030de:	2308      	movs	r3, #8
 80030e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f8:	461a      	mov	r2, r3
 80030fa:	2310      	movs	r3, #16
 80030fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	4413      	add	r3, r2
 8003110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003114:	461a      	mov	r2, r3
 8003116:	2340      	movs	r3, #64	; 0x40
 8003118:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d023      	beq.n	800316c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003126:	6a38      	ldr	r0, [r7, #32]
 8003128:	f002 f846 	bl	80051b8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800312c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312e:	4613      	mov	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	3338      	adds	r3, #56	; 0x38
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	4413      	add	r3, r2
 800313c:	3304      	adds	r3, #4
 800313e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	78db      	ldrb	r3, [r3, #3]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d108      	bne.n	800315a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2200      	movs	r2, #0
 800314c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	b2db      	uxtb	r3, r3
 8003152:	4619      	mov	r1, r3
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f005 fc9b 	bl	8008a90 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	4413      	add	r3, r2
 8003162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003166:	461a      	mov	r2, r3
 8003168:	2302      	movs	r3, #2
 800316a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fcdb 	bl	8003b34 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	3301      	adds	r3, #1
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003186:	085b      	lsrs	r3, r3, #1
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	2b00      	cmp	r3, #0
 800318e:	f47f af2e 	bne.w	8002fee <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f003 f830 	bl	80061fc <USB_ReadInterrupts>
 800319c:	4603      	mov	r3, r0
 800319e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031a6:	d122      	bne.n	80031ee <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	69fa      	ldr	r2, [r7, #28]
 80031b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031b6:	f023 0301 	bic.w	r3, r3, #1
 80031ba:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d108      	bne.n	80031d8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80031ce:	2100      	movs	r1, #0
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 fec3 	bl	8003f5c <HAL_PCDEx_LPM_Callback>
 80031d6:	e002      	b.n	80031de <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f005 fc39 	bl	8008a50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695a      	ldr	r2, [r3, #20]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80031ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f003 f802 	bl	80061fc <USB_ReadInterrupts>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003202:	d112      	bne.n	800322a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b01      	cmp	r3, #1
 8003212:	d102      	bne.n	800321a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f005 fbf5 	bl	8008a04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695a      	ldr	r2, [r3, #20]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003228:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f002 ffe4 	bl	80061fc <USB_ReadInterrupts>
 8003234:	4603      	mov	r3, r0
 8003236:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800323a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800323e:	f040 80b7 	bne.w	80033b0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	69fa      	ldr	r2, [r7, #28]
 800324c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003250:	f023 0301 	bic.w	r3, r3, #1
 8003254:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2110      	movs	r1, #16
 800325c:	4618      	mov	r0, r3
 800325e:	f001 ffab 	bl	80051b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003262:	2300      	movs	r3, #0
 8003264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003266:	e046      	b.n	80032f6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	4413      	add	r3, r2
 8003270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003274:	461a      	mov	r2, r3
 8003276:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800327a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800327c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	4413      	add	r3, r2
 8003284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800328c:	0151      	lsls	r1, r2, #5
 800328e:	69fa      	ldr	r2, [r7, #28]
 8003290:	440a      	add	r2, r1
 8003292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003296:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800329a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800329c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a8:	461a      	mov	r2, r3
 80032aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032ae:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80032b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032c0:	0151      	lsls	r1, r2, #5
 80032c2:	69fa      	ldr	r2, [r7, #28]
 80032c4:	440a      	add	r2, r1
 80032c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032e0:	0151      	lsls	r1, r2, #5
 80032e2:	69fa      	ldr	r2, [r7, #28]
 80032e4:	440a      	add	r2, r1
 80032e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032ee:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f2:	3301      	adds	r3, #1
 80032f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d3b3      	bcc.n	8003268 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800330e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003312:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	2b00      	cmp	r3, #0
 800331a:	d016      	beq.n	800334a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800332c:	f043 030b 	orr.w	r3, r3, #11
 8003330:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800333a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003342:	f043 030b 	orr.w	r3, r3, #11
 8003346:	6453      	str	r3, [r2, #68]	; 0x44
 8003348:	e015      	b.n	8003376 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	69fa      	ldr	r2, [r7, #28]
 8003354:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003358:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800335c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003360:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003370:	f043 030b 	orr.w	r3, r3, #11
 8003374:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69fa      	ldr	r2, [r7, #28]
 8003380:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003384:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003388:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800339a:	461a      	mov	r2, r3
 800339c:	f002 fff2 	bl	8006384 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695a      	ldr	r2, [r3, #20]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80033ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f002 ff21 	bl	80061fc <USB_ReadInterrupts>
 80033ba:	4603      	mov	r3, r0
 80033bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c4:	d124      	bne.n	8003410 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f002 ffb7 	bl	800633e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f001 ff6c 	bl	80052b2 <USB_GetDevSpeed>
 80033da:	4603      	mov	r3, r0
 80033dc:	461a      	mov	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681c      	ldr	r4, [r3, #0]
 80033e6:	f001 fa29 	bl	800483c <HAL_RCC_GetHCLKFreq>
 80033ea:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	4620      	mov	r0, r4
 80033f6:	f001 fc6b 	bl	8004cd0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f005 fad9 	bl	80089b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800340e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f002 fef1 	bl	80061fc <USB_ReadInterrupts>
 800341a:	4603      	mov	r3, r0
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b08      	cmp	r3, #8
 8003422:	d10a      	bne.n	800343a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f005 fab6 	bl	8008996 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695a      	ldr	r2, [r3, #20]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f002 0208 	and.w	r2, r2, #8
 8003438:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f002 fedc 	bl	80061fc <USB_ReadInterrupts>
 8003444:	4603      	mov	r3, r0
 8003446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344a:	2b80      	cmp	r3, #128	; 0x80
 800344c:	d122      	bne.n	8003494 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800345a:	2301      	movs	r3, #1
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
 800345e:	e014      	b.n	800348a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003464:	4613      	mov	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d105      	bne.n	8003484 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	b2db      	uxtb	r3, r3
 800347c:	4619      	mov	r1, r3
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fb27 	bl	8003ad2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	3301      	adds	r3, #1
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003490:	429a      	cmp	r2, r3
 8003492:	d3e5      	bcc.n	8003460 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f002 feaf 	bl	80061fc <USB_ReadInterrupts>
 800349e:	4603      	mov	r3, r0
 80034a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034a8:	d13b      	bne.n	8003522 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034aa:	2301      	movs	r3, #1
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
 80034ae:	e02b      	b.n	8003508 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	3340      	adds	r3, #64	; 0x40
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d115      	bne.n	8003502 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80034d6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034d8:	2b00      	cmp	r3, #0
 80034da:	da12      	bge.n	8003502 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e0:	4613      	mov	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	333f      	adds	r3, #63	; 0x3f
 80034ec:	2201      	movs	r2, #1
 80034ee:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	4619      	mov	r1, r3
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 fae8 	bl	8003ad2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	3301      	adds	r3, #1
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800350e:	429a      	cmp	r2, r3
 8003510:	d3ce      	bcc.n	80034b0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003520:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f002 fe68 	bl	80061fc <USB_ReadInterrupts>
 800352c:	4603      	mov	r3, r0
 800352e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003532:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003536:	d155      	bne.n	80035e4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003538:	2301      	movs	r3, #1
 800353a:	627b      	str	r3, [r7, #36]	; 0x24
 800353c:	e045      	b.n	80035ca <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	4413      	add	r3, r2
 8003546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d12e      	bne.n	80035c4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003566:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003568:	2b00      	cmp	r3, #0
 800356a:	da2b      	bge.n	80035c4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003578:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800357c:	429a      	cmp	r2, r3
 800357e:	d121      	bne.n	80035c4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003584:	4613      	mov	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003592:	2201      	movs	r2, #1
 8003594:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10a      	bne.n	80035c4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	69fa      	ldr	r2, [r7, #28]
 80035b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035c0:	6053      	str	r3, [r2, #4]
            break;
 80035c2:	e007      	b.n	80035d4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	3301      	adds	r3, #1
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d3b4      	bcc.n	800353e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80035e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f002 fe07 	bl	80061fc <USB_ReadInterrupts>
 80035ee:	4603      	mov	r3, r0
 80035f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f8:	d10a      	bne.n	8003610 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f005 fa5a 	bl	8008ab4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695a      	ldr	r2, [r3, #20]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800360e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f002 fdf1 	bl	80061fc <USB_ReadInterrupts>
 800361a:	4603      	mov	r3, r0
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b04      	cmp	r3, #4
 8003622:	d115      	bne.n	8003650 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f005 fa4a 	bl	8008ad0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6859      	ldr	r1, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	430a      	orrs	r2, r1
 800364a:	605a      	str	r2, [r3, #4]
 800364c:	e000      	b.n	8003650 <HAL_PCD_IRQHandler+0x938>
      return;
 800364e:	bf00      	nop
    }
  }
}
 8003650:	3734      	adds	r7, #52	; 0x34
 8003652:	46bd      	mov	sp, r7
 8003654:	bd90      	pop	{r4, r7, pc}

08003656 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b082      	sub	sp, #8
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	460b      	mov	r3, r1
 8003660:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003668:	2b01      	cmp	r3, #1
 800366a:	d101      	bne.n	8003670 <HAL_PCD_SetAddress+0x1a>
 800366c:	2302      	movs	r3, #2
 800366e:	e013      	b.n	8003698 <HAL_PCD_SetAddress+0x42>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	78fa      	ldrb	r2, [r7, #3]
 800367c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	78fa      	ldrb	r2, [r7, #3]
 8003686:	4611      	mov	r1, r2
 8003688:	4618      	mov	r0, r3
 800368a:	f002 fd4f 	bl	800612c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	4608      	mov	r0, r1
 80036aa:	4611      	mov	r1, r2
 80036ac:	461a      	mov	r2, r3
 80036ae:	4603      	mov	r3, r0
 80036b0:	70fb      	strb	r3, [r7, #3]
 80036b2:	460b      	mov	r3, r1
 80036b4:	803b      	strh	r3, [r7, #0]
 80036b6:	4613      	mov	r3, r2
 80036b8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	da0f      	bge.n	80036e6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036c6:	78fb      	ldrb	r3, [r7, #3]
 80036c8:	f003 020f 	and.w	r2, r3, #15
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4413      	add	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	3338      	adds	r3, #56	; 0x38
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	4413      	add	r3, r2
 80036da:	3304      	adds	r3, #4
 80036dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	705a      	strb	r2, [r3, #1]
 80036e4:	e00f      	b.n	8003706 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036e6:	78fb      	ldrb	r3, [r7, #3]
 80036e8:	f003 020f 	and.w	r2, r3, #15
 80036ec:	4613      	mov	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	4413      	add	r3, r2
 80036fc:	3304      	adds	r3, #4
 80036fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003706:	78fb      	ldrb	r3, [r7, #3]
 8003708:	f003 030f 	and.w	r3, r3, #15
 800370c:	b2da      	uxtb	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003712:	883a      	ldrh	r2, [r7, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	78ba      	ldrb	r2, [r7, #2]
 800371c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	785b      	ldrb	r3, [r3, #1]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d004      	beq.n	8003730 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003730:	78bb      	ldrb	r3, [r7, #2]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d102      	bne.n	800373c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_PCD_EP_Open+0xaa>
 8003746:	2302      	movs	r3, #2
 8003748:	e00e      	b.n	8003768 <HAL_PCD_EP_Open+0xc8>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68f9      	ldr	r1, [r7, #12]
 8003758:	4618      	mov	r0, r3
 800375a:	f001 fdcf 	bl	80052fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003766:	7afb      	ldrb	r3, [r7, #11]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800377c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003780:	2b00      	cmp	r3, #0
 8003782:	da0f      	bge.n	80037a4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	f003 020f 	and.w	r2, r3, #15
 800378a:	4613      	mov	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	3338      	adds	r3, #56	; 0x38
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	4413      	add	r3, r2
 8003798:	3304      	adds	r3, #4
 800379a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2201      	movs	r2, #1
 80037a0:	705a      	strb	r2, [r3, #1]
 80037a2:	e00f      	b.n	80037c4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	f003 020f 	and.w	r2, r3, #15
 80037aa:	4613      	mov	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	4413      	add	r3, r2
 80037ba:	3304      	adds	r3, #4
 80037bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <HAL_PCD_EP_Close+0x6e>
 80037da:	2302      	movs	r3, #2
 80037dc:	e00e      	b.n	80037fc <HAL_PCD_EP_Close+0x8c>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68f9      	ldr	r1, [r7, #12]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f001 fe0d 	bl	800540c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	607a      	str	r2, [r7, #4]
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	460b      	mov	r3, r1
 8003812:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003814:	7afb      	ldrb	r3, [r7, #11]
 8003816:	f003 020f 	and.w	r2, r3, #15
 800381a:	4613      	mov	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4413      	add	r3, r2
 800382a:	3304      	adds	r3, #4
 800382c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2200      	movs	r2, #0
 800383e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2200      	movs	r2, #0
 8003844:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003846:	7afb      	ldrb	r3, [r7, #11]
 8003848:	f003 030f 	and.w	r3, r3, #15
 800384c:	b2da      	uxtb	r2, r3
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d102      	bne.n	8003860 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003860:	7afb      	ldrb	r3, [r7, #11]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	b2db      	uxtb	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	6979      	ldr	r1, [r7, #20]
 8003878:	f002 f8ec 	bl	8005a54 <USB_EP0StartXfer>
 800387c:	e008      	b.n	8003890 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	b2db      	uxtb	r3, r3
 8003888:	461a      	mov	r2, r3
 800388a:	6979      	ldr	r1, [r7, #20]
 800388c:	f001 fe9a 	bl	80055c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	460b      	mov	r3, r1
 80038a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038a6:	78fb      	ldrb	r3, [r7, #3]
 80038a8:	f003 020f 	and.w	r2, r3, #15
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	4413      	add	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80038bc:	681b      	ldr	r3, [r3, #0]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b086      	sub	sp, #24
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	603b      	str	r3, [r7, #0]
 80038d6:	460b      	mov	r3, r1
 80038d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038da:	7afb      	ldrb	r3, [r7, #11]
 80038dc:	f003 020f 	and.w	r2, r3, #15
 80038e0:	4613      	mov	r3, r2
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	4413      	add	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	3338      	adds	r3, #56	; 0x38
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4413      	add	r3, r2
 80038ee:	3304      	adds	r3, #4
 80038f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2200      	movs	r2, #0
 8003902:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	2201      	movs	r2, #1
 8003908:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800390a:	7afb      	ldrb	r3, [r7, #11]
 800390c:	f003 030f 	and.w	r3, r3, #15
 8003910:	b2da      	uxtb	r2, r3
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d102      	bne.n	8003924 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003924:	7afb      	ldrb	r3, [r7, #11]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	2b00      	cmp	r3, #0
 800392c:	d109      	bne.n	8003942 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	b2db      	uxtb	r3, r3
 8003938:	461a      	mov	r2, r3
 800393a:	6979      	ldr	r1, [r7, #20]
 800393c:	f002 f88a 	bl	8005a54 <USB_EP0StartXfer>
 8003940:	e008      	b.n	8003954 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6818      	ldr	r0, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	461a      	mov	r2, r3
 800394e:	6979      	ldr	r1, [r7, #20]
 8003950:	f001 fe38 	bl	80055c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	460b      	mov	r3, r1
 8003968:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800396a:	78fb      	ldrb	r3, [r7, #3]
 800396c:	f003 020f 	and.w	r2, r3, #15
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	429a      	cmp	r2, r3
 8003976:	d901      	bls.n	800397c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e050      	b.n	8003a1e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800397c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003980:	2b00      	cmp	r3, #0
 8003982:	da0f      	bge.n	80039a4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	f003 020f 	and.w	r2, r3, #15
 800398a:	4613      	mov	r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	3338      	adds	r3, #56	; 0x38
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	4413      	add	r3, r2
 8003998:	3304      	adds	r3, #4
 800399a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2201      	movs	r2, #1
 80039a0:	705a      	strb	r2, [r3, #1]
 80039a2:	e00d      	b.n	80039c0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	4613      	mov	r3, r2
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	4413      	add	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	4413      	add	r3, r2
 80039b6:	3304      	adds	r3, #4
 80039b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2201      	movs	r2, #1
 80039c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039c6:	78fb      	ldrb	r3, [r7, #3]
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_PCD_EP_SetStall+0x82>
 80039dc:	2302      	movs	r3, #2
 80039de:	e01e      	b.n	8003a1e <HAL_PCD_EP_SetStall+0xc0>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68f9      	ldr	r1, [r7, #12]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f002 fac8 	bl	8005f84 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039f4:	78fb      	ldrb	r3, [r7, #3]
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10a      	bne.n	8003a14 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	b2d9      	uxtb	r1, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f002 fcb8 	bl	8006384 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b084      	sub	sp, #16
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	460b      	mov	r3, r1
 8003a30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a32:	78fb      	ldrb	r3, [r7, #3]
 8003a34:	f003 020f 	and.w	r2, r3, #15
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d901      	bls.n	8003a44 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e042      	b.n	8003aca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	da0f      	bge.n	8003a6c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	f003 020f 	and.w	r2, r3, #15
 8003a52:	4613      	mov	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	3338      	adds	r3, #56	; 0x38
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	4413      	add	r3, r2
 8003a60:	3304      	adds	r3, #4
 8003a62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2201      	movs	r2, #1
 8003a68:	705a      	strb	r2, [r3, #1]
 8003a6a:	e00f      	b.n	8003a8c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	f003 020f 	and.w	r2, r3, #15
 8003a72:	4613      	mov	r3, r2
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4413      	add	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	4413      	add	r3, r2
 8003a82:	3304      	adds	r3, #4
 8003a84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a92:	78fb      	ldrb	r3, [r7, #3]
 8003a94:	f003 030f 	and.w	r3, r3, #15
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_PCD_EP_ClrStall+0x86>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e00e      	b.n	8003aca <HAL_PCD_EP_ClrStall+0xa4>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68f9      	ldr	r1, [r7, #12]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f002 fad0 	bl	8006060 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	460b      	mov	r3, r1
 8003adc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003ade:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	da0c      	bge.n	8003b00 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ae6:	78fb      	ldrb	r3, [r7, #3]
 8003ae8:	f003 020f 	and.w	r2, r3, #15
 8003aec:	4613      	mov	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	4413      	add	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	3338      	adds	r3, #56	; 0x38
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	4413      	add	r3, r2
 8003afa:	3304      	adds	r3, #4
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	e00c      	b.n	8003b1a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	f003 020f 	and.w	r2, r3, #15
 8003b06:	4613      	mov	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	4413      	add	r3, r2
 8003b16:	3304      	adds	r3, #4
 8003b18:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68f9      	ldr	r1, [r7, #12]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f002 f8ef 	bl	8005d04 <USB_EPStopXfer>
 8003b26:	4603      	mov	r3, r0
 8003b28:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003b2a:	7afb      	ldrb	r3, [r7, #11]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08a      	sub	sp, #40	; 0x28
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	3338      	adds	r3, #56	; 0x38
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	4413      	add	r3, r2
 8003b58:	3304      	adds	r3, #4
 8003b5a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a1a      	ldr	r2, [r3, #32]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d901      	bls.n	8003b6c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e06c      	b.n	8003c46 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	699a      	ldr	r2, [r3, #24]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	69fa      	ldr	r2, [r7, #28]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d902      	bls.n	8003b88 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	3303      	adds	r3, #3
 8003b8c:	089b      	lsrs	r3, r3, #2
 8003b8e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b90:	e02b      	b.n	8003bea <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d902      	bls.n	8003bae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	3303      	adds	r3, #3
 8003bb2:	089b      	lsrs	r3, r3, #2
 8003bb4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6919      	ldr	r1, [r3, #16]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	4603      	mov	r3, r0
 8003bcc:	6978      	ldr	r0, [r7, #20]
 8003bce:	f002 f943 	bl	8005e58 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	691a      	ldr	r2, [r3, #16]
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	441a      	add	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a1a      	ldr	r2, [r3, #32]
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	441a      	add	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d809      	bhi.n	8003c14 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a1a      	ldr	r2, [r3, #32]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d203      	bcs.n	8003c14 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1be      	bne.n	8003b92 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	699a      	ldr	r2, [r3, #24]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d811      	bhi.n	8003c44 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	2201      	movs	r2, #1
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	6939      	ldr	r1, [r7, #16]
 8003c3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c40:	4013      	ands	r3, r2
 8003c42:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3720      	adds	r7, #32
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b088      	sub	sp, #32
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	333c      	adds	r3, #60	; 0x3c
 8003c68:	3304      	adds	r3, #4
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d17b      	bne.n	8003d7e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d015      	beq.n	8003cbc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	4a61      	ldr	r2, [pc, #388]	; (8003e18 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	f240 80b9 	bls.w	8003e0c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 80b3 	beq.w	8003e0c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cb8:	6093      	str	r3, [r2, #8]
 8003cba:	e0a7      	b.n	8003e0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d009      	beq.n	8003cda <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	2320      	movs	r3, #32
 8003cd6:	6093      	str	r3, [r2, #8]
 8003cd8:	e098      	b.n	8003e0c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f040 8093 	bne.w	8003e0c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	4a4b      	ldr	r2, [pc, #300]	; (8003e18 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d90f      	bls.n	8003d0e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d04:	461a      	mov	r2, r3
 8003d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d0a:	6093      	str	r3, [r2, #8]
 8003d0c:	e07e      	b.n	8003e0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	4613      	mov	r3, r2
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	4413      	add	r3, r2
 8003d20:	3304      	adds	r3, #4
 8003d22:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	69da      	ldr	r2, [r3, #28]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	0159      	lsls	r1, r3, #5
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	440b      	add	r3, r1
 8003d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d3a:	1ad2      	subs	r2, r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d114      	bne.n	8003d70 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d109      	bne.n	8003d62 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d58:	461a      	mov	r2, r3
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	f002 fb12 	bl	8006384 <USB_EP0_OutStart>
 8003d60:	e006      	b.n	8003d70 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	441a      	add	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	4619      	mov	r1, r3
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f004 fdd8 	bl	800892c <HAL_PCD_DataOutStageCallback>
 8003d7c:	e046      	b.n	8003e0c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	4a26      	ldr	r2, [pc, #152]	; (8003e1c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d124      	bne.n	8003dd0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00a      	beq.n	8003da6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003da2:	6093      	str	r3, [r2, #8]
 8003da4:	e032      	b.n	8003e0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f003 0320 	and.w	r3, r3, #32
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	2320      	movs	r3, #32
 8003dc0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f004 fdaf 	bl	800892c <HAL_PCD_DataOutStageCallback>
 8003dce:	e01d      	b.n	8003e0c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d114      	bne.n	8003e00 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	4413      	add	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	440b      	add	r3, r1
 8003de4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d108      	bne.n	8003e00 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003df8:	461a      	mov	r2, r3
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	f002 fac2 	bl	8006384 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	4619      	mov	r1, r3
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f004 fd90 	bl	800892c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3720      	adds	r7, #32
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	4f54300a 	.word	0x4f54300a
 8003e1c:	4f54310a 	.word	0x4f54310a

08003e20 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	333c      	adds	r3, #60	; 0x3c
 8003e38:	3304      	adds	r3, #4
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4a15      	ldr	r2, [pc, #84]	; (8003ea8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d90e      	bls.n	8003e74 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d009      	beq.n	8003e74 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e72:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f004 fd47 	bl	8008908 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4a0a      	ldr	r2, [pc, #40]	; (8003ea8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d90c      	bls.n	8003e9c <PCD_EP_OutSetupPacket_int+0x7c>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d108      	bne.n	8003e9c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e94:	461a      	mov	r2, r3
 8003e96:	2101      	movs	r1, #1
 8003e98:	f002 fa74 	bl	8006384 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	4f54300a 	.word	0x4f54300a

08003eac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	70fb      	strb	r3, [r7, #3]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ec4:	78fb      	ldrb	r3, [r7, #3]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d107      	bne.n	8003eda <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003eca:	883b      	ldrh	r3, [r7, #0]
 8003ecc:	0419      	lsls	r1, r3, #16
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ed8:	e028      	b.n	8003f2c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee0:	0c1b      	lsrs	r3, r3, #16
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ee8:	2300      	movs	r3, #0
 8003eea:	73fb      	strb	r3, [r7, #15]
 8003eec:	e00d      	b.n	8003f0a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
 8003ef4:	3340      	adds	r3, #64	; 0x40
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	0c1b      	lsrs	r3, r3, #16
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	4413      	add	r3, r2
 8003f02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
 8003f06:	3301      	adds	r3, #1
 8003f08:	73fb      	strb	r3, [r7, #15]
 8003f0a:	7bfa      	ldrb	r2, [r7, #15]
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d3ec      	bcc.n	8003eee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f14:	883b      	ldrh	r3, [r7, #0]
 8003f16:	0418      	lsls	r0, r3, #16
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6819      	ldr	r1, [r3, #0]
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	4302      	orrs	r2, r0
 8003f24:	3340      	adds	r3, #64	; 0x40
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	460b      	mov	r3, r1
 8003f44:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	887a      	ldrh	r2, [r7, #2]
 8003f4c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	460b      	mov	r3, r1
 8003f66:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e267      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d075      	beq.n	800407e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f92:	4b88      	ldr	r3, [pc, #544]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 030c 	and.w	r3, r3, #12
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d00c      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f9e:	4b85      	ldr	r3, [pc, #532]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d112      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003faa:	4b82      	ldr	r3, [pc, #520]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fb6:	d10b      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb8:	4b7e      	ldr	r3, [pc, #504]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d05b      	beq.n	800407c <HAL_RCC_OscConfig+0x108>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d157      	bne.n	800407c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e242      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd8:	d106      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x74>
 8003fda:	4b76      	ldr	r3, [pc, #472]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a75      	ldr	r2, [pc, #468]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	e01d      	b.n	8004024 <HAL_RCC_OscConfig+0xb0>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ff0:	d10c      	bne.n	800400c <HAL_RCC_OscConfig+0x98>
 8003ff2:	4b70      	ldr	r3, [pc, #448]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a6f      	ldr	r2, [pc, #444]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	4b6d      	ldr	r3, [pc, #436]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a6c      	ldr	r2, [pc, #432]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8004004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	e00b      	b.n	8004024 <HAL_RCC_OscConfig+0xb0>
 800400c:	4b69      	ldr	r3, [pc, #420]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a68      	ldr	r2, [pc, #416]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8004012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004016:	6013      	str	r3, [r2, #0]
 8004018:	4b66      	ldr	r3, [pc, #408]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a65      	ldr	r2, [pc, #404]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 800401e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d013      	beq.n	8004054 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402c:	f7fc ff6c 	bl	8000f08 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004034:	f7fc ff68 	bl	8000f08 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b64      	cmp	r3, #100	; 0x64
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e207      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004046:	4b5b      	ldr	r3, [pc, #364]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0f0      	beq.n	8004034 <HAL_RCC_OscConfig+0xc0>
 8004052:	e014      	b.n	800407e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004054:	f7fc ff58 	bl	8000f08 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800405c:	f7fc ff54 	bl	8000f08 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b64      	cmp	r3, #100	; 0x64
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e1f3      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800406e:	4b51      	ldr	r3, [pc, #324]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f0      	bne.n	800405c <HAL_RCC_OscConfig+0xe8>
 800407a:	e000      	b.n	800407e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800407c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d063      	beq.n	8004152 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800408a:	4b4a      	ldr	r3, [pc, #296]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 030c 	and.w	r3, r3, #12
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00b      	beq.n	80040ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004096:	4b47      	ldr	r3, [pc, #284]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d11c      	bne.n	80040dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040a2:	4b44      	ldr	r3, [pc, #272]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d116      	bne.n	80040dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ae:	4b41      	ldr	r3, [pc, #260]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d005      	beq.n	80040c6 <HAL_RCC_OscConfig+0x152>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d001      	beq.n	80040c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e1c7      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c6:	4b3b      	ldr	r3, [pc, #236]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	4937      	ldr	r1, [pc, #220]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040da:	e03a      	b.n	8004152 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d020      	beq.n	8004126 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040e4:	4b34      	ldr	r3, [pc, #208]	; (80041b8 <HAL_RCC_OscConfig+0x244>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ea:	f7fc ff0d 	bl	8000f08 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040f2:	f7fc ff09 	bl	8000f08 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e1a8      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004104:	4b2b      	ldr	r3, [pc, #172]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0f0      	beq.n	80040f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004110:	4b28      	ldr	r3, [pc, #160]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	4925      	ldr	r1, [pc, #148]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8004120:	4313      	orrs	r3, r2
 8004122:	600b      	str	r3, [r1, #0]
 8004124:	e015      	b.n	8004152 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004126:	4b24      	ldr	r3, [pc, #144]	; (80041b8 <HAL_RCC_OscConfig+0x244>)
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412c:	f7fc feec 	bl	8000f08 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004134:	f7fc fee8 	bl	8000f08 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e187      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004146:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f0      	bne.n	8004134 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d036      	beq.n	80041cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d016      	beq.n	8004194 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004166:	4b15      	ldr	r3, [pc, #84]	; (80041bc <HAL_RCC_OscConfig+0x248>)
 8004168:	2201      	movs	r2, #1
 800416a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416c:	f7fc fecc 	bl	8000f08 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004174:	f7fc fec8 	bl	8000f08 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e167      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004186:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8004188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0f0      	beq.n	8004174 <HAL_RCC_OscConfig+0x200>
 8004192:	e01b      	b.n	80041cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004194:	4b09      	ldr	r3, [pc, #36]	; (80041bc <HAL_RCC_OscConfig+0x248>)
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800419a:	f7fc feb5 	bl	8000f08 <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a0:	e00e      	b.n	80041c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041a2:	f7fc feb1 	bl	8000f08 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d907      	bls.n	80041c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e150      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
 80041b4:	40023800 	.word	0x40023800
 80041b8:	42470000 	.word	0x42470000
 80041bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c0:	4b88      	ldr	r3, [pc, #544]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 80041c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1ea      	bne.n	80041a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 8097 	beq.w	8004308 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041da:	2300      	movs	r3, #0
 80041dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041de:	4b81      	ldr	r3, [pc, #516]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10f      	bne.n	800420a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ea:	2300      	movs	r3, #0
 80041ec:	60bb      	str	r3, [r7, #8]
 80041ee:	4b7d      	ldr	r3, [pc, #500]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	4a7c      	ldr	r2, [pc, #496]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 80041f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f8:	6413      	str	r3, [r2, #64]	; 0x40
 80041fa:	4b7a      	ldr	r3, [pc, #488]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004202:	60bb      	str	r3, [r7, #8]
 8004204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004206:	2301      	movs	r3, #1
 8004208:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420a:	4b77      	ldr	r3, [pc, #476]	; (80043e8 <HAL_RCC_OscConfig+0x474>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004212:	2b00      	cmp	r3, #0
 8004214:	d118      	bne.n	8004248 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004216:	4b74      	ldr	r3, [pc, #464]	; (80043e8 <HAL_RCC_OscConfig+0x474>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a73      	ldr	r2, [pc, #460]	; (80043e8 <HAL_RCC_OscConfig+0x474>)
 800421c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004222:	f7fc fe71 	bl	8000f08 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800422a:	f7fc fe6d 	bl	8000f08 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e10c      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423c:	4b6a      	ldr	r3, [pc, #424]	; (80043e8 <HAL_RCC_OscConfig+0x474>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0f0      	beq.n	800422a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d106      	bne.n	800425e <HAL_RCC_OscConfig+0x2ea>
 8004250:	4b64      	ldr	r3, [pc, #400]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 8004252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004254:	4a63      	ldr	r2, [pc, #396]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 8004256:	f043 0301 	orr.w	r3, r3, #1
 800425a:	6713      	str	r3, [r2, #112]	; 0x70
 800425c:	e01c      	b.n	8004298 <HAL_RCC_OscConfig+0x324>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b05      	cmp	r3, #5
 8004264:	d10c      	bne.n	8004280 <HAL_RCC_OscConfig+0x30c>
 8004266:	4b5f      	ldr	r3, [pc, #380]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	4a5e      	ldr	r2, [pc, #376]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 800426c:	f043 0304 	orr.w	r3, r3, #4
 8004270:	6713      	str	r3, [r2, #112]	; 0x70
 8004272:	4b5c      	ldr	r3, [pc, #368]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004276:	4a5b      	ldr	r2, [pc, #364]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	6713      	str	r3, [r2, #112]	; 0x70
 800427e:	e00b      	b.n	8004298 <HAL_RCC_OscConfig+0x324>
 8004280:	4b58      	ldr	r3, [pc, #352]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 8004282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004284:	4a57      	ldr	r2, [pc, #348]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 8004286:	f023 0301 	bic.w	r3, r3, #1
 800428a:	6713      	str	r3, [r2, #112]	; 0x70
 800428c:	4b55      	ldr	r3, [pc, #340]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	4a54      	ldr	r2, [pc, #336]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 8004292:	f023 0304 	bic.w	r3, r3, #4
 8004296:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d015      	beq.n	80042cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a0:	f7fc fe32 	bl	8000f08 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a6:	e00a      	b.n	80042be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a8:	f7fc fe2e 	bl	8000f08 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e0cb      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042be:	4b49      	ldr	r3, [pc, #292]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 80042c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0ee      	beq.n	80042a8 <HAL_RCC_OscConfig+0x334>
 80042ca:	e014      	b.n	80042f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042cc:	f7fc fe1c 	bl	8000f08 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d2:	e00a      	b.n	80042ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042d4:	f7fc fe18 	bl	8000f08 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e0b5      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ea:	4b3e      	ldr	r3, [pc, #248]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1ee      	bne.n	80042d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042f6:	7dfb      	ldrb	r3, [r7, #23]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d105      	bne.n	8004308 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042fc:	4b39      	ldr	r3, [pc, #228]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	4a38      	ldr	r2, [pc, #224]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 8004302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004306:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 80a1 	beq.w	8004454 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004312:	4b34      	ldr	r3, [pc, #208]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
 800431a:	2b08      	cmp	r3, #8
 800431c:	d05c      	beq.n	80043d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	2b02      	cmp	r3, #2
 8004324:	d141      	bne.n	80043aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004326:	4b31      	ldr	r3, [pc, #196]	; (80043ec <HAL_RCC_OscConfig+0x478>)
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432c:	f7fc fdec 	bl	8000f08 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004334:	f7fc fde8 	bl	8000f08 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e087      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004346:	4b27      	ldr	r3, [pc, #156]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f0      	bne.n	8004334 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69da      	ldr	r2, [r3, #28]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	019b      	lsls	r3, r3, #6
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004368:	085b      	lsrs	r3, r3, #1
 800436a:	3b01      	subs	r3, #1
 800436c:	041b      	lsls	r3, r3, #16
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	061b      	lsls	r3, r3, #24
 8004376:	491b      	ldr	r1, [pc, #108]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 8004378:	4313      	orrs	r3, r2
 800437a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800437c:	4b1b      	ldr	r3, [pc, #108]	; (80043ec <HAL_RCC_OscConfig+0x478>)
 800437e:	2201      	movs	r2, #1
 8004380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004382:	f7fc fdc1 	bl	8000f08 <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800438a:	f7fc fdbd 	bl	8000f08 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e05c      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800439c:	4b11      	ldr	r3, [pc, #68]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0f0      	beq.n	800438a <HAL_RCC_OscConfig+0x416>
 80043a8:	e054      	b.n	8004454 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043aa:	4b10      	ldr	r3, [pc, #64]	; (80043ec <HAL_RCC_OscConfig+0x478>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b0:	f7fc fdaa 	bl	8000f08 <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b8:	f7fc fda6 	bl	8000f08 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e045      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ca:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1f0      	bne.n	80043b8 <HAL_RCC_OscConfig+0x444>
 80043d6:	e03d      	b.n	8004454 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d107      	bne.n	80043f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e038      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
 80043e4:	40023800 	.word	0x40023800
 80043e8:	40007000 	.word	0x40007000
 80043ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043f0:	4b1b      	ldr	r3, [pc, #108]	; (8004460 <HAL_RCC_OscConfig+0x4ec>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d028      	beq.n	8004450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004408:	429a      	cmp	r2, r3
 800440a:	d121      	bne.n	8004450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004416:	429a      	cmp	r2, r3
 8004418:	d11a      	bne.n	8004450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004420:	4013      	ands	r3, r2
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004426:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004428:	4293      	cmp	r3, r2
 800442a:	d111      	bne.n	8004450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004436:	085b      	lsrs	r3, r3, #1
 8004438:	3b01      	subs	r3, #1
 800443a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800443c:	429a      	cmp	r2, r3
 800443e:	d107      	bne.n	8004450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800444c:	429a      	cmp	r2, r3
 800444e:	d001      	beq.n	8004454 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e000      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	40023800 	.word	0x40023800

08004464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e0cc      	b.n	8004612 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004478:	4b68      	ldr	r3, [pc, #416]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d90c      	bls.n	80044a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004486:	4b65      	ldr	r3, [pc, #404]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800448e:	4b63      	ldr	r3, [pc, #396]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	429a      	cmp	r2, r3
 800449a:	d001      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e0b8      	b.n	8004612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d020      	beq.n	80044ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044b8:	4b59      	ldr	r3, [pc, #356]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	4a58      	ldr	r2, [pc, #352]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d005      	beq.n	80044dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044d0:	4b53      	ldr	r3, [pc, #332]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	4a52      	ldr	r2, [pc, #328]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 80044d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044dc:	4b50      	ldr	r3, [pc, #320]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	494d      	ldr	r1, [pc, #308]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d044      	beq.n	8004584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d107      	bne.n	8004512 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004502:	4b47      	ldr	r3, [pc, #284]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d119      	bne.n	8004542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e07f      	b.n	8004612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2b02      	cmp	r3, #2
 8004518:	d003      	beq.n	8004522 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800451e:	2b03      	cmp	r3, #3
 8004520:	d107      	bne.n	8004532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004522:	4b3f      	ldr	r3, [pc, #252]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d109      	bne.n	8004542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e06f      	b.n	8004612 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004532:	4b3b      	ldr	r3, [pc, #236]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e067      	b.n	8004612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004542:	4b37      	ldr	r3, [pc, #220]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f023 0203 	bic.w	r2, r3, #3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	4934      	ldr	r1, [pc, #208]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 8004550:	4313      	orrs	r3, r2
 8004552:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004554:	f7fc fcd8 	bl	8000f08 <HAL_GetTick>
 8004558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455a:	e00a      	b.n	8004572 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800455c:	f7fc fcd4 	bl	8000f08 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	f241 3288 	movw	r2, #5000	; 0x1388
 800456a:	4293      	cmp	r3, r2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e04f      	b.n	8004612 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004572:	4b2b      	ldr	r3, [pc, #172]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 020c 	and.w	r2, r3, #12
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	429a      	cmp	r2, r3
 8004582:	d1eb      	bne.n	800455c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004584:	4b25      	ldr	r3, [pc, #148]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d20c      	bcs.n	80045ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004592:	4b22      	ldr	r3, [pc, #136]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800459a:	4b20      	ldr	r3, [pc, #128]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e032      	b.n	8004612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d008      	beq.n	80045ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045b8:	4b19      	ldr	r3, [pc, #100]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	4916      	ldr	r1, [pc, #88]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d009      	beq.n	80045ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045d6:	4b12      	ldr	r3, [pc, #72]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	490e      	ldr	r1, [pc, #56]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045ea:	f000 f821 	bl	8004630 <HAL_RCC_GetSysClockFreq>
 80045ee:	4602      	mov	r2, r0
 80045f0:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	091b      	lsrs	r3, r3, #4
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	490a      	ldr	r1, [pc, #40]	; (8004624 <HAL_RCC_ClockConfig+0x1c0>)
 80045fc:	5ccb      	ldrb	r3, [r1, r3]
 80045fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004602:	4a09      	ldr	r2, [pc, #36]	; (8004628 <HAL_RCC_ClockConfig+0x1c4>)
 8004604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004606:	4b09      	ldr	r3, [pc, #36]	; (800462c <HAL_RCC_ClockConfig+0x1c8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f7fc fc38 	bl	8000e80 <HAL_InitTick>

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40023c00 	.word	0x40023c00
 8004620:	40023800 	.word	0x40023800
 8004624:	0800987c 	.word	0x0800987c
 8004628:	20000000 	.word	0x20000000
 800462c:	20000004 	.word	0x20000004

08004630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004634:	b094      	sub	sp, #80	; 0x50
 8004636:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	647b      	str	r3, [r7, #68]	; 0x44
 800463c:	2300      	movs	r3, #0
 800463e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004640:	2300      	movs	r3, #0
 8004642:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004648:	4b79      	ldr	r3, [pc, #484]	; (8004830 <HAL_RCC_GetSysClockFreq+0x200>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 030c 	and.w	r3, r3, #12
 8004650:	2b08      	cmp	r3, #8
 8004652:	d00d      	beq.n	8004670 <HAL_RCC_GetSysClockFreq+0x40>
 8004654:	2b08      	cmp	r3, #8
 8004656:	f200 80e1 	bhi.w	800481c <HAL_RCC_GetSysClockFreq+0x1ec>
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <HAL_RCC_GetSysClockFreq+0x34>
 800465e:	2b04      	cmp	r3, #4
 8004660:	d003      	beq.n	800466a <HAL_RCC_GetSysClockFreq+0x3a>
 8004662:	e0db      	b.n	800481c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004664:	4b73      	ldr	r3, [pc, #460]	; (8004834 <HAL_RCC_GetSysClockFreq+0x204>)
 8004666:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004668:	e0db      	b.n	8004822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800466a:	4b73      	ldr	r3, [pc, #460]	; (8004838 <HAL_RCC_GetSysClockFreq+0x208>)
 800466c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800466e:	e0d8      	b.n	8004822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004670:	4b6f      	ldr	r3, [pc, #444]	; (8004830 <HAL_RCC_GetSysClockFreq+0x200>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004678:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800467a:	4b6d      	ldr	r3, [pc, #436]	; (8004830 <HAL_RCC_GetSysClockFreq+0x200>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d063      	beq.n	800474e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004686:	4b6a      	ldr	r3, [pc, #424]	; (8004830 <HAL_RCC_GetSysClockFreq+0x200>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	099b      	lsrs	r3, r3, #6
 800468c:	2200      	movs	r2, #0
 800468e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004690:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004698:	633b      	str	r3, [r7, #48]	; 0x30
 800469a:	2300      	movs	r3, #0
 800469c:	637b      	str	r3, [r7, #52]	; 0x34
 800469e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80046a2:	4622      	mov	r2, r4
 80046a4:	462b      	mov	r3, r5
 80046a6:	f04f 0000 	mov.w	r0, #0
 80046aa:	f04f 0100 	mov.w	r1, #0
 80046ae:	0159      	lsls	r1, r3, #5
 80046b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046b4:	0150      	lsls	r0, r2, #5
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4621      	mov	r1, r4
 80046bc:	1a51      	subs	r1, r2, r1
 80046be:	6139      	str	r1, [r7, #16]
 80046c0:	4629      	mov	r1, r5
 80046c2:	eb63 0301 	sbc.w	r3, r3, r1
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046d4:	4659      	mov	r1, fp
 80046d6:	018b      	lsls	r3, r1, #6
 80046d8:	4651      	mov	r1, sl
 80046da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046de:	4651      	mov	r1, sl
 80046e0:	018a      	lsls	r2, r1, #6
 80046e2:	4651      	mov	r1, sl
 80046e4:	ebb2 0801 	subs.w	r8, r2, r1
 80046e8:	4659      	mov	r1, fp
 80046ea:	eb63 0901 	sbc.w	r9, r3, r1
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004702:	4690      	mov	r8, r2
 8004704:	4699      	mov	r9, r3
 8004706:	4623      	mov	r3, r4
 8004708:	eb18 0303 	adds.w	r3, r8, r3
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	462b      	mov	r3, r5
 8004710:	eb49 0303 	adc.w	r3, r9, r3
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	f04f 0300 	mov.w	r3, #0
 800471e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004722:	4629      	mov	r1, r5
 8004724:	024b      	lsls	r3, r1, #9
 8004726:	4621      	mov	r1, r4
 8004728:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800472c:	4621      	mov	r1, r4
 800472e:	024a      	lsls	r2, r1, #9
 8004730:	4610      	mov	r0, r2
 8004732:	4619      	mov	r1, r3
 8004734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004736:	2200      	movs	r2, #0
 8004738:	62bb      	str	r3, [r7, #40]	; 0x28
 800473a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800473c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004740:	f7fb fd9e 	bl	8000280 <__aeabi_uldivmod>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4613      	mov	r3, r2
 800474a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800474c:	e058      	b.n	8004800 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800474e:	4b38      	ldr	r3, [pc, #224]	; (8004830 <HAL_RCC_GetSysClockFreq+0x200>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	099b      	lsrs	r3, r3, #6
 8004754:	2200      	movs	r2, #0
 8004756:	4618      	mov	r0, r3
 8004758:	4611      	mov	r1, r2
 800475a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800475e:	623b      	str	r3, [r7, #32]
 8004760:	2300      	movs	r3, #0
 8004762:	627b      	str	r3, [r7, #36]	; 0x24
 8004764:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004768:	4642      	mov	r2, r8
 800476a:	464b      	mov	r3, r9
 800476c:	f04f 0000 	mov.w	r0, #0
 8004770:	f04f 0100 	mov.w	r1, #0
 8004774:	0159      	lsls	r1, r3, #5
 8004776:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800477a:	0150      	lsls	r0, r2, #5
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	4641      	mov	r1, r8
 8004782:	ebb2 0a01 	subs.w	sl, r2, r1
 8004786:	4649      	mov	r1, r9
 8004788:	eb63 0b01 	sbc.w	fp, r3, r1
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004798:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800479c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047a0:	ebb2 040a 	subs.w	r4, r2, sl
 80047a4:	eb63 050b 	sbc.w	r5, r3, fp
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	00eb      	lsls	r3, r5, #3
 80047b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047b6:	00e2      	lsls	r2, r4, #3
 80047b8:	4614      	mov	r4, r2
 80047ba:	461d      	mov	r5, r3
 80047bc:	4643      	mov	r3, r8
 80047be:	18e3      	adds	r3, r4, r3
 80047c0:	603b      	str	r3, [r7, #0]
 80047c2:	464b      	mov	r3, r9
 80047c4:	eb45 0303 	adc.w	r3, r5, r3
 80047c8:	607b      	str	r3, [r7, #4]
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047d6:	4629      	mov	r1, r5
 80047d8:	028b      	lsls	r3, r1, #10
 80047da:	4621      	mov	r1, r4
 80047dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047e0:	4621      	mov	r1, r4
 80047e2:	028a      	lsls	r2, r1, #10
 80047e4:	4610      	mov	r0, r2
 80047e6:	4619      	mov	r1, r3
 80047e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ea:	2200      	movs	r2, #0
 80047ec:	61bb      	str	r3, [r7, #24]
 80047ee:	61fa      	str	r2, [r7, #28]
 80047f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047f4:	f7fb fd44 	bl	8000280 <__aeabi_uldivmod>
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4613      	mov	r3, r2
 80047fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004800:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <HAL_RCC_GetSysClockFreq+0x200>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	0c1b      	lsrs	r3, r3, #16
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	3301      	adds	r3, #1
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004810:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004814:	fbb2 f3f3 	udiv	r3, r2, r3
 8004818:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800481a:	e002      	b.n	8004822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800481c:	4b05      	ldr	r3, [pc, #20]	; (8004834 <HAL_RCC_GetSysClockFreq+0x204>)
 800481e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004824:	4618      	mov	r0, r3
 8004826:	3750      	adds	r7, #80	; 0x50
 8004828:	46bd      	mov	sp, r7
 800482a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800482e:	bf00      	nop
 8004830:	40023800 	.word	0x40023800
 8004834:	00f42400 	.word	0x00f42400
 8004838:	007a1200 	.word	0x007a1200

0800483c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004840:	4b03      	ldr	r3, [pc, #12]	; (8004850 <HAL_RCC_GetHCLKFreq+0x14>)
 8004842:	681b      	ldr	r3, [r3, #0]
}
 8004844:	4618      	mov	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	20000000 	.word	0x20000000

08004854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004858:	f7ff fff0 	bl	800483c <HAL_RCC_GetHCLKFreq>
 800485c:	4602      	mov	r2, r0
 800485e:	4b05      	ldr	r3, [pc, #20]	; (8004874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	0a9b      	lsrs	r3, r3, #10
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	4903      	ldr	r1, [pc, #12]	; (8004878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800486a:	5ccb      	ldrb	r3, [r1, r3]
 800486c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004870:	4618      	mov	r0, r3
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40023800 	.word	0x40023800
 8004878:	0800988c 	.word	0x0800988c

0800487c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d105      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d035      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048a4:	4b62      	ldr	r3, [pc, #392]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048aa:	f7fc fb2d 	bl	8000f08 <HAL_GetTick>
 80048ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048b0:	e008      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048b2:	f7fc fb29 	bl	8000f08 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e0b0      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048c4:	4b5b      	ldr	r3, [pc, #364]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1f0      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	019a      	lsls	r2, r3, #6
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	071b      	lsls	r3, r3, #28
 80048dc:	4955      	ldr	r1, [pc, #340]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048e4:	4b52      	ldr	r3, [pc, #328]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80048e6:	2201      	movs	r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048ea:	f7fc fb0d 	bl	8000f08 <HAL_GetTick>
 80048ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048f0:	e008      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048f2:	f7fc fb09 	bl	8000f08 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e090      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004904:	4b4b      	ldr	r3, [pc, #300]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0f0      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8083 	beq.w	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
 8004922:	4b44      	ldr	r3, [pc, #272]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	4a43      	ldr	r2, [pc, #268]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800492c:	6413      	str	r3, [r2, #64]	; 0x40
 800492e:	4b41      	ldr	r3, [pc, #260]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800493a:	4b3f      	ldr	r3, [pc, #252]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a3e      	ldr	r2, [pc, #248]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004944:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004946:	f7fc fadf 	bl	8000f08 <HAL_GetTick>
 800494a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800494c:	e008      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800494e:	f7fc fadb 	bl	8000f08 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e062      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004960:	4b35      	ldr	r3, [pc, #212]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0f0      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800496c:	4b31      	ldr	r3, [pc, #196]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800496e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004974:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d02f      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	429a      	cmp	r2, r3
 8004988:	d028      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800498a:	4b2a      	ldr	r3, [pc, #168]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800498c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004992:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004994:	4b29      	ldr	r3, [pc, #164]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004996:	2201      	movs	r2, #1
 8004998:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800499a:	4b28      	ldr	r3, [pc, #160]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80049a0:	4a24      	ldr	r2, [pc, #144]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80049a6:	4b23      	ldr	r3, [pc, #140]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d114      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80049b2:	f7fc faa9 	bl	8000f08 <HAL_GetTick>
 80049b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b8:	e00a      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ba:	f7fc faa5 	bl	8000f08 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e02a      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d0:	4b18      	ldr	r3, [pc, #96]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0ee      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049e8:	d10d      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80049ea:	4b12      	ldr	r3, [pc, #72]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80049fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049fe:	490d      	ldr	r1, [pc, #52]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	608b      	str	r3, [r1, #8]
 8004a04:	e005      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004a06:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	4a0a      	ldr	r2, [pc, #40]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a0c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a10:	6093      	str	r3, [r2, #8]
 8004a12:	4b08      	ldr	r3, [pc, #32]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a1e:	4905      	ldr	r1, [pc, #20]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	42470068 	.word	0x42470068
 8004a34:	40023800 	.word	0x40023800
 8004a38:	40007000 	.word	0x40007000
 8004a3c:	42470e40 	.word	0x42470e40

08004a40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d13e      	bne.n	8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004a5e:	4b23      	ldr	r3, [pc, #140]	; (8004aec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d005      	beq.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d12f      	bne.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a74:	4b1e      	ldr	r3, [pc, #120]	; (8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a76:	617b      	str	r3, [r7, #20]
          break;
 8004a78:	e02f      	b.n	8004ada <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004a7a:	4b1c      	ldr	r3, [pc, #112]	; (8004aec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a86:	d108      	bne.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a88:	4b18      	ldr	r3, [pc, #96]	; (8004aec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a90:	4a18      	ldr	r2, [pc, #96]	; (8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	e007      	b.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a9a:	4b14      	ldr	r3, [pc, #80]	; (8004aec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aa2:	4a15      	ldr	r2, [pc, #84]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004aaa:	4b10      	ldr	r3, [pc, #64]	; (8004aec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab0:	099b      	lsrs	r3, r3, #6
 8004ab2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	fb02 f303 	mul.w	r3, r2, r3
 8004abc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004abe:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ac4:	0f1b      	lsrs	r3, r3, #28
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad0:	617b      	str	r3, [r7, #20]
          break;
 8004ad2:	e002      	b.n	8004ada <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	617b      	str	r3, [r7, #20]
          break;
 8004ad8:	bf00      	nop
        }
      }
      break;
 8004ada:	bf00      	nop
    }
  }
  return frequency;
 8004adc:	697b      	ldr	r3, [r7, #20]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	40023800 	.word	0x40023800
 8004af0:	00bb8000 	.word	0x00bb8000
 8004af4:	007a1200 	.word	0x007a1200
 8004af8:	00f42400 	.word	0x00f42400

08004afc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e07b      	b.n	8004c06 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d108      	bne.n	8004b28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b1e:	d009      	beq.n	8004b34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	61da      	str	r2, [r3, #28]
 8004b26:	e005      	b.n	8004b34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d106      	bne.n	8004b54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fc f85e 	bl	8000c10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b86:	431a      	orrs	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	431a      	orrs	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb8:	ea42 0103 	orr.w	r1, r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	0c1b      	lsrs	r3, r3, #16
 8004bd2:	f003 0104 	and.w	r1, r3, #4
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	f003 0210 	and.w	r2, r3, #16
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bf4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c0e:	b084      	sub	sp, #16
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	f107 001c 	add.w	r0, r7, #28
 8004c1c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d122      	bne.n	8004c6c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d105      	bne.n	8004c60 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f001 fbed 	bl	8006440 <USB_CoreReset>
 8004c66:	4603      	mov	r3, r0
 8004c68:	73fb      	strb	r3, [r7, #15]
 8004c6a:	e01a      	b.n	8004ca2 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f001 fbe1 	bl	8006440 <USB_CoreReset>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d106      	bne.n	8004c96 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	639a      	str	r2, [r3, #56]	; 0x38
 8004c94:	e005      	b.n	8004ca2 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d10b      	bne.n	8004cc0 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f043 0206 	orr.w	r2, r3, #6
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f043 0220 	orr.w	r2, r3, #32
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ccc:	b004      	add	sp, #16
 8004cce:	4770      	bx	lr

08004cd0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b087      	sub	sp, #28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004cde:	79fb      	ldrb	r3, [r7, #7]
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d165      	bne.n	8004db0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4a41      	ldr	r2, [pc, #260]	; (8004dec <USB_SetTurnaroundTime+0x11c>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d906      	bls.n	8004cfa <USB_SetTurnaroundTime+0x2a>
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4a40      	ldr	r2, [pc, #256]	; (8004df0 <USB_SetTurnaroundTime+0x120>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d202      	bcs.n	8004cfa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004cf4:	230f      	movs	r3, #15
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	e062      	b.n	8004dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	4a3c      	ldr	r2, [pc, #240]	; (8004df0 <USB_SetTurnaroundTime+0x120>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d306      	bcc.n	8004d10 <USB_SetTurnaroundTime+0x40>
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	4a3b      	ldr	r2, [pc, #236]	; (8004df4 <USB_SetTurnaroundTime+0x124>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d202      	bcs.n	8004d10 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d0a:	230e      	movs	r3, #14
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	e057      	b.n	8004dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	4a38      	ldr	r2, [pc, #224]	; (8004df4 <USB_SetTurnaroundTime+0x124>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d306      	bcc.n	8004d26 <USB_SetTurnaroundTime+0x56>
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	4a37      	ldr	r2, [pc, #220]	; (8004df8 <USB_SetTurnaroundTime+0x128>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d202      	bcs.n	8004d26 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d20:	230d      	movs	r3, #13
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	e04c      	b.n	8004dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	4a33      	ldr	r2, [pc, #204]	; (8004df8 <USB_SetTurnaroundTime+0x128>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d306      	bcc.n	8004d3c <USB_SetTurnaroundTime+0x6c>
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	4a32      	ldr	r2, [pc, #200]	; (8004dfc <USB_SetTurnaroundTime+0x12c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d802      	bhi.n	8004d3c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004d36:	230c      	movs	r3, #12
 8004d38:	617b      	str	r3, [r7, #20]
 8004d3a:	e041      	b.n	8004dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	4a2f      	ldr	r2, [pc, #188]	; (8004dfc <USB_SetTurnaroundTime+0x12c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d906      	bls.n	8004d52 <USB_SetTurnaroundTime+0x82>
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	4a2e      	ldr	r2, [pc, #184]	; (8004e00 <USB_SetTurnaroundTime+0x130>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d802      	bhi.n	8004d52 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004d4c:	230b      	movs	r3, #11
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	e036      	b.n	8004dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	4a2a      	ldr	r2, [pc, #168]	; (8004e00 <USB_SetTurnaroundTime+0x130>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d906      	bls.n	8004d68 <USB_SetTurnaroundTime+0x98>
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	4a29      	ldr	r2, [pc, #164]	; (8004e04 <USB_SetTurnaroundTime+0x134>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d802      	bhi.n	8004d68 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004d62:	230a      	movs	r3, #10
 8004d64:	617b      	str	r3, [r7, #20]
 8004d66:	e02b      	b.n	8004dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4a26      	ldr	r2, [pc, #152]	; (8004e04 <USB_SetTurnaroundTime+0x134>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d906      	bls.n	8004d7e <USB_SetTurnaroundTime+0xae>
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	4a25      	ldr	r2, [pc, #148]	; (8004e08 <USB_SetTurnaroundTime+0x138>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d202      	bcs.n	8004d7e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004d78:	2309      	movs	r3, #9
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	e020      	b.n	8004dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	4a21      	ldr	r2, [pc, #132]	; (8004e08 <USB_SetTurnaroundTime+0x138>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d306      	bcc.n	8004d94 <USB_SetTurnaroundTime+0xc4>
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	4a20      	ldr	r2, [pc, #128]	; (8004e0c <USB_SetTurnaroundTime+0x13c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d802      	bhi.n	8004d94 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004d8e:	2308      	movs	r3, #8
 8004d90:	617b      	str	r3, [r7, #20]
 8004d92:	e015      	b.n	8004dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	4a1d      	ldr	r2, [pc, #116]	; (8004e0c <USB_SetTurnaroundTime+0x13c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d906      	bls.n	8004daa <USB_SetTurnaroundTime+0xda>
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4a1c      	ldr	r2, [pc, #112]	; (8004e10 <USB_SetTurnaroundTime+0x140>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d202      	bcs.n	8004daa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004da4:	2307      	movs	r3, #7
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	e00a      	b.n	8004dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004daa:	2306      	movs	r3, #6
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	e007      	b.n	8004dc0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004db0:	79fb      	ldrb	r3, [r7, #7]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d102      	bne.n	8004dbc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004db6:	2309      	movs	r3, #9
 8004db8:	617b      	str	r3, [r7, #20]
 8004dba:	e001      	b.n	8004dc0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004dbc:	2309      	movs	r3, #9
 8004dbe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	029b      	lsls	r3, r3, #10
 8004dd4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	00d8acbf 	.word	0x00d8acbf
 8004df0:	00e4e1c0 	.word	0x00e4e1c0
 8004df4:	00f42400 	.word	0x00f42400
 8004df8:	01067380 	.word	0x01067380
 8004dfc:	011a499f 	.word	0x011a499f
 8004e00:	01312cff 	.word	0x01312cff
 8004e04:	014ca43f 	.word	0x014ca43f
 8004e08:	016e3600 	.word	0x016e3600
 8004e0c:	01a6ab1f 	.word	0x01a6ab1f
 8004e10:	01e84800 	.word	0x01e84800

08004e14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f043 0201 	orr.w	r2, r3, #1
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f023 0201 	bic.w	r2, r3, #1
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	460b      	mov	r3, r1
 8004e62:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e74:	78fb      	ldrb	r3, [r7, #3]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d115      	bne.n	8004ea6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e86:	2001      	movs	r0, #1
 8004e88:	f7fc f84a 	bl	8000f20 <HAL_Delay>
      ms++;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f001 fa45 	bl	8006322 <USB_GetMode>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d01e      	beq.n	8004edc <USB_SetCurrentMode+0x84>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b31      	cmp	r3, #49	; 0x31
 8004ea2:	d9f0      	bls.n	8004e86 <USB_SetCurrentMode+0x2e>
 8004ea4:	e01a      	b.n	8004edc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ea6:	78fb      	ldrb	r3, [r7, #3]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d115      	bne.n	8004ed8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004eb8:	2001      	movs	r0, #1
 8004eba:	f7fc f831 	bl	8000f20 <HAL_Delay>
      ms++;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f001 fa2c 	bl	8006322 <USB_GetMode>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <USB_SetCurrentMode+0x84>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2b31      	cmp	r3, #49	; 0x31
 8004ed4:	d9f0      	bls.n	8004eb8 <USB_SetCurrentMode+0x60>
 8004ed6:	e001      	b.n	8004edc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e005      	b.n	8004ee8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2b32      	cmp	r3, #50	; 0x32
 8004ee0:	d101      	bne.n	8004ee6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e000      	b.n	8004ee8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b086      	sub	sp, #24
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004efe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f02:	2300      	movs	r3, #0
 8004f04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	e009      	b.n	8004f24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	3340      	adds	r3, #64	; 0x40
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	3301      	adds	r3, #1
 8004f22:	613b      	str	r3, [r7, #16]
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	2b0e      	cmp	r3, #14
 8004f28:	d9f2      	bls.n	8004f10 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d11c      	bne.n	8004f6a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f3e:	f043 0302 	orr.w	r3, r3, #2
 8004f42:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f54:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f60:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	639a      	str	r2, [r3, #56]	; 0x38
 8004f68:	e00b      	b.n	8004f82 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f88:	461a      	mov	r2, r3
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f94:	4619      	mov	r1, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	680b      	ldr	r3, [r1, #0]
 8004fa0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d10c      	bne.n	8004fc2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d104      	bne.n	8004fb8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004fae:	2100      	movs	r1, #0
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f965 	bl	8005280 <USB_SetDevSpeed>
 8004fb6:	e008      	b.n	8004fca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004fb8:	2101      	movs	r1, #1
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f960 	bl	8005280 <USB_SetDevSpeed>
 8004fc0:	e003      	b.n	8004fca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004fc2:	2103      	movs	r1, #3
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f95b 	bl	8005280 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004fca:	2110      	movs	r1, #16
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f8f3 	bl	80051b8 <USB_FlushTxFifo>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f91f 	bl	8005220 <USB_FlushRxFifo>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffe:	461a      	mov	r2, r3
 8005000:	2300      	movs	r3, #0
 8005002:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500a:	461a      	mov	r2, r3
 800500c:	2300      	movs	r3, #0
 800500e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005010:	2300      	movs	r3, #0
 8005012:	613b      	str	r3, [r7, #16]
 8005014:	e043      	b.n	800509e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800502c:	d118      	bne.n	8005060 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10a      	bne.n	800504a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005040:	461a      	mov	r2, r3
 8005042:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	e013      	b.n	8005072 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005056:	461a      	mov	r2, r3
 8005058:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	e008      	b.n	8005072 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506c:	461a      	mov	r2, r3
 800506e:	2300      	movs	r3, #0
 8005070:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507e:	461a      	mov	r2, r3
 8005080:	2300      	movs	r3, #0
 8005082:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005090:	461a      	mov	r2, r3
 8005092:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005096:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	3301      	adds	r3, #1
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d3b7      	bcc.n	8005016 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050a6:	2300      	movs	r3, #0
 80050a8:	613b      	str	r3, [r7, #16]
 80050aa:	e043      	b.n	8005134 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050c2:	d118      	bne.n	80050f6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10a      	bne.n	80050e0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d6:	461a      	mov	r2, r3
 80050d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	e013      	b.n	8005108 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ec:	461a      	mov	r2, r3
 80050ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	e008      	b.n	8005108 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005102:	461a      	mov	r2, r3
 8005104:	2300      	movs	r3, #0
 8005106:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005114:	461a      	mov	r2, r3
 8005116:	2300      	movs	r3, #0
 8005118:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005126:	461a      	mov	r2, r3
 8005128:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800512c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	3301      	adds	r3, #1
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	429a      	cmp	r2, r3
 800513a:	d3b7      	bcc.n	80050ac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800514a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800514e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800515c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	2b00      	cmp	r3, #0
 8005162:	d105      	bne.n	8005170 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	f043 0210 	orr.w	r2, r3, #16
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	699a      	ldr	r2, [r3, #24]
 8005174:	4b0f      	ldr	r3, [pc, #60]	; (80051b4 <USB_DevInit+0x2c4>)
 8005176:	4313      	orrs	r3, r2
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800517c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	f043 0208 	orr.w	r2, r3, #8
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800518e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005190:	2b01      	cmp	r3, #1
 8005192:	d107      	bne.n	80051a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800519c:	f043 0304 	orr.w	r3, r3, #4
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051b0:	b004      	add	sp, #16
 80051b2:	4770      	bx	lr
 80051b4:	803c3800 	.word	0x803c3800

080051b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3301      	adds	r3, #1
 80051ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4a13      	ldr	r2, [pc, #76]	; (800521c <USB_FlushTxFifo+0x64>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d901      	bls.n	80051d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e01b      	b.n	8005210 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	daf2      	bge.n	80051c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	019b      	lsls	r3, r3, #6
 80051e8:	f043 0220 	orr.w	r2, r3, #32
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	3301      	adds	r3, #1
 80051f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4a08      	ldr	r2, [pc, #32]	; (800521c <USB_FlushTxFifo+0x64>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d901      	bls.n	8005202 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e006      	b.n	8005210 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	f003 0320 	and.w	r3, r3, #32
 800520a:	2b20      	cmp	r3, #32
 800520c:	d0f0      	beq.n	80051f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	00030d40 	.word	0x00030d40

08005220 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	3301      	adds	r3, #1
 8005230:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4a11      	ldr	r2, [pc, #68]	; (800527c <USB_FlushRxFifo+0x5c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d901      	bls.n	800523e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e018      	b.n	8005270 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	2b00      	cmp	r3, #0
 8005244:	daf2      	bge.n	800522c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005246:	2300      	movs	r3, #0
 8005248:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2210      	movs	r2, #16
 800524e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	3301      	adds	r3, #1
 8005254:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4a08      	ldr	r2, [pc, #32]	; (800527c <USB_FlushRxFifo+0x5c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d901      	bls.n	8005262 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e006      	b.n	8005270 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f003 0310 	and.w	r3, r3, #16
 800526a:	2b10      	cmp	r3, #16
 800526c:	d0f0      	beq.n	8005250 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	00030d40 	.word	0x00030d40

08005280 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	460b      	mov	r3, r1
 800528a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	78fb      	ldrb	r3, [r7, #3]
 800529a:	68f9      	ldr	r1, [r7, #12]
 800529c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052a0:	4313      	orrs	r3, r2
 80052a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b087      	sub	sp, #28
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 0306 	and.w	r3, r3, #6
 80052ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d102      	bne.n	80052d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80052d2:	2300      	movs	r3, #0
 80052d4:	75fb      	strb	r3, [r7, #23]
 80052d6:	e00a      	b.n	80052ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d002      	beq.n	80052e4 <USB_GetDevSpeed+0x32>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b06      	cmp	r3, #6
 80052e2:	d102      	bne.n	80052ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80052e4:	2302      	movs	r3, #2
 80052e6:	75fb      	strb	r3, [r7, #23]
 80052e8:	e001      	b.n	80052ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80052ea:	230f      	movs	r3, #15
 80052ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80052ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	371c      	adds	r7, #28
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	785b      	ldrb	r3, [r3, #1]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d13a      	bne.n	800538e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531e:	69da      	ldr	r2, [r3, #28]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	f003 030f 	and.w	r3, r3, #15
 8005328:	2101      	movs	r1, #1
 800532a:	fa01 f303 	lsl.w	r3, r1, r3
 800532e:	b29b      	uxth	r3, r3
 8005330:	68f9      	ldr	r1, [r7, #12]
 8005332:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005336:	4313      	orrs	r3, r2
 8005338:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	4413      	add	r3, r2
 8005342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d155      	bne.n	80053fc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	791b      	ldrb	r3, [r3, #4]
 800536a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800536c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	059b      	lsls	r3, r3, #22
 8005372:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005374:	4313      	orrs	r3, r2
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	0151      	lsls	r1, r2, #5
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	440a      	add	r2, r1
 800537e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	e036      	b.n	80053fc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005394:	69da      	ldr	r2, [r3, #28]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	f003 030f 	and.w	r3, r3, #15
 800539e:	2101      	movs	r1, #1
 80053a0:	fa01 f303 	lsl.w	r3, r1, r3
 80053a4:	041b      	lsls	r3, r3, #16
 80053a6:	68f9      	ldr	r1, [r7, #12]
 80053a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053ac:	4313      	orrs	r3, r2
 80053ae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d11a      	bne.n	80053fc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	791b      	ldrb	r3, [r3, #4]
 80053e0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053e2:	430b      	orrs	r3, r1
 80053e4:	4313      	orrs	r3, r2
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	0151      	lsls	r1, r2, #5
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	440a      	add	r2, r1
 80053ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053fa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
	...

0800540c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	785b      	ldrb	r3, [r3, #1]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d161      	bne.n	80054ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800543a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800543e:	d11f      	bne.n	8005480 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	0151      	lsls	r1, r2, #5
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	440a      	add	r2, r1
 8005456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800545a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800545e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	0151      	lsls	r1, r2, #5
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	440a      	add	r2, r1
 8005476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800547a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800547e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005486:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	f003 030f 	and.w	r3, r3, #15
 8005490:	2101      	movs	r1, #1
 8005492:	fa01 f303 	lsl.w	r3, r1, r3
 8005496:	b29b      	uxth	r3, r3
 8005498:	43db      	mvns	r3, r3
 800549a:	68f9      	ldr	r1, [r7, #12]
 800549c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054a0:	4013      	ands	r3, r2
 80054a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054aa:	69da      	ldr	r2, [r3, #28]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	f003 030f 	and.w	r3, r3, #15
 80054b4:	2101      	movs	r1, #1
 80054b6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	43db      	mvns	r3, r3
 80054be:	68f9      	ldr	r1, [r7, #12]
 80054c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054c4:	4013      	ands	r3, r2
 80054c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	0159      	lsls	r1, r3, #5
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	440b      	add	r3, r1
 80054de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e2:	4619      	mov	r1, r3
 80054e4:	4b35      	ldr	r3, [pc, #212]	; (80055bc <USB_DeactivateEndpoint+0x1b0>)
 80054e6:	4013      	ands	r3, r2
 80054e8:	600b      	str	r3, [r1, #0]
 80054ea:	e060      	b.n	80055ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005502:	d11f      	bne.n	8005544 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	0151      	lsls	r1, r2, #5
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	440a      	add	r2, r1
 800551a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800551e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005522:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	0151      	lsls	r1, r2, #5
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	440a      	add	r2, r1
 800553a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800553e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005542:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	f003 030f 	and.w	r3, r3, #15
 8005554:	2101      	movs	r1, #1
 8005556:	fa01 f303 	lsl.w	r3, r1, r3
 800555a:	041b      	lsls	r3, r3, #16
 800555c:	43db      	mvns	r3, r3
 800555e:	68f9      	ldr	r1, [r7, #12]
 8005560:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005564:	4013      	ands	r3, r2
 8005566:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800556e:	69da      	ldr	r2, [r3, #28]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	f003 030f 	and.w	r3, r3, #15
 8005578:	2101      	movs	r1, #1
 800557a:	fa01 f303 	lsl.w	r3, r1, r3
 800557e:	041b      	lsls	r3, r3, #16
 8005580:	43db      	mvns	r3, r3
 8005582:	68f9      	ldr	r1, [r7, #12]
 8005584:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005588:	4013      	ands	r3, r2
 800558a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	0159      	lsls	r1, r3, #5
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	440b      	add	r3, r1
 80055a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a6:	4619      	mov	r1, r3
 80055a8:	4b05      	ldr	r3, [pc, #20]	; (80055c0 <USB_DeactivateEndpoint+0x1b4>)
 80055aa:	4013      	ands	r3, r2
 80055ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	ec337800 	.word	0xec337800
 80055c0:	eff37800 	.word	0xeff37800

080055c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b08a      	sub	sp, #40	; 0x28
 80055c8:	af02      	add	r7, sp, #8
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	4613      	mov	r3, r2
 80055d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	785b      	ldrb	r3, [r3, #1]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	f040 815c 	bne.w	800589e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d132      	bne.n	8005654 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	0151      	lsls	r1, r2, #5
 8005600:	69fa      	ldr	r2, [r7, #28]
 8005602:	440a      	add	r2, r1
 8005604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005608:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800560c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005610:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	0151      	lsls	r1, r2, #5
 8005624:	69fa      	ldr	r2, [r7, #28]
 8005626:	440a      	add	r2, r1
 8005628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800562c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005630:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	0151      	lsls	r1, r2, #5
 8005644:	69fa      	ldr	r2, [r7, #28]
 8005646:	440a      	add	r2, r1
 8005648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800564c:	0cdb      	lsrs	r3, r3, #19
 800564e:	04db      	lsls	r3, r3, #19
 8005650:	6113      	str	r3, [r2, #16]
 8005652:	e074      	b.n	800573e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	0151      	lsls	r1, r2, #5
 8005666:	69fa      	ldr	r2, [r7, #28]
 8005668:	440a      	add	r2, r1
 800566a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800566e:	0cdb      	lsrs	r3, r3, #19
 8005670:	04db      	lsls	r3, r3, #19
 8005672:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	0151      	lsls	r1, r2, #5
 8005686:	69fa      	ldr	r2, [r7, #28]
 8005688:	440a      	add	r2, r1
 800568a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800568e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005692:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005696:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	6999      	ldr	r1, [r3, #24]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	440b      	add	r3, r1
 80056b0:	1e59      	subs	r1, r3, #1
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80056ba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80056bc:	4b9d      	ldr	r3, [pc, #628]	; (8005934 <USB_EPStartXfer+0x370>)
 80056be:	400b      	ands	r3, r1
 80056c0:	69b9      	ldr	r1, [r7, #24]
 80056c2:	0148      	lsls	r0, r1, #5
 80056c4:	69f9      	ldr	r1, [r7, #28]
 80056c6:	4401      	add	r1, r0
 80056c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056cc:	4313      	orrs	r3, r2
 80056ce:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056dc:	691a      	ldr	r2, [r3, #16]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e6:	69b9      	ldr	r1, [r7, #24]
 80056e8:	0148      	lsls	r0, r1, #5
 80056ea:	69f9      	ldr	r1, [r7, #28]
 80056ec:	4401      	add	r1, r0
 80056ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056f2:	4313      	orrs	r3, r2
 80056f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	791b      	ldrb	r3, [r3, #4]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d11f      	bne.n	800573e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	4413      	add	r3, r2
 8005706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	0151      	lsls	r1, r2, #5
 8005710:	69fa      	ldr	r2, [r7, #28]
 8005712:	440a      	add	r2, r1
 8005714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005718:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800571c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	0151      	lsls	r1, r2, #5
 8005730:	69fa      	ldr	r2, [r7, #28]
 8005732:	440a      	add	r2, r1
 8005734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005738:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800573c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800573e:	79fb      	ldrb	r3, [r7, #7]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d14b      	bne.n	80057dc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d009      	beq.n	8005760 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005758:	461a      	mov	r2, r3
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	791b      	ldrb	r3, [r3, #4]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d128      	bne.n	80057ba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005774:	2b00      	cmp	r3, #0
 8005776:	d110      	bne.n	800579a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	0151      	lsls	r1, r2, #5
 800578a:	69fa      	ldr	r2, [r7, #28]
 800578c:	440a      	add	r2, r1
 800578e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005792:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	e00f      	b.n	80057ba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	0151      	lsls	r1, r2, #5
 80057ac:	69fa      	ldr	r2, [r7, #28]
 80057ae:	440a      	add	r2, r1
 80057b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	0151      	lsls	r1, r2, #5
 80057cc:	69fa      	ldr	r2, [r7, #28]
 80057ce:	440a      	add	r2, r1
 80057d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	e133      	b.n	8005a44 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	0151      	lsls	r1, r2, #5
 80057ee:	69fa      	ldr	r2, [r7, #28]
 80057f0:	440a      	add	r2, r1
 80057f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	791b      	ldrb	r3, [r3, #4]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d015      	beq.n	8005830 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 811b 	beq.w	8005a44 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	f003 030f 	and.w	r3, r3, #15
 800581e:	2101      	movs	r1, #1
 8005820:	fa01 f303 	lsl.w	r3, r1, r3
 8005824:	69f9      	ldr	r1, [r7, #28]
 8005826:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800582a:	4313      	orrs	r3, r2
 800582c:	634b      	str	r3, [r1, #52]	; 0x34
 800582e:	e109      	b.n	8005a44 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800583c:	2b00      	cmp	r3, #0
 800583e:	d110      	bne.n	8005862 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	0151      	lsls	r1, r2, #5
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	440a      	add	r2, r1
 8005856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800585e:	6013      	str	r3, [r2, #0]
 8005860:	e00f      	b.n	8005882 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	0151      	lsls	r1, r2, #5
 8005874:	69fa      	ldr	r2, [r7, #28]
 8005876:	440a      	add	r2, r1
 8005878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800587c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005880:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	6919      	ldr	r1, [r3, #16]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	781a      	ldrb	r2, [r3, #0]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	b298      	uxth	r0, r3
 8005890:	79fb      	ldrb	r3, [r7, #7]
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	4603      	mov	r3, r0
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 fade 	bl	8005e58 <USB_WritePacket>
 800589c:	e0d2      	b.n	8005a44 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	0151      	lsls	r1, r2, #5
 80058b0:	69fa      	ldr	r2, [r7, #28]
 80058b2:	440a      	add	r2, r1
 80058b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058b8:	0cdb      	lsrs	r3, r3, #19
 80058ba:	04db      	lsls	r3, r3, #19
 80058bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	0151      	lsls	r1, r2, #5
 80058d0:	69fa      	ldr	r2, [r7, #28]
 80058d2:	440a      	add	r2, r1
 80058d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d126      	bne.n	8005938 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f6:	691a      	ldr	r2, [r3, #16]
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005900:	69b9      	ldr	r1, [r7, #24]
 8005902:	0148      	lsls	r0, r1, #5
 8005904:	69f9      	ldr	r1, [r7, #28]
 8005906:	4401      	add	r1, r0
 8005908:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800590c:	4313      	orrs	r3, r2
 800590e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	0151      	lsls	r1, r2, #5
 8005922:	69fa      	ldr	r2, [r7, #28]
 8005924:	440a      	add	r2, r1
 8005926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800592a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800592e:	6113      	str	r3, [r2, #16]
 8005930:	e03a      	b.n	80059a8 <USB_EPStartXfer+0x3e4>
 8005932:	bf00      	nop
 8005934:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	699a      	ldr	r2, [r3, #24]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	4413      	add	r3, r2
 8005942:	1e5a      	subs	r2, r3, #1
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	fbb2 f3f3 	udiv	r3, r2, r3
 800594c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	8afa      	ldrh	r2, [r7, #22]
 8005954:	fb03 f202 	mul.w	r2, r3, r2
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	4413      	add	r3, r2
 8005964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005968:	691a      	ldr	r2, [r3, #16]
 800596a:	8afb      	ldrh	r3, [r7, #22]
 800596c:	04d9      	lsls	r1, r3, #19
 800596e:	4b38      	ldr	r3, [pc, #224]	; (8005a50 <USB_EPStartXfer+0x48c>)
 8005970:	400b      	ands	r3, r1
 8005972:	69b9      	ldr	r1, [r7, #24]
 8005974:	0148      	lsls	r0, r1, #5
 8005976:	69f9      	ldr	r1, [r7, #28]
 8005978:	4401      	add	r1, r0
 800597a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800597e:	4313      	orrs	r3, r2
 8005980:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	4413      	add	r3, r2
 800598a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598e:	691a      	ldr	r2, [r3, #16]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005998:	69b9      	ldr	r1, [r7, #24]
 800599a:	0148      	lsls	r0, r1, #5
 800599c:	69f9      	ldr	r1, [r7, #28]
 800599e:	4401      	add	r1, r0
 80059a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059a4:	4313      	orrs	r3, r2
 80059a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80059a8:	79fb      	ldrb	r3, [r7, #7]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d10d      	bne.n	80059ca <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d009      	beq.n	80059ca <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6919      	ldr	r1, [r3, #16]
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c6:	460a      	mov	r2, r1
 80059c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	791b      	ldrb	r3, [r3, #4]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d128      	bne.n	8005a24 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d110      	bne.n	8005a04 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	0151      	lsls	r1, r2, #5
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	440a      	add	r2, r1
 80059f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	e00f      	b.n	8005a24 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	0151      	lsls	r1, r2, #5
 8005a16:	69fa      	ldr	r2, [r7, #28]
 8005a18:	440a      	add	r2, r1
 8005a1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a22:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	0151      	lsls	r1, r2, #5
 8005a36:	69fa      	ldr	r2, [r7, #28]
 8005a38:	440a      	add	r2, r1
 8005a3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3720      	adds	r7, #32
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	1ff80000 	.word	0x1ff80000

08005a54 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	785b      	ldrb	r3, [r3, #1]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	f040 80ce 	bne.w	8005c12 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d132      	bne.n	8005ae4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	0151      	lsls	r1, r2, #5
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	440a      	add	r2, r1
 8005a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005aa0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	0151      	lsls	r1, r2, #5
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	440a      	add	r2, r1
 8005ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005abc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ac0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	0151      	lsls	r1, r2, #5
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	440a      	add	r2, r1
 8005ad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005adc:	0cdb      	lsrs	r3, r3, #19
 8005ade:	04db      	lsls	r3, r3, #19
 8005ae0:	6113      	str	r3, [r2, #16]
 8005ae2:	e04e      	b.n	8005b82 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	0151      	lsls	r1, r2, #5
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	440a      	add	r2, r1
 8005afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005afe:	0cdb      	lsrs	r3, r3, #19
 8005b00:	04db      	lsls	r3, r3, #19
 8005b02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	0151      	lsls	r1, r2, #5
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	440a      	add	r2, r1
 8005b1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b26:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	699a      	ldr	r2, [r3, #24]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d903      	bls.n	8005b3c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	0151      	lsls	r1, r2, #5
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	440a      	add	r2, r1
 8005b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b68:	691a      	ldr	r2, [r3, #16]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b72:	6939      	ldr	r1, [r7, #16]
 8005b74:	0148      	lsls	r0, r1, #5
 8005b76:	6979      	ldr	r1, [r7, #20]
 8005b78:	4401      	add	r1, r0
 8005b7a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b82:	79fb      	ldrb	r3, [r7, #7]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d11e      	bne.n	8005bc6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d009      	beq.n	8005ba4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	0151      	lsls	r1, r2, #5
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	440a      	add	r2, r1
 8005bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bc2:	6013      	str	r3, [r2, #0]
 8005bc4:	e097      	b.n	8005cf6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	0151      	lsls	r1, r2, #5
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	440a      	add	r2, r1
 8005bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005be4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 8083 	beq.w	8005cf6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	f003 030f 	and.w	r3, r3, #15
 8005c00:	2101      	movs	r1, #1
 8005c02:	fa01 f303 	lsl.w	r3, r1, r3
 8005c06:	6979      	ldr	r1, [r7, #20]
 8005c08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	634b      	str	r3, [r1, #52]	; 0x34
 8005c10:	e071      	b.n	8005cf6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	0151      	lsls	r1, r2, #5
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	440a      	add	r2, r1
 8005c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c2c:	0cdb      	lsrs	r3, r3, #19
 8005c2e:	04db      	lsls	r3, r3, #19
 8005c30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	0151      	lsls	r1, r2, #5
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	440a      	add	r2, r1
 8005c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c54:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	0151      	lsls	r1, r2, #5
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	440a      	add	r2, r1
 8005c84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9a:	691a      	ldr	r2, [r3, #16]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ca4:	6939      	ldr	r1, [r7, #16]
 8005ca6:	0148      	lsls	r0, r1, #5
 8005ca8:	6979      	ldr	r1, [r7, #20]
 8005caa:	4401      	add	r1, r0
 8005cac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005cb4:	79fb      	ldrb	r3, [r7, #7]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d10d      	bne.n	8005cd6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d009      	beq.n	8005cd6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	6919      	ldr	r1, [r3, #16]
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd2:	460a      	mov	r2, r1
 8005cd4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	0151      	lsls	r1, r2, #5
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	440a      	add	r2, r1
 8005cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cf4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	371c      	adds	r7, #28
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	785b      	ldrb	r3, [r3, #1]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d14a      	bne.n	8005db8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d3a:	f040 8086 	bne.w	8005e4a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	7812      	ldrb	r2, [r2, #0]
 8005d52:	0151      	lsls	r1, r2, #5
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	440a      	add	r2, r1
 8005d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d60:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	7812      	ldrb	r2, [r2, #0]
 8005d76:	0151      	lsls	r1, r2, #5
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	440a      	add	r2, r1
 8005d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d902      	bls.n	8005d9c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	75fb      	strb	r3, [r7, #23]
          break;
 8005d9a:	e056      	b.n	8005e4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005db0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005db4:	d0e7      	beq.n	8005d86 <USB_EPStopXfer+0x82>
 8005db6:	e048      	b.n	8005e4a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dd0:	d13b      	bne.n	8005e4a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	7812      	ldrb	r2, [r2, #0]
 8005de6:	0151      	lsls	r1, r2, #5
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	440a      	add	r2, r1
 8005dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005df0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005df4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	7812      	ldrb	r2, [r2, #0]
 8005e0a:	0151      	lsls	r1, r2, #5
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	440a      	add	r2, r1
 8005e10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e18:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d902      	bls.n	8005e30 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	75fb      	strb	r3, [r7, #23]
          break;
 8005e2e:	e00c      	b.n	8005e4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e48:	d0e7      	beq.n	8005e1a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	371c      	adds	r7, #28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b089      	sub	sp, #36	; 0x24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	4611      	mov	r1, r2
 8005e64:	461a      	mov	r2, r3
 8005e66:	460b      	mov	r3, r1
 8005e68:	71fb      	strb	r3, [r7, #7]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005e76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d123      	bne.n	8005ec6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e7e:	88bb      	ldrh	r3, [r7, #4]
 8005e80:	3303      	adds	r3, #3
 8005e82:	089b      	lsrs	r3, r3, #2
 8005e84:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e86:	2300      	movs	r3, #0
 8005e88:	61bb      	str	r3, [r7, #24]
 8005e8a:	e018      	b.n	8005ebe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e8c:	79fb      	ldrb	r3, [r7, #7]
 8005e8e:	031a      	lsls	r2, r3, #12
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e98:	461a      	mov	r2, r3
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	61bb      	str	r3, [r7, #24]
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d3e2      	bcc.n	8005e8c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3724      	adds	r7, #36	; 0x24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b08b      	sub	sp, #44	; 0x2c
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005eea:	88fb      	ldrh	r3, [r7, #6]
 8005eec:	089b      	lsrs	r3, r3, #2
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005ef2:	88fb      	ldrh	r3, [r7, #6]
 8005ef4:	f003 0303 	and.w	r3, r3, #3
 8005ef8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005efa:	2300      	movs	r3, #0
 8005efc:	623b      	str	r3, [r7, #32]
 8005efe:	e014      	b.n	8005f2a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	3301      	adds	r3, #1
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	3301      	adds	r3, #1
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	3301      	adds	r3, #1
 8005f22:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	3301      	adds	r3, #1
 8005f28:	623b      	str	r3, [r7, #32]
 8005f2a:	6a3a      	ldr	r2, [r7, #32]
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d3e6      	bcc.n	8005f00 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005f32:	8bfb      	ldrh	r3, [r7, #30]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01e      	beq.n	8005f76 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f42:	461a      	mov	r2, r3
 8005f44:	f107 0310 	add.w	r3, r7, #16
 8005f48:	6812      	ldr	r2, [r2, #0]
 8005f4a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	fa22 f303 	lsr.w	r3, r2, r3
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	701a      	strb	r2, [r3, #0]
      i++;
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	3301      	adds	r3, #1
 8005f62:	623b      	str	r3, [r7, #32]
      pDest++;
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	3301      	adds	r3, #1
 8005f68:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005f6a:	8bfb      	ldrh	r3, [r7, #30]
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f70:	8bfb      	ldrh	r3, [r7, #30]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1ea      	bne.n	8005f4c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	372c      	adds	r7, #44	; 0x2c
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	785b      	ldrb	r3, [r3, #1]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d12c      	bne.n	8005ffa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	db12      	blt.n	8005fd8 <USB_EPSetStall+0x54>
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00f      	beq.n	8005fd8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	0151      	lsls	r1, r2, #5
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	440a      	add	r2, r1
 8005fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fd6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	0151      	lsls	r1, r2, #5
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	440a      	add	r2, r1
 8005fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	e02b      	b.n	8006052 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	db12      	blt.n	8006032 <USB_EPSetStall+0xae>
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00f      	beq.n	8006032 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	0151      	lsls	r1, r2, #5
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	440a      	add	r2, r1
 8006028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800602c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006030:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	0151      	lsls	r1, r2, #5
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	440a      	add	r2, r1
 8006048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800604c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006050:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	785b      	ldrb	r3, [r3, #1]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d128      	bne.n	80060ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	0151      	lsls	r1, r2, #5
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	440a      	add	r2, r1
 8006092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006096:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800609a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	791b      	ldrb	r3, [r3, #4]
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d003      	beq.n	80060ac <USB_EPClearStall+0x4c>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	791b      	ldrb	r3, [r3, #4]
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d138      	bne.n	800611e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	0151      	lsls	r1, r2, #5
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	440a      	add	r2, r1
 80060c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	e027      	b.n	800611e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	0151      	lsls	r1, r2, #5
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	440a      	add	r2, r1
 80060e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	791b      	ldrb	r3, [r3, #4]
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d003      	beq.n	80060fe <USB_EPClearStall+0x9e>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	791b      	ldrb	r3, [r3, #4]
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d10f      	bne.n	800611e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	4413      	add	r3, r2
 8006106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	0151      	lsls	r1, r2, #5
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	440a      	add	r2, r1
 8006114:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800611c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	460b      	mov	r3, r1
 8006136:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800614a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800614e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	78fb      	ldrb	r3, [r7, #3]
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006160:	68f9      	ldr	r1, [r7, #12]
 8006162:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006166:	4313      	orrs	r3, r2
 8006168:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006192:	f023 0303 	bic.w	r3, r3, #3
 8006196:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061a6:	f023 0302 	bic.w	r3, r3, #2
 80061aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b085      	sub	sp, #20
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80061d4:	f023 0303 	bic.w	r3, r3, #3
 80061d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061e8:	f043 0302 	orr.w	r3, r3, #2
 80061ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4013      	ands	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006214:	68fb      	ldr	r3, [r7, #12]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006222:	b480      	push	{r7}
 8006224:	b085      	sub	sp, #20
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	4013      	ands	r3, r2
 8006244:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	0c1b      	lsrs	r3, r3, #16
}
 800624a:	4618      	mov	r0, r3
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006256:	b480      	push	{r7}
 8006258:	b085      	sub	sp, #20
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	4013      	ands	r3, r2
 8006278:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	b29b      	uxth	r3, r3
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800628a:	b480      	push	{r7}
 800628c:	b085      	sub	sp, #20
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	460b      	mov	r3, r1
 8006294:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800629a:	78fb      	ldrb	r3, [r7, #3]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	4013      	ands	r3, r2
 80062b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80062b8:	68bb      	ldr	r3, [r7, #8]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b087      	sub	sp, #28
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	460b      	mov	r3, r1
 80062d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80062ea:	78fb      	ldrb	r3, [r7, #3]
 80062ec:	f003 030f 	and.w	r3, r3, #15
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	fa22 f303 	lsr.w	r3, r2, r3
 80062f6:	01db      	lsls	r3, r3, #7
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006300:	78fb      	ldrb	r3, [r7, #3]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	4013      	ands	r3, r2
 8006312:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006314:	68bb      	ldr	r3, [r7, #8]
}
 8006316:	4618      	mov	r0, r3
 8006318:	371c      	adds	r7, #28
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	f003 0301 	and.w	r3, r3, #1
}
 8006332:	4618      	mov	r0, r3
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800633e:	b480      	push	{r7}
 8006340:	b085      	sub	sp, #20
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006358:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800635c:	f023 0307 	bic.w	r3, r3, #7
 8006360:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006374:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	460b      	mov	r3, r1
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	333c      	adds	r3, #60	; 0x3c
 800639a:	3304      	adds	r3, #4
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	4a26      	ldr	r2, [pc, #152]	; (800643c <USB_EP0_OutStart+0xb8>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d90a      	bls.n	80063be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063b8:	d101      	bne.n	80063be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	e037      	b.n	800642e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c4:	461a      	mov	r2, r3
 80063c6:	2300      	movs	r3, #0
 80063c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ec:	f043 0318 	orr.w	r3, r3, #24
 80063f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006400:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006404:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006406:	7afb      	ldrb	r3, [r7, #11]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d10f      	bne.n	800642c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006412:	461a      	mov	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006426:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800642a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	371c      	adds	r7, #28
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	4f54300a 	.word	0x4f54300a

08006440 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	3301      	adds	r3, #1
 8006450:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	4a13      	ldr	r2, [pc, #76]	; (80064a4 <USB_CoreReset+0x64>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d901      	bls.n	800645e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e01b      	b.n	8006496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	daf2      	bge.n	800644c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f043 0201 	orr.w	r2, r3, #1
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	3301      	adds	r3, #1
 800647a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	4a09      	ldr	r2, [pc, #36]	; (80064a4 <USB_CoreReset+0x64>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d901      	bls.n	8006488 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e006      	b.n	8006496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	2b01      	cmp	r3, #1
 8006492:	d0f0      	beq.n	8006476 <USB_CoreReset+0x36>

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	00030d40 	.word	0x00030d40

080064a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	460b      	mov	r3, r1
 80064b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80064b4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80064b8:	f002 fca2 	bl	8008e00 <USBD_static_malloc>
 80064bc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d109      	bne.n	80064d8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	32b0      	adds	r2, #176	; 0xb0
 80064ce:	2100      	movs	r1, #0
 80064d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80064d4:	2302      	movs	r3, #2
 80064d6:	e0d4      	b.n	8006682 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80064d8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80064dc:	2100      	movs	r1, #0
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f002 fcfc 	bl	8008edc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	32b0      	adds	r2, #176	; 0xb0
 80064ee:	68f9      	ldr	r1, [r7, #12]
 80064f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	32b0      	adds	r2, #176	; 0xb0
 80064fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	7c1b      	ldrb	r3, [r3, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d138      	bne.n	8006582 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006510:	4b5e      	ldr	r3, [pc, #376]	; (800668c <USBD_CDC_Init+0x1e4>)
 8006512:	7819      	ldrb	r1, [r3, #0]
 8006514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006518:	2202      	movs	r2, #2
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f002 fb4d 	bl	8008bba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006520:	4b5a      	ldr	r3, [pc, #360]	; (800668c <USBD_CDC_Init+0x1e4>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	f003 020f 	and.w	r2, r3, #15
 8006528:	6879      	ldr	r1, [r7, #4]
 800652a:	4613      	mov	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	440b      	add	r3, r1
 8006534:	3324      	adds	r3, #36	; 0x24
 8006536:	2201      	movs	r2, #1
 8006538:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800653a:	4b55      	ldr	r3, [pc, #340]	; (8006690 <USBD_CDC_Init+0x1e8>)
 800653c:	7819      	ldrb	r1, [r3, #0]
 800653e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006542:	2202      	movs	r2, #2
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f002 fb38 	bl	8008bba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800654a:	4b51      	ldr	r3, [pc, #324]	; (8006690 <USBD_CDC_Init+0x1e8>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	f003 020f 	and.w	r2, r3, #15
 8006552:	6879      	ldr	r1, [r7, #4]
 8006554:	4613      	mov	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	440b      	add	r3, r1
 800655e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006562:	2201      	movs	r2, #1
 8006564:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006566:	4b4b      	ldr	r3, [pc, #300]	; (8006694 <USBD_CDC_Init+0x1ec>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	f003 020f 	and.w	r2, r3, #15
 800656e:	6879      	ldr	r1, [r7, #4]
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	440b      	add	r3, r1
 800657a:	3326      	adds	r3, #38	; 0x26
 800657c:	2210      	movs	r2, #16
 800657e:	801a      	strh	r2, [r3, #0]
 8006580:	e035      	b.n	80065ee <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006582:	4b42      	ldr	r3, [pc, #264]	; (800668c <USBD_CDC_Init+0x1e4>)
 8006584:	7819      	ldrb	r1, [r3, #0]
 8006586:	2340      	movs	r3, #64	; 0x40
 8006588:	2202      	movs	r2, #2
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f002 fb15 	bl	8008bba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006590:	4b3e      	ldr	r3, [pc, #248]	; (800668c <USBD_CDC_Init+0x1e4>)
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	f003 020f 	and.w	r2, r3, #15
 8006598:	6879      	ldr	r1, [r7, #4]
 800659a:	4613      	mov	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	440b      	add	r3, r1
 80065a4:	3324      	adds	r3, #36	; 0x24
 80065a6:	2201      	movs	r2, #1
 80065a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80065aa:	4b39      	ldr	r3, [pc, #228]	; (8006690 <USBD_CDC_Init+0x1e8>)
 80065ac:	7819      	ldrb	r1, [r3, #0]
 80065ae:	2340      	movs	r3, #64	; 0x40
 80065b0:	2202      	movs	r2, #2
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f002 fb01 	bl	8008bba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80065b8:	4b35      	ldr	r3, [pc, #212]	; (8006690 <USBD_CDC_Init+0x1e8>)
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	f003 020f 	and.w	r2, r3, #15
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	4613      	mov	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4413      	add	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	440b      	add	r3, r1
 80065cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065d0:	2201      	movs	r2, #1
 80065d2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80065d4:	4b2f      	ldr	r3, [pc, #188]	; (8006694 <USBD_CDC_Init+0x1ec>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	f003 020f 	and.w	r2, r3, #15
 80065dc:	6879      	ldr	r1, [r7, #4]
 80065de:	4613      	mov	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	440b      	add	r3, r1
 80065e8:	3326      	adds	r3, #38	; 0x26
 80065ea:	2210      	movs	r2, #16
 80065ec:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065ee:	4b29      	ldr	r3, [pc, #164]	; (8006694 <USBD_CDC_Init+0x1ec>)
 80065f0:	7819      	ldrb	r1, [r3, #0]
 80065f2:	2308      	movs	r3, #8
 80065f4:	2203      	movs	r2, #3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f002 fadf 	bl	8008bba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80065fc:	4b25      	ldr	r3, [pc, #148]	; (8006694 <USBD_CDC_Init+0x1ec>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	f003 020f 	and.w	r2, r3, #15
 8006604:	6879      	ldr	r1, [r7, #4]
 8006606:	4613      	mov	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	440b      	add	r3, r1
 8006610:	3324      	adds	r3, #36	; 0x24
 8006612:	2201      	movs	r2, #1
 8006614:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	33b0      	adds	r3, #176	; 0xb0
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800664c:	2302      	movs	r3, #2
 800664e:	e018      	b.n	8006682 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	7c1b      	ldrb	r3, [r3, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10a      	bne.n	800666e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006658:	4b0d      	ldr	r3, [pc, #52]	; (8006690 <USBD_CDC_Init+0x1e8>)
 800665a:	7819      	ldrb	r1, [r3, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006662:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f002 fb96 	bl	8008d98 <USBD_LL_PrepareReceive>
 800666c:	e008      	b.n	8006680 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800666e:	4b08      	ldr	r3, [pc, #32]	; (8006690 <USBD_CDC_Init+0x1e8>)
 8006670:	7819      	ldrb	r1, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006678:	2340      	movs	r3, #64	; 0x40
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f002 fb8c 	bl	8008d98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	20000093 	.word	0x20000093
 8006690:	20000094 	.word	0x20000094
 8006694:	20000095 	.word	0x20000095

08006698 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80066a4:	4b3a      	ldr	r3, [pc, #232]	; (8006790 <USBD_CDC_DeInit+0xf8>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	4619      	mov	r1, r3
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f002 faab 	bl	8008c06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80066b0:	4b37      	ldr	r3, [pc, #220]	; (8006790 <USBD_CDC_DeInit+0xf8>)
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	f003 020f 	and.w	r2, r3, #15
 80066b8:	6879      	ldr	r1, [r7, #4]
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	440b      	add	r3, r1
 80066c4:	3324      	adds	r3, #36	; 0x24
 80066c6:	2200      	movs	r2, #0
 80066c8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80066ca:	4b32      	ldr	r3, [pc, #200]	; (8006794 <USBD_CDC_DeInit+0xfc>)
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	4619      	mov	r1, r3
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f002 fa98 	bl	8008c06 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80066d6:	4b2f      	ldr	r3, [pc, #188]	; (8006794 <USBD_CDC_DeInit+0xfc>)
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	f003 020f 	and.w	r2, r3, #15
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	4613      	mov	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4413      	add	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	440b      	add	r3, r1
 80066ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066ee:	2200      	movs	r2, #0
 80066f0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80066f2:	4b29      	ldr	r3, [pc, #164]	; (8006798 <USBD_CDC_DeInit+0x100>)
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	4619      	mov	r1, r3
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f002 fa84 	bl	8008c06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80066fe:	4b26      	ldr	r3, [pc, #152]	; (8006798 <USBD_CDC_DeInit+0x100>)
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	f003 020f 	and.w	r2, r3, #15
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	4613      	mov	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	440b      	add	r3, r1
 8006712:	3324      	adds	r3, #36	; 0x24
 8006714:	2200      	movs	r2, #0
 8006716:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006718:	4b1f      	ldr	r3, [pc, #124]	; (8006798 <USBD_CDC_DeInit+0x100>)
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	f003 020f 	and.w	r2, r3, #15
 8006720:	6879      	ldr	r1, [r7, #4]
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	440b      	add	r3, r1
 800672c:	3326      	adds	r3, #38	; 0x26
 800672e:	2200      	movs	r2, #0
 8006730:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	32b0      	adds	r2, #176	; 0xb0
 800673c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d01f      	beq.n	8006784 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	33b0      	adds	r3, #176	; 0xb0
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	32b0      	adds	r2, #176	; 0xb0
 8006762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006766:	4618      	mov	r0, r3
 8006768:	f002 fb58 	bl	8008e1c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	32b0      	adds	r2, #176	; 0xb0
 8006776:	2100      	movs	r1, #0
 8006778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20000093 	.word	0x20000093
 8006794:	20000094 	.word	0x20000094
 8006798:	20000095 	.word	0x20000095

0800679c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	32b0      	adds	r2, #176	; 0xb0
 80067b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80067ba:	2300      	movs	r3, #0
 80067bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e0bf      	b.n	800694c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d050      	beq.n	800687a <USBD_CDC_Setup+0xde>
 80067d8:	2b20      	cmp	r3, #32
 80067da:	f040 80af 	bne.w	800693c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	88db      	ldrh	r3, [r3, #6]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d03a      	beq.n	800685c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	b25b      	sxtb	r3, r3
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	da1b      	bge.n	8006828 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	33b0      	adds	r3, #176	; 0xb0
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006806:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	88d2      	ldrh	r2, [r2, #6]
 800680c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	88db      	ldrh	r3, [r3, #6]
 8006812:	2b07      	cmp	r3, #7
 8006814:	bf28      	it	cs
 8006816:	2307      	movcs	r3, #7
 8006818:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	89fa      	ldrh	r2, [r7, #14]
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 fd89 	bl	8008338 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006826:	e090      	b.n	800694a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	785a      	ldrb	r2, [r3, #1]
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	88db      	ldrh	r3, [r3, #6]
 8006836:	2b3f      	cmp	r3, #63	; 0x3f
 8006838:	d803      	bhi.n	8006842 <USBD_CDC_Setup+0xa6>
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	88db      	ldrh	r3, [r3, #6]
 800683e:	b2da      	uxtb	r2, r3
 8006840:	e000      	b.n	8006844 <USBD_CDC_Setup+0xa8>
 8006842:	2240      	movs	r2, #64	; 0x40
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800684a:	6939      	ldr	r1, [r7, #16]
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006852:	461a      	mov	r2, r3
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f001 fd9b 	bl	8008390 <USBD_CtlPrepareRx>
      break;
 800685a:	e076      	b.n	800694a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	33b0      	adds	r3, #176	; 0xb0
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	7850      	ldrb	r0, [r2, #1]
 8006872:	2200      	movs	r2, #0
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	4798      	blx	r3
      break;
 8006878:	e067      	b.n	800694a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	785b      	ldrb	r3, [r3, #1]
 800687e:	2b0b      	cmp	r3, #11
 8006880:	d851      	bhi.n	8006926 <USBD_CDC_Setup+0x18a>
 8006882:	a201      	add	r2, pc, #4	; (adr r2, 8006888 <USBD_CDC_Setup+0xec>)
 8006884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006888:	080068b9 	.word	0x080068b9
 800688c:	08006935 	.word	0x08006935
 8006890:	08006927 	.word	0x08006927
 8006894:	08006927 	.word	0x08006927
 8006898:	08006927 	.word	0x08006927
 800689c:	08006927 	.word	0x08006927
 80068a0:	08006927 	.word	0x08006927
 80068a4:	08006927 	.word	0x08006927
 80068a8:	08006927 	.word	0x08006927
 80068ac:	08006927 	.word	0x08006927
 80068b0:	080068e3 	.word	0x080068e3
 80068b4:	0800690d 	.word	0x0800690d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b03      	cmp	r3, #3
 80068c2:	d107      	bne.n	80068d4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80068c4:	f107 030a 	add.w	r3, r7, #10
 80068c8:	2202      	movs	r2, #2
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 fd33 	bl	8008338 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068d2:	e032      	b.n	800693a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f001 fcbd 	bl	8008256 <USBD_CtlError>
            ret = USBD_FAIL;
 80068dc:	2303      	movs	r3, #3
 80068de:	75fb      	strb	r3, [r7, #23]
          break;
 80068e0:	e02b      	b.n	800693a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	d107      	bne.n	80068fe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80068ee:	f107 030d 	add.w	r3, r7, #13
 80068f2:	2201      	movs	r2, #1
 80068f4:	4619      	mov	r1, r3
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f001 fd1e 	bl	8008338 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068fc:	e01d      	b.n	800693a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f001 fca8 	bl	8008256 <USBD_CtlError>
            ret = USBD_FAIL;
 8006906:	2303      	movs	r3, #3
 8006908:	75fb      	strb	r3, [r7, #23]
          break;
 800690a:	e016      	b.n	800693a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b03      	cmp	r3, #3
 8006916:	d00f      	beq.n	8006938 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006918:	6839      	ldr	r1, [r7, #0]
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f001 fc9b 	bl	8008256 <USBD_CtlError>
            ret = USBD_FAIL;
 8006920:	2303      	movs	r3, #3
 8006922:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006924:	e008      	b.n	8006938 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006926:	6839      	ldr	r1, [r7, #0]
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f001 fc94 	bl	8008256 <USBD_CtlError>
          ret = USBD_FAIL;
 800692e:	2303      	movs	r3, #3
 8006930:	75fb      	strb	r3, [r7, #23]
          break;
 8006932:	e002      	b.n	800693a <USBD_CDC_Setup+0x19e>
          break;
 8006934:	bf00      	nop
 8006936:	e008      	b.n	800694a <USBD_CDC_Setup+0x1ae>
          break;
 8006938:	bf00      	nop
      }
      break;
 800693a:	e006      	b.n	800694a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800693c:	6839      	ldr	r1, [r7, #0]
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f001 fc89 	bl	8008256 <USBD_CtlError>
      ret = USBD_FAIL;
 8006944:	2303      	movs	r3, #3
 8006946:	75fb      	strb	r3, [r7, #23]
      break;
 8006948:	bf00      	nop
  }

  return (uint8_t)ret;
 800694a:	7dfb      	ldrb	r3, [r7, #23]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3718      	adds	r7, #24
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	460b      	mov	r3, r1
 800695e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006966:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	32b0      	adds	r2, #176	; 0xb0
 8006972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800697a:	2303      	movs	r3, #3
 800697c:	e065      	b.n	8006a4a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	32b0      	adds	r2, #176	; 0xb0
 8006988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800698c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800698e:	78fb      	ldrb	r3, [r7, #3]
 8006990:	f003 020f 	and.w	r2, r3, #15
 8006994:	6879      	ldr	r1, [r7, #4]
 8006996:	4613      	mov	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	440b      	add	r3, r1
 80069a0:	3318      	adds	r3, #24
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d02f      	beq.n	8006a08 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80069a8:	78fb      	ldrb	r3, [r7, #3]
 80069aa:	f003 020f 	and.w	r2, r3, #15
 80069ae:	6879      	ldr	r1, [r7, #4]
 80069b0:	4613      	mov	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4413      	add	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	440b      	add	r3, r1
 80069ba:	3318      	adds	r3, #24
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	78fb      	ldrb	r3, [r7, #3]
 80069c0:	f003 010f 	and.w	r1, r3, #15
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	460b      	mov	r3, r1
 80069c8:	00db      	lsls	r3, r3, #3
 80069ca:	440b      	add	r3, r1
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4403      	add	r3, r0
 80069d0:	3348      	adds	r3, #72	; 0x48
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80069d8:	fb01 f303 	mul.w	r3, r1, r3
 80069dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d112      	bne.n	8006a08 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80069e2:	78fb      	ldrb	r3, [r7, #3]
 80069e4:	f003 020f 	and.w	r2, r3, #15
 80069e8:	6879      	ldr	r1, [r7, #4]
 80069ea:	4613      	mov	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	440b      	add	r3, r1
 80069f4:	3318      	adds	r3, #24
 80069f6:	2200      	movs	r2, #0
 80069f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80069fa:	78f9      	ldrb	r1, [r7, #3]
 80069fc:	2300      	movs	r3, #0
 80069fe:	2200      	movs	r2, #0
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f002 f9a8 	bl	8008d56 <USBD_LL_Transmit>
 8006a06:	e01f      	b.n	8006a48 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	33b0      	adds	r3, #176	; 0xb0
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d010      	beq.n	8006a48 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	33b0      	adds	r3, #176	; 0xb0
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006a44:	78fa      	ldrb	r2, [r7, #3]
 8006a46:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b084      	sub	sp, #16
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	32b0      	adds	r2, #176	; 0xb0
 8006a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a6c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	32b0      	adds	r2, #176	; 0xb0
 8006a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e01a      	b.n	8006aba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a84:	78fb      	ldrb	r3, [r7, #3]
 8006a86:	4619      	mov	r1, r3
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f002 f9a6 	bl	8008dda <USBD_LL_GetRxDataSize>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	33b0      	adds	r3, #176	; 0xb0
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b084      	sub	sp, #16
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	32b0      	adds	r2, #176	; 0xb0
 8006ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d101      	bne.n	8006ae4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e025      	b.n	8006b30 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	33b0      	adds	r3, #176	; 0xb0
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d01a      	beq.n	8006b2e <USBD_CDC_EP0_RxReady+0x6c>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006afe:	2bff      	cmp	r3, #255	; 0xff
 8006b00:	d015      	beq.n	8006b2e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	33b0      	adds	r3, #176	; 0xb0
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006b1a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006b22:	b292      	uxth	r2, r2
 8006b24:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	22ff      	movs	r2, #255	; 0xff
 8006b2a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b40:	2182      	movs	r1, #130	; 0x82
 8006b42:	4818      	ldr	r0, [pc, #96]	; (8006ba4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b44:	f000 fd4f 	bl	80075e6 <USBD_GetEpDesc>
 8006b48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b4a:	2101      	movs	r1, #1
 8006b4c:	4815      	ldr	r0, [pc, #84]	; (8006ba4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b4e:	f000 fd4a 	bl	80075e6 <USBD_GetEpDesc>
 8006b52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b54:	2181      	movs	r1, #129	; 0x81
 8006b56:	4813      	ldr	r0, [pc, #76]	; (8006ba4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b58:	f000 fd45 	bl	80075e6 <USBD_GetEpDesc>
 8006b5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	2210      	movs	r2, #16
 8006b68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d006      	beq.n	8006b7e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b78:	711a      	strb	r2, [r3, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d006      	beq.n	8006b92 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b8c:	711a      	strb	r2, [r3, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2243      	movs	r2, #67	; 0x43
 8006b96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b98:	4b02      	ldr	r3, [pc, #8]	; (8006ba4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3718      	adds	r7, #24
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	20000050 	.word	0x20000050

08006ba8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006bb0:	2182      	movs	r1, #130	; 0x82
 8006bb2:	4818      	ldr	r0, [pc, #96]	; (8006c14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006bb4:	f000 fd17 	bl	80075e6 <USBD_GetEpDesc>
 8006bb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006bba:	2101      	movs	r1, #1
 8006bbc:	4815      	ldr	r0, [pc, #84]	; (8006c14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006bbe:	f000 fd12 	bl	80075e6 <USBD_GetEpDesc>
 8006bc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006bc4:	2181      	movs	r1, #129	; 0x81
 8006bc6:	4813      	ldr	r0, [pc, #76]	; (8006c14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006bc8:	f000 fd0d 	bl	80075e6 <USBD_GetEpDesc>
 8006bcc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d002      	beq.n	8006bda <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	2210      	movs	r2, #16
 8006bd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d006      	beq.n	8006bee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	2200      	movs	r2, #0
 8006be4:	711a      	strb	r2, [r3, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f042 0202 	orr.w	r2, r2, #2
 8006bec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d006      	beq.n	8006c02 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	711a      	strb	r2, [r3, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f042 0202 	orr.w	r2, r2, #2
 8006c00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2243      	movs	r2, #67	; 0x43
 8006c06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c08:	4b02      	ldr	r3, [pc, #8]	; (8006c14 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3718      	adds	r7, #24
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	20000050 	.word	0x20000050

08006c18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c20:	2182      	movs	r1, #130	; 0x82
 8006c22:	4818      	ldr	r0, [pc, #96]	; (8006c84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c24:	f000 fcdf 	bl	80075e6 <USBD_GetEpDesc>
 8006c28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	4815      	ldr	r0, [pc, #84]	; (8006c84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c2e:	f000 fcda 	bl	80075e6 <USBD_GetEpDesc>
 8006c32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c34:	2181      	movs	r1, #129	; 0x81
 8006c36:	4813      	ldr	r0, [pc, #76]	; (8006c84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c38:	f000 fcd5 	bl	80075e6 <USBD_GetEpDesc>
 8006c3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d002      	beq.n	8006c4a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2210      	movs	r2, #16
 8006c48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d006      	beq.n	8006c5e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c58:	711a      	strb	r2, [r3, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d006      	beq.n	8006c72 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c6c:	711a      	strb	r2, [r3, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2243      	movs	r2, #67	; 0x43
 8006c76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c78:	4b02      	ldr	r3, [pc, #8]	; (8006c84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	20000050 	.word	0x20000050

08006c88 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	220a      	movs	r2, #10
 8006c94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006c96:	4b03      	ldr	r3, [pc, #12]	; (8006ca4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	2000000c 	.word	0x2000000c

08006ca8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e009      	b.n	8006cd0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	33b0      	adds	r3, #176	; 0xb0
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4413      	add	r3, r2
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	32b0      	adds	r2, #176	; 0xb0
 8006cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e008      	b.n	8006d14 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	371c      	adds	r7, #28
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	32b0      	adds	r2, #176	; 0xb0
 8006d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d38:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e004      	b.n	8006d4e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
	...

08006d5c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	32b0      	adds	r2, #176	; 0xb0
 8006d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d72:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006d74:	2301      	movs	r3, #1
 8006d76:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	32b0      	adds	r2, #176	; 0xb0
 8006d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e025      	b.n	8006dda <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d11f      	bne.n	8006dd8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006da0:	4b10      	ldr	r3, [pc, #64]	; (8006de4 <USBD_CDC_TransmitPacket+0x88>)
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	f003 020f 	and.w	r2, r3, #15
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	4613      	mov	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4403      	add	r3, r0
 8006dba:	3318      	adds	r3, #24
 8006dbc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006dbe:	4b09      	ldr	r3, [pc, #36]	; (8006de4 <USBD_CDC_TransmitPacket+0x88>)
 8006dc0:	7819      	ldrb	r1, [r3, #0]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f001 ffc1 	bl	8008d56 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	20000093 	.word	0x20000093

08006de8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	32b0      	adds	r2, #176	; 0xb0
 8006dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dfe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	32b0      	adds	r2, #176	; 0xb0
 8006e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e018      	b.n	8006e48 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	7c1b      	ldrb	r3, [r3, #16]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10a      	bne.n	8006e34 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e1e:	4b0c      	ldr	r3, [pc, #48]	; (8006e50 <USBD_CDC_ReceivePacket+0x68>)
 8006e20:	7819      	ldrb	r1, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f001 ffb3 	bl	8008d98 <USBD_LL_PrepareReceive>
 8006e32:	e008      	b.n	8006e46 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e34:	4b06      	ldr	r3, [pc, #24]	; (8006e50 <USBD_CDC_ReceivePacket+0x68>)
 8006e36:	7819      	ldrb	r1, [r3, #0]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e3e:	2340      	movs	r3, #64	; 0x40
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f001 ffa9 	bl	8008d98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	20000094 	.word	0x20000094

08006e54 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e01f      	b.n	8006eac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	79fa      	ldrb	r2, [r7, #7]
 8006e9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f001 fe23 	bl	8008aec <USBD_LL_Init>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3718      	adds	r7, #24
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e025      	b.n	8006f18 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	32ae      	adds	r2, #174	; 0xae
 8006ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00f      	beq.n	8006f08 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	32ae      	adds	r2, #174	; 0xae
 8006ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef8:	f107 020e 	add.w	r2, r7, #14
 8006efc:	4610      	mov	r0, r2
 8006efe:	4798      	blx	r3
 8006f00:	4602      	mov	r2, r0
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f001 fe2b 	bl	8008b84 <USBD_LL_Start>
 8006f2e:	4603      	mov	r3, r0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f40:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b084      	sub	sp, #16
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	460b      	mov	r3, r1
 8006f58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d009      	beq.n	8006f7c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	78fa      	ldrb	r2, [r7, #3]
 8006f72:	4611      	mov	r1, r2
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	4798      	blx	r3
 8006f78:	4603      	mov	r3, r0
 8006f7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b084      	sub	sp, #16
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	460b      	mov	r3, r1
 8006f90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	78fa      	ldrb	r2, [r7, #3]
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	4798      	blx	r3
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d001      	beq.n	8006fb0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006fac:	2303      	movs	r3, #3
 8006fae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b084      	sub	sp, #16
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f001 f908 	bl	80081e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006fee:	f003 031f 	and.w	r3, r3, #31
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d01a      	beq.n	800702c <USBD_LL_SetupStage+0x72>
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d822      	bhi.n	8007040 <USBD_LL_SetupStage+0x86>
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d002      	beq.n	8007004 <USBD_LL_SetupStage+0x4a>
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d00a      	beq.n	8007018 <USBD_LL_SetupStage+0x5e>
 8007002:	e01d      	b.n	8007040 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800700a:	4619      	mov	r1, r3
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fb5f 	bl	80076d0 <USBD_StdDevReq>
 8007012:	4603      	mov	r3, r0
 8007014:	73fb      	strb	r3, [r7, #15]
      break;
 8007016:	e020      	b.n	800705a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800701e:	4619      	mov	r1, r3
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fbc7 	bl	80077b4 <USBD_StdItfReq>
 8007026:	4603      	mov	r3, r0
 8007028:	73fb      	strb	r3, [r7, #15]
      break;
 800702a:	e016      	b.n	800705a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fc29 	bl	800788c <USBD_StdEPReq>
 800703a:	4603      	mov	r3, r0
 800703c:	73fb      	strb	r3, [r7, #15]
      break;
 800703e:	e00c      	b.n	800705a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007046:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800704a:	b2db      	uxtb	r3, r3
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f001 fdf8 	bl	8008c44 <USBD_LL_StallEP>
 8007054:	4603      	mov	r3, r0
 8007056:	73fb      	strb	r3, [r7, #15]
      break;
 8007058:	bf00      	nop
  }

  return ret;
 800705a:	7bfb      	ldrb	r3, [r7, #15]
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	460b      	mov	r3, r1
 800706e:	607a      	str	r2, [r7, #4]
 8007070:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007076:	7afb      	ldrb	r3, [r7, #11]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d16e      	bne.n	800715a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007082:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800708a:	2b03      	cmp	r3, #3
 800708c:	f040 8098 	bne.w	80071c0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	429a      	cmp	r2, r3
 800709a:	d913      	bls.n	80070c4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	689a      	ldr	r2, [r3, #8]
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	1ad2      	subs	r2, r2, r3
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	68da      	ldr	r2, [r3, #12]
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	4293      	cmp	r3, r2
 80070b4:	bf28      	it	cs
 80070b6:	4613      	movcs	r3, r2
 80070b8:	461a      	mov	r2, r3
 80070ba:	6879      	ldr	r1, [r7, #4]
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f001 f984 	bl	80083ca <USBD_CtlContinueRx>
 80070c2:	e07d      	b.n	80071c0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80070ca:	f003 031f 	and.w	r3, r3, #31
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d014      	beq.n	80070fc <USBD_LL_DataOutStage+0x98>
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d81d      	bhi.n	8007112 <USBD_LL_DataOutStage+0xae>
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d002      	beq.n	80070e0 <USBD_LL_DataOutStage+0x7c>
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d003      	beq.n	80070e6 <USBD_LL_DataOutStage+0x82>
 80070de:	e018      	b.n	8007112 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	75bb      	strb	r3, [r7, #22]
            break;
 80070e4:	e018      	b.n	8007118 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	4619      	mov	r1, r3
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 fa5e 	bl	80075b2 <USBD_CoreFindIF>
 80070f6:	4603      	mov	r3, r0
 80070f8:	75bb      	strb	r3, [r7, #22]
            break;
 80070fa:	e00d      	b.n	8007118 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007102:	b2db      	uxtb	r3, r3
 8007104:	4619      	mov	r1, r3
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f000 fa60 	bl	80075cc <USBD_CoreFindEP>
 800710c:	4603      	mov	r3, r0
 800710e:	75bb      	strb	r3, [r7, #22]
            break;
 8007110:	e002      	b.n	8007118 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007112:	2300      	movs	r3, #0
 8007114:	75bb      	strb	r3, [r7, #22]
            break;
 8007116:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007118:	7dbb      	ldrb	r3, [r7, #22]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d119      	bne.n	8007152 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b03      	cmp	r3, #3
 8007128:	d113      	bne.n	8007152 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800712a:	7dba      	ldrb	r2, [r7, #22]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	32ae      	adds	r2, #174	; 0xae
 8007130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00b      	beq.n	8007152 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800713a:	7dba      	ldrb	r2, [r7, #22]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007142:	7dba      	ldrb	r2, [r7, #22]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	32ae      	adds	r2, #174	; 0xae
 8007148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f001 f94a 	bl	80083ec <USBD_CtlSendStatus>
 8007158:	e032      	b.n	80071c0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800715a:	7afb      	ldrb	r3, [r7, #11]
 800715c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007160:	b2db      	uxtb	r3, r3
 8007162:	4619      	mov	r1, r3
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 fa31 	bl	80075cc <USBD_CoreFindEP>
 800716a:	4603      	mov	r3, r0
 800716c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800716e:	7dbb      	ldrb	r3, [r7, #22]
 8007170:	2bff      	cmp	r3, #255	; 0xff
 8007172:	d025      	beq.n	80071c0 <USBD_LL_DataOutStage+0x15c>
 8007174:	7dbb      	ldrb	r3, [r7, #22]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d122      	bne.n	80071c0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b03      	cmp	r3, #3
 8007184:	d117      	bne.n	80071b6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007186:	7dba      	ldrb	r2, [r7, #22]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	32ae      	adds	r2, #174	; 0xae
 800718c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00f      	beq.n	80071b6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007196:	7dba      	ldrb	r2, [r7, #22]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800719e:	7dba      	ldrb	r2, [r7, #22]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	32ae      	adds	r2, #174	; 0xae
 80071a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	7afa      	ldrb	r2, [r7, #11]
 80071ac:	4611      	mov	r1, r2
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	4798      	blx	r3
 80071b2:	4603      	mov	r3, r0
 80071b4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80071b6:	7dfb      	ldrb	r3, [r7, #23]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d001      	beq.n	80071c0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80071bc:	7dfb      	ldrb	r3, [r7, #23]
 80071be:	e000      	b.n	80071c2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3718      	adds	r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b086      	sub	sp, #24
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	60f8      	str	r0, [r7, #12]
 80071d2:	460b      	mov	r3, r1
 80071d4:	607a      	str	r2, [r7, #4]
 80071d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80071d8:	7afb      	ldrb	r3, [r7, #11]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d16f      	bne.n	80072be <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	3314      	adds	r3, #20
 80071e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d15a      	bne.n	80072a4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	689a      	ldr	r2, [r3, #8]
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d914      	bls.n	8007224 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	689a      	ldr	r2, [r3, #8]
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	1ad2      	subs	r2, r2, r3
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	461a      	mov	r2, r3
 800720e:	6879      	ldr	r1, [r7, #4]
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f001 f8ac 	bl	800836e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007216:	2300      	movs	r3, #0
 8007218:	2200      	movs	r2, #0
 800721a:	2100      	movs	r1, #0
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f001 fdbb 	bl	8008d98 <USBD_LL_PrepareReceive>
 8007222:	e03f      	b.n	80072a4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	68da      	ldr	r2, [r3, #12]
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	429a      	cmp	r2, r3
 800722e:	d11c      	bne.n	800726a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007238:	429a      	cmp	r2, r3
 800723a:	d316      	bcc.n	800726a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007246:	429a      	cmp	r2, r3
 8007248:	d20f      	bcs.n	800726a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800724a:	2200      	movs	r2, #0
 800724c:	2100      	movs	r1, #0
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f001 f88d 	bl	800836e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800725c:	2300      	movs	r3, #0
 800725e:	2200      	movs	r2, #0
 8007260:	2100      	movs	r1, #0
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f001 fd98 	bl	8008d98 <USBD_LL_PrepareReceive>
 8007268:	e01c      	b.n	80072a4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b03      	cmp	r3, #3
 8007274:	d10f      	bne.n	8007296 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d009      	beq.n	8007296 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007296:	2180      	movs	r1, #128	; 0x80
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f001 fcd3 	bl	8008c44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f001 f8b7 	bl	8008412 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d03a      	beq.n	8007324 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f7ff fe42 	bl	8006f38 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80072bc:	e032      	b.n	8007324 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80072be:	7afb      	ldrb	r3, [r7, #11]
 80072c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	4619      	mov	r1, r3
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 f97f 	bl	80075cc <USBD_CoreFindEP>
 80072ce:	4603      	mov	r3, r0
 80072d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072d2:	7dfb      	ldrb	r3, [r7, #23]
 80072d4:	2bff      	cmp	r3, #255	; 0xff
 80072d6:	d025      	beq.n	8007324 <USBD_LL_DataInStage+0x15a>
 80072d8:	7dfb      	ldrb	r3, [r7, #23]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d122      	bne.n	8007324 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d11c      	bne.n	8007324 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80072ea:	7dfa      	ldrb	r2, [r7, #23]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	32ae      	adds	r2, #174	; 0xae
 80072f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d014      	beq.n	8007324 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80072fa:	7dfa      	ldrb	r2, [r7, #23]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007302:	7dfa      	ldrb	r2, [r7, #23]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	32ae      	adds	r2, #174	; 0xae
 8007308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	7afa      	ldrb	r2, [r7, #11]
 8007310:	4611      	mov	r1, r2
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	4798      	blx	r3
 8007316:	4603      	mov	r3, r0
 8007318:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800731a:	7dbb      	ldrb	r3, [r7, #22]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007320:	7dbb      	ldrb	r3, [r7, #22]
 8007322:	e000      	b.n	8007326 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3718      	adds	r7, #24
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b084      	sub	sp, #16
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007336:	2300      	movs	r3, #0
 8007338:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007366:	2b00      	cmp	r3, #0
 8007368:	d014      	beq.n	8007394 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00e      	beq.n	8007394 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	6852      	ldr	r2, [r2, #4]
 8007382:	b2d2      	uxtb	r2, r2
 8007384:	4611      	mov	r1, r2
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	4798      	blx	r3
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d001      	beq.n	8007394 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007390:	2303      	movs	r3, #3
 8007392:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007394:	2340      	movs	r3, #64	; 0x40
 8007396:	2200      	movs	r2, #0
 8007398:	2100      	movs	r1, #0
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f001 fc0d 	bl	8008bba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2240      	movs	r2, #64	; 0x40
 80073ac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073b0:	2340      	movs	r3, #64	; 0x40
 80073b2:	2200      	movs	r2, #0
 80073b4:	2180      	movs	r1, #128	; 0x80
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f001 fbff 	bl	8008bba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2240      	movs	r2, #64	; 0x40
 80073c6:	621a      	str	r2, [r3, #32]

  return ret;
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b083      	sub	sp, #12
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	460b      	mov	r3, r1
 80073dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	78fa      	ldrb	r2, [r7, #3]
 80073e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b083      	sub	sp, #12
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007400:	b2da      	uxtb	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2204      	movs	r2, #4
 800740c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800741e:	b480      	push	{r7}
 8007420:	b083      	sub	sp, #12
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b04      	cmp	r3, #4
 8007430:	d106      	bne.n	8007440 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007438:	b2da      	uxtb	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	370c      	adds	r7, #12
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr

0800744e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b082      	sub	sp, #8
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b03      	cmp	r3, #3
 8007460:	d110      	bne.n	8007484 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00b      	beq.n	8007484 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d005      	beq.n	8007484 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800747e:	69db      	ldr	r3, [r3, #28]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b082      	sub	sp, #8
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
 8007496:	460b      	mov	r3, r1
 8007498:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	32ae      	adds	r2, #174	; 0xae
 80074a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d101      	bne.n	80074b0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e01c      	b.n	80074ea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b03      	cmp	r3, #3
 80074ba:	d115      	bne.n	80074e8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	32ae      	adds	r2, #174	; 0xae
 80074c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00b      	beq.n	80074e8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	32ae      	adds	r2, #174	; 0xae
 80074da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	78fa      	ldrb	r2, [r7, #3]
 80074e2:	4611      	mov	r1, r2
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b082      	sub	sp, #8
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	460b      	mov	r3, r1
 80074fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	32ae      	adds	r2, #174	; 0xae
 8007508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007510:	2303      	movs	r3, #3
 8007512:	e01c      	b.n	800754e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b03      	cmp	r3, #3
 800751e:	d115      	bne.n	800754c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	32ae      	adds	r2, #174	; 0xae
 800752a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00b      	beq.n	800754c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	32ae      	adds	r2, #174	; 0xae
 800753e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007544:	78fa      	ldrb	r2, [r7, #3]
 8007546:	4611      	mov	r1, r2
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007556:	b480      	push	{r7}
 8007558:	b083      	sub	sp, #12
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00e      	beq.n	80075a8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	6852      	ldr	r2, [r2, #4]
 8007596:	b2d2      	uxtb	r2, r2
 8007598:	4611      	mov	r1, r2
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	4798      	blx	r3
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80075a4:	2303      	movs	r3, #3
 80075a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	460b      	mov	r3, r1
 80075bc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80075be:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	460b      	mov	r3, r1
 80075d6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80075d8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80075da:	4618      	mov	r0, r3
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b086      	sub	sp, #24
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
 80075ee:	460b      	mov	r3, r1
 80075f0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80075fa:	2300      	movs	r3, #0
 80075fc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	885b      	ldrh	r3, [r3, #2]
 8007602:	b29a      	uxth	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	b29b      	uxth	r3, r3
 800760a:	429a      	cmp	r2, r3
 800760c:	d920      	bls.n	8007650 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	b29b      	uxth	r3, r3
 8007614:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007616:	e013      	b.n	8007640 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007618:	f107 030a 	add.w	r3, r7, #10
 800761c:	4619      	mov	r1, r3
 800761e:	6978      	ldr	r0, [r7, #20]
 8007620:	f000 f81b 	bl	800765a <USBD_GetNextDesc>
 8007624:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	785b      	ldrb	r3, [r3, #1]
 800762a:	2b05      	cmp	r3, #5
 800762c:	d108      	bne.n	8007640 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	789b      	ldrb	r3, [r3, #2]
 8007636:	78fa      	ldrb	r2, [r7, #3]
 8007638:	429a      	cmp	r2, r3
 800763a:	d008      	beq.n	800764e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800763c:	2300      	movs	r3, #0
 800763e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	885b      	ldrh	r3, [r3, #2]
 8007644:	b29a      	uxth	r2, r3
 8007646:	897b      	ldrh	r3, [r7, #10]
 8007648:	429a      	cmp	r2, r3
 800764a:	d8e5      	bhi.n	8007618 <USBD_GetEpDesc+0x32>
 800764c:	e000      	b.n	8007650 <USBD_GetEpDesc+0x6a>
          break;
 800764e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007650:	693b      	ldr	r3, [r7, #16]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800765a:	b480      	push	{r7}
 800765c:	b085      	sub	sp, #20
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	881a      	ldrh	r2, [r3, #0]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	b29b      	uxth	r3, r3
 8007672:	4413      	add	r3, r2
 8007674:	b29a      	uxth	r2, r3
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	461a      	mov	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4413      	add	r3, r2
 8007684:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007686:	68fb      	ldr	r3, [r7, #12]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007694:	b480      	push	{r7}
 8007696:	b087      	sub	sp, #28
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	3301      	adds	r3, #1
 80076aa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80076b2:	8a3b      	ldrh	r3, [r7, #16]
 80076b4:	021b      	lsls	r3, r3, #8
 80076b6:	b21a      	sxth	r2, r3
 80076b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076bc:	4313      	orrs	r3, r2
 80076be:	b21b      	sxth	r3, r3
 80076c0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80076c2:	89fb      	ldrh	r3, [r7, #14]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	371c      	adds	r7, #28
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076e6:	2b40      	cmp	r3, #64	; 0x40
 80076e8:	d005      	beq.n	80076f6 <USBD_StdDevReq+0x26>
 80076ea:	2b40      	cmp	r3, #64	; 0x40
 80076ec:	d857      	bhi.n	800779e <USBD_StdDevReq+0xce>
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00f      	beq.n	8007712 <USBD_StdDevReq+0x42>
 80076f2:	2b20      	cmp	r3, #32
 80076f4:	d153      	bne.n	800779e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	32ae      	adds	r2, #174	; 0xae
 8007700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	4798      	blx	r3
 800770c:	4603      	mov	r3, r0
 800770e:	73fb      	strb	r3, [r7, #15]
      break;
 8007710:	e04a      	b.n	80077a8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	785b      	ldrb	r3, [r3, #1]
 8007716:	2b09      	cmp	r3, #9
 8007718:	d83b      	bhi.n	8007792 <USBD_StdDevReq+0xc2>
 800771a:	a201      	add	r2, pc, #4	; (adr r2, 8007720 <USBD_StdDevReq+0x50>)
 800771c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007720:	08007775 	.word	0x08007775
 8007724:	08007789 	.word	0x08007789
 8007728:	08007793 	.word	0x08007793
 800772c:	0800777f 	.word	0x0800777f
 8007730:	08007793 	.word	0x08007793
 8007734:	08007753 	.word	0x08007753
 8007738:	08007749 	.word	0x08007749
 800773c:	08007793 	.word	0x08007793
 8007740:	0800776b 	.word	0x0800776b
 8007744:	0800775d 	.word	0x0800775d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fa3c 	bl	8007bc8 <USBD_GetDescriptor>
          break;
 8007750:	e024      	b.n	800779c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007752:	6839      	ldr	r1, [r7, #0]
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fba1 	bl	8007e9c <USBD_SetAddress>
          break;
 800775a:	e01f      	b.n	800779c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fbe0 	bl	8007f24 <USBD_SetConfig>
 8007764:	4603      	mov	r3, r0
 8007766:	73fb      	strb	r3, [r7, #15]
          break;
 8007768:	e018      	b.n	800779c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fc83 	bl	8008078 <USBD_GetConfig>
          break;
 8007772:	e013      	b.n	800779c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007774:	6839      	ldr	r1, [r7, #0]
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fcb4 	bl	80080e4 <USBD_GetStatus>
          break;
 800777c:	e00e      	b.n	800779c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fce3 	bl	800814c <USBD_SetFeature>
          break;
 8007786:	e009      	b.n	800779c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fd07 	bl	800819e <USBD_ClrFeature>
          break;
 8007790:	e004      	b.n	800779c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007792:	6839      	ldr	r1, [r7, #0]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fd5e 	bl	8008256 <USBD_CtlError>
          break;
 800779a:	bf00      	nop
      }
      break;
 800779c:	e004      	b.n	80077a8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800779e:	6839      	ldr	r1, [r7, #0]
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fd58 	bl	8008256 <USBD_CtlError>
      break;
 80077a6:	bf00      	nop
  }

  return ret;
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop

080077b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077ca:	2b40      	cmp	r3, #64	; 0x40
 80077cc:	d005      	beq.n	80077da <USBD_StdItfReq+0x26>
 80077ce:	2b40      	cmp	r3, #64	; 0x40
 80077d0:	d852      	bhi.n	8007878 <USBD_StdItfReq+0xc4>
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <USBD_StdItfReq+0x26>
 80077d6:	2b20      	cmp	r3, #32
 80077d8:	d14e      	bne.n	8007878 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	3b01      	subs	r3, #1
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d840      	bhi.n	800786a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	889b      	ldrh	r3, [r3, #4]
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d836      	bhi.n	8007860 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	889b      	ldrh	r3, [r3, #4]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	4619      	mov	r1, r3
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7ff fed9 	bl	80075b2 <USBD_CoreFindIF>
 8007800:	4603      	mov	r3, r0
 8007802:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007804:	7bbb      	ldrb	r3, [r7, #14]
 8007806:	2bff      	cmp	r3, #255	; 0xff
 8007808:	d01d      	beq.n	8007846 <USBD_StdItfReq+0x92>
 800780a:	7bbb      	ldrb	r3, [r7, #14]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d11a      	bne.n	8007846 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007810:	7bba      	ldrb	r2, [r7, #14]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	32ae      	adds	r2, #174	; 0xae
 8007816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00f      	beq.n	8007840 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007820:	7bba      	ldrb	r2, [r7, #14]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007828:	7bba      	ldrb	r2, [r7, #14]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	32ae      	adds	r2, #174	; 0xae
 800782e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	4798      	blx	r3
 800783a:	4603      	mov	r3, r0
 800783c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800783e:	e004      	b.n	800784a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007840:	2303      	movs	r3, #3
 8007842:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007844:	e001      	b.n	800784a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007846:	2303      	movs	r3, #3
 8007848:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	88db      	ldrh	r3, [r3, #6]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d110      	bne.n	8007874 <USBD_StdItfReq+0xc0>
 8007852:	7bfb      	ldrb	r3, [r7, #15]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d10d      	bne.n	8007874 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 fdc7 	bl	80083ec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800785e:	e009      	b.n	8007874 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fcf7 	bl	8008256 <USBD_CtlError>
          break;
 8007868:	e004      	b.n	8007874 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fcf2 	bl	8008256 <USBD_CtlError>
          break;
 8007872:	e000      	b.n	8007876 <USBD_StdItfReq+0xc2>
          break;
 8007874:	bf00      	nop
      }
      break;
 8007876:	e004      	b.n	8007882 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007878:	6839      	ldr	r1, [r7, #0]
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fceb 	bl	8008256 <USBD_CtlError>
      break;
 8007880:	bf00      	nop
  }

  return ret;
 8007882:	7bfb      	ldrb	r3, [r7, #15]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	889b      	ldrh	r3, [r3, #4]
 800789e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078a8:	2b40      	cmp	r3, #64	; 0x40
 80078aa:	d007      	beq.n	80078bc <USBD_StdEPReq+0x30>
 80078ac:	2b40      	cmp	r3, #64	; 0x40
 80078ae:	f200 817f 	bhi.w	8007bb0 <USBD_StdEPReq+0x324>
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d02a      	beq.n	800790c <USBD_StdEPReq+0x80>
 80078b6:	2b20      	cmp	r3, #32
 80078b8:	f040 817a 	bne.w	8007bb0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
 80078be:	4619      	mov	r1, r3
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7ff fe83 	bl	80075cc <USBD_CoreFindEP>
 80078c6:	4603      	mov	r3, r0
 80078c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078ca:	7b7b      	ldrb	r3, [r7, #13]
 80078cc:	2bff      	cmp	r3, #255	; 0xff
 80078ce:	f000 8174 	beq.w	8007bba <USBD_StdEPReq+0x32e>
 80078d2:	7b7b      	ldrb	r3, [r7, #13]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f040 8170 	bne.w	8007bba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80078da:	7b7a      	ldrb	r2, [r7, #13]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80078e2:	7b7a      	ldrb	r2, [r7, #13]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	32ae      	adds	r2, #174	; 0xae
 80078e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	f000 8163 	beq.w	8007bba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80078f4:	7b7a      	ldrb	r2, [r7, #13]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	32ae      	adds	r2, #174	; 0xae
 80078fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	4798      	blx	r3
 8007906:	4603      	mov	r3, r0
 8007908:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800790a:	e156      	b.n	8007bba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	785b      	ldrb	r3, [r3, #1]
 8007910:	2b03      	cmp	r3, #3
 8007912:	d008      	beq.n	8007926 <USBD_StdEPReq+0x9a>
 8007914:	2b03      	cmp	r3, #3
 8007916:	f300 8145 	bgt.w	8007ba4 <USBD_StdEPReq+0x318>
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 809b 	beq.w	8007a56 <USBD_StdEPReq+0x1ca>
 8007920:	2b01      	cmp	r3, #1
 8007922:	d03c      	beq.n	800799e <USBD_StdEPReq+0x112>
 8007924:	e13e      	b.n	8007ba4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b02      	cmp	r3, #2
 8007930:	d002      	beq.n	8007938 <USBD_StdEPReq+0xac>
 8007932:	2b03      	cmp	r3, #3
 8007934:	d016      	beq.n	8007964 <USBD_StdEPReq+0xd8>
 8007936:	e02c      	b.n	8007992 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00d      	beq.n	800795a <USBD_StdEPReq+0xce>
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	2b80      	cmp	r3, #128	; 0x80
 8007942:	d00a      	beq.n	800795a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007944:	7bbb      	ldrb	r3, [r7, #14]
 8007946:	4619      	mov	r1, r3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f001 f97b 	bl	8008c44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800794e:	2180      	movs	r1, #128	; 0x80
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f001 f977 	bl	8008c44 <USBD_LL_StallEP>
 8007956:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007958:	e020      	b.n	800799c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fc7a 	bl	8008256 <USBD_CtlError>
              break;
 8007962:	e01b      	b.n	800799c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	885b      	ldrh	r3, [r3, #2]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10e      	bne.n	800798a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800796c:	7bbb      	ldrb	r3, [r7, #14]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00b      	beq.n	800798a <USBD_StdEPReq+0xfe>
 8007972:	7bbb      	ldrb	r3, [r7, #14]
 8007974:	2b80      	cmp	r3, #128	; 0x80
 8007976:	d008      	beq.n	800798a <USBD_StdEPReq+0xfe>
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	88db      	ldrh	r3, [r3, #6]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d104      	bne.n	800798a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007980:	7bbb      	ldrb	r3, [r7, #14]
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f001 f95d 	bl	8008c44 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fd2e 	bl	80083ec <USBD_CtlSendStatus>

              break;
 8007990:	e004      	b.n	800799c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fc5e 	bl	8008256 <USBD_CtlError>
              break;
 800799a:	bf00      	nop
          }
          break;
 800799c:	e107      	b.n	8007bae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d002      	beq.n	80079b0 <USBD_StdEPReq+0x124>
 80079aa:	2b03      	cmp	r3, #3
 80079ac:	d016      	beq.n	80079dc <USBD_StdEPReq+0x150>
 80079ae:	e04b      	b.n	8007a48 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079b0:	7bbb      	ldrb	r3, [r7, #14]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00d      	beq.n	80079d2 <USBD_StdEPReq+0x146>
 80079b6:	7bbb      	ldrb	r3, [r7, #14]
 80079b8:	2b80      	cmp	r3, #128	; 0x80
 80079ba:	d00a      	beq.n	80079d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	4619      	mov	r1, r3
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 f93f 	bl	8008c44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079c6:	2180      	movs	r1, #128	; 0x80
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f001 f93b 	bl	8008c44 <USBD_LL_StallEP>
 80079ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079d0:	e040      	b.n	8007a54 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fc3e 	bl	8008256 <USBD_CtlError>
              break;
 80079da:	e03b      	b.n	8007a54 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	885b      	ldrh	r3, [r3, #2]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d136      	bne.n	8007a52 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d004      	beq.n	80079f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80079ee:	7bbb      	ldrb	r3, [r7, #14]
 80079f0:	4619      	mov	r1, r3
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f001 f945 	bl	8008c82 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fcf7 	bl	80083ec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
 8007a00:	4619      	mov	r1, r3
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7ff fde2 	bl	80075cc <USBD_CoreFindEP>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a0c:	7b7b      	ldrb	r3, [r7, #13]
 8007a0e:	2bff      	cmp	r3, #255	; 0xff
 8007a10:	d01f      	beq.n	8007a52 <USBD_StdEPReq+0x1c6>
 8007a12:	7b7b      	ldrb	r3, [r7, #13]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d11c      	bne.n	8007a52 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007a18:	7b7a      	ldrb	r2, [r7, #13]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007a20:	7b7a      	ldrb	r2, [r7, #13]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	32ae      	adds	r2, #174	; 0xae
 8007a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d010      	beq.n	8007a52 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007a30:	7b7a      	ldrb	r2, [r7, #13]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	32ae      	adds	r2, #174	; 0xae
 8007a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	4798      	blx	r3
 8007a42:	4603      	mov	r3, r0
 8007a44:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007a46:	e004      	b.n	8007a52 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fc03 	bl	8008256 <USBD_CtlError>
              break;
 8007a50:	e000      	b.n	8007a54 <USBD_StdEPReq+0x1c8>
              break;
 8007a52:	bf00      	nop
          }
          break;
 8007a54:	e0ab      	b.n	8007bae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d002      	beq.n	8007a68 <USBD_StdEPReq+0x1dc>
 8007a62:	2b03      	cmp	r3, #3
 8007a64:	d032      	beq.n	8007acc <USBD_StdEPReq+0x240>
 8007a66:	e097      	b.n	8007b98 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a68:	7bbb      	ldrb	r3, [r7, #14]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d007      	beq.n	8007a7e <USBD_StdEPReq+0x1f2>
 8007a6e:	7bbb      	ldrb	r3, [r7, #14]
 8007a70:	2b80      	cmp	r3, #128	; 0x80
 8007a72:	d004      	beq.n	8007a7e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007a74:	6839      	ldr	r1, [r7, #0]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fbed 	bl	8008256 <USBD_CtlError>
                break;
 8007a7c:	e091      	b.n	8007ba2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	da0b      	bge.n	8007a9e <USBD_StdEPReq+0x212>
 8007a86:	7bbb      	ldrb	r3, [r7, #14]
 8007a88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	3310      	adds	r3, #16
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	4413      	add	r3, r2
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	e00b      	b.n	8007ab6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a9e:	7bbb      	ldrb	r3, [r7, #14]
 8007aa0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	4413      	add	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	2200      	movs	r2, #0
 8007abc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2202      	movs	r2, #2
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fc37 	bl	8008338 <USBD_CtlSendData>
              break;
 8007aca:	e06a      	b.n	8007ba2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007acc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	da11      	bge.n	8007af8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ad4:	7bbb      	ldrb	r3, [r7, #14]
 8007ad6:	f003 020f 	and.w	r2, r3, #15
 8007ada:	6879      	ldr	r1, [r7, #4]
 8007adc:	4613      	mov	r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4413      	add	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	440b      	add	r3, r1
 8007ae6:	3324      	adds	r3, #36	; 0x24
 8007ae8:	881b      	ldrh	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d117      	bne.n	8007b1e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007aee:	6839      	ldr	r1, [r7, #0]
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fbb0 	bl	8008256 <USBD_CtlError>
                  break;
 8007af6:	e054      	b.n	8007ba2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007af8:	7bbb      	ldrb	r3, [r7, #14]
 8007afa:	f003 020f 	and.w	r2, r3, #15
 8007afe:	6879      	ldr	r1, [r7, #4]
 8007b00:	4613      	mov	r3, r2
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4413      	add	r3, r2
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	440b      	add	r3, r1
 8007b0a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b0e:	881b      	ldrh	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d104      	bne.n	8007b1e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fb9d 	bl	8008256 <USBD_CtlError>
                  break;
 8007b1c:	e041      	b.n	8007ba2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	da0b      	bge.n	8007b3e <USBD_StdEPReq+0x2b2>
 8007b26:	7bbb      	ldrb	r3, [r7, #14]
 8007b28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	3310      	adds	r3, #16
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	4413      	add	r3, r2
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	e00b      	b.n	8007b56 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b3e:	7bbb      	ldrb	r3, [r7, #14]
 8007b40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b44:	4613      	mov	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4413      	add	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	4413      	add	r3, r2
 8007b54:	3304      	adds	r3, #4
 8007b56:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d002      	beq.n	8007b64 <USBD_StdEPReq+0x2d8>
 8007b5e:	7bbb      	ldrb	r3, [r7, #14]
 8007b60:	2b80      	cmp	r3, #128	; 0x80
 8007b62:	d103      	bne.n	8007b6c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2200      	movs	r2, #0
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	e00e      	b.n	8007b8a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007b6c:	7bbb      	ldrb	r3, [r7, #14]
 8007b6e:	4619      	mov	r1, r3
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f001 f8a5 	bl	8008cc0 <USBD_LL_IsStallEP>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	601a      	str	r2, [r3, #0]
 8007b82:	e002      	b.n	8007b8a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2200      	movs	r2, #0
 8007b88:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	2202      	movs	r2, #2
 8007b8e:	4619      	mov	r1, r3
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fbd1 	bl	8008338 <USBD_CtlSendData>
              break;
 8007b96:	e004      	b.n	8007ba2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007b98:	6839      	ldr	r1, [r7, #0]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fb5b 	bl	8008256 <USBD_CtlError>
              break;
 8007ba0:	bf00      	nop
          }
          break;
 8007ba2:	e004      	b.n	8007bae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fb55 	bl	8008256 <USBD_CtlError>
          break;
 8007bac:	bf00      	nop
      }
      break;
 8007bae:	e005      	b.n	8007bbc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fb4f 	bl	8008256 <USBD_CtlError>
      break;
 8007bb8:	e000      	b.n	8007bbc <USBD_StdEPReq+0x330>
      break;
 8007bba:	bf00      	nop
  }

  return ret;
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
	...

08007bc8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	885b      	ldrh	r3, [r3, #2]
 8007be2:	0a1b      	lsrs	r3, r3, #8
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	3b01      	subs	r3, #1
 8007be8:	2b06      	cmp	r3, #6
 8007bea:	f200 8128 	bhi.w	8007e3e <USBD_GetDescriptor+0x276>
 8007bee:	a201      	add	r2, pc, #4	; (adr r2, 8007bf4 <USBD_GetDescriptor+0x2c>)
 8007bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf4:	08007c11 	.word	0x08007c11
 8007bf8:	08007c29 	.word	0x08007c29
 8007bfc:	08007c69 	.word	0x08007c69
 8007c00:	08007e3f 	.word	0x08007e3f
 8007c04:	08007e3f 	.word	0x08007e3f
 8007c08:	08007ddf 	.word	0x08007ddf
 8007c0c:	08007e0b 	.word	0x08007e0b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	7c12      	ldrb	r2, [r2, #16]
 8007c1c:	f107 0108 	add.w	r1, r7, #8
 8007c20:	4610      	mov	r0, r2
 8007c22:	4798      	blx	r3
 8007c24:	60f8      	str	r0, [r7, #12]
      break;
 8007c26:	e112      	b.n	8007e4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	7c1b      	ldrb	r3, [r3, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10d      	bne.n	8007c4c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c38:	f107 0208 	add.w	r2, r7, #8
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	4798      	blx	r3
 8007c40:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	3301      	adds	r3, #1
 8007c46:	2202      	movs	r2, #2
 8007c48:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c4a:	e100      	b.n	8007e4e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c54:	f107 0208 	add.w	r2, r7, #8
 8007c58:	4610      	mov	r0, r2
 8007c5a:	4798      	blx	r3
 8007c5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	3301      	adds	r3, #1
 8007c62:	2202      	movs	r2, #2
 8007c64:	701a      	strb	r2, [r3, #0]
      break;
 8007c66:	e0f2      	b.n	8007e4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	885b      	ldrh	r3, [r3, #2]
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b05      	cmp	r3, #5
 8007c70:	f200 80ac 	bhi.w	8007dcc <USBD_GetDescriptor+0x204>
 8007c74:	a201      	add	r2, pc, #4	; (adr r2, 8007c7c <USBD_GetDescriptor+0xb4>)
 8007c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7a:	bf00      	nop
 8007c7c:	08007c95 	.word	0x08007c95
 8007c80:	08007cc9 	.word	0x08007cc9
 8007c84:	08007cfd 	.word	0x08007cfd
 8007c88:	08007d31 	.word	0x08007d31
 8007c8c:	08007d65 	.word	0x08007d65
 8007c90:	08007d99 	.word	0x08007d99
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00b      	beq.n	8007cb8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	7c12      	ldrb	r2, [r2, #16]
 8007cac:	f107 0108 	add.w	r1, r7, #8
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	4798      	blx	r3
 8007cb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cb6:	e091      	b.n	8007ddc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 facb 	bl	8008256 <USBD_CtlError>
            err++;
 8007cc0:	7afb      	ldrb	r3, [r7, #11]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	72fb      	strb	r3, [r7, #11]
          break;
 8007cc6:	e089      	b.n	8007ddc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00b      	beq.n	8007cec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	7c12      	ldrb	r2, [r2, #16]
 8007ce0:	f107 0108 	add.w	r1, r7, #8
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	4798      	blx	r3
 8007ce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cea:	e077      	b.n	8007ddc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fab1 	bl	8008256 <USBD_CtlError>
            err++;
 8007cf4:	7afb      	ldrb	r3, [r7, #11]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	72fb      	strb	r3, [r7, #11]
          break;
 8007cfa:	e06f      	b.n	8007ddc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00b      	beq.n	8007d20 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	7c12      	ldrb	r2, [r2, #16]
 8007d14:	f107 0108 	add.w	r1, r7, #8
 8007d18:	4610      	mov	r0, r2
 8007d1a:	4798      	blx	r3
 8007d1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d1e:	e05d      	b.n	8007ddc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fa97 	bl	8008256 <USBD_CtlError>
            err++;
 8007d28:	7afb      	ldrb	r3, [r7, #11]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d2e:	e055      	b.n	8007ddc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00b      	beq.n	8007d54 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	7c12      	ldrb	r2, [r2, #16]
 8007d48:	f107 0108 	add.w	r1, r7, #8
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	4798      	blx	r3
 8007d50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d52:	e043      	b.n	8007ddc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fa7d 	bl	8008256 <USBD_CtlError>
            err++;
 8007d5c:	7afb      	ldrb	r3, [r7, #11]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	72fb      	strb	r3, [r7, #11]
          break;
 8007d62:	e03b      	b.n	8007ddc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d6a:	695b      	ldr	r3, [r3, #20]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00b      	beq.n	8007d88 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	7c12      	ldrb	r2, [r2, #16]
 8007d7c:	f107 0108 	add.w	r1, r7, #8
 8007d80:	4610      	mov	r0, r2
 8007d82:	4798      	blx	r3
 8007d84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d86:	e029      	b.n	8007ddc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fa63 	bl	8008256 <USBD_CtlError>
            err++;
 8007d90:	7afb      	ldrb	r3, [r7, #11]
 8007d92:	3301      	adds	r3, #1
 8007d94:	72fb      	strb	r3, [r7, #11]
          break;
 8007d96:	e021      	b.n	8007ddc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00b      	beq.n	8007dbc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	7c12      	ldrb	r2, [r2, #16]
 8007db0:	f107 0108 	add.w	r1, r7, #8
 8007db4:	4610      	mov	r0, r2
 8007db6:	4798      	blx	r3
 8007db8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dba:	e00f      	b.n	8007ddc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dbc:	6839      	ldr	r1, [r7, #0]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fa49 	bl	8008256 <USBD_CtlError>
            err++;
 8007dc4:	7afb      	ldrb	r3, [r7, #11]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dca:	e007      	b.n	8007ddc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fa41 	bl	8008256 <USBD_CtlError>
          err++;
 8007dd4:	7afb      	ldrb	r3, [r7, #11]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007dda:	bf00      	nop
      }
      break;
 8007ddc:	e037      	b.n	8007e4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	7c1b      	ldrb	r3, [r3, #16]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d109      	bne.n	8007dfa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dee:	f107 0208 	add.w	r2, r7, #8
 8007df2:	4610      	mov	r0, r2
 8007df4:	4798      	blx	r3
 8007df6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007df8:	e029      	b.n	8007e4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007dfa:	6839      	ldr	r1, [r7, #0]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fa2a 	bl	8008256 <USBD_CtlError>
        err++;
 8007e02:	7afb      	ldrb	r3, [r7, #11]
 8007e04:	3301      	adds	r3, #1
 8007e06:	72fb      	strb	r3, [r7, #11]
      break;
 8007e08:	e021      	b.n	8007e4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	7c1b      	ldrb	r3, [r3, #16]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10d      	bne.n	8007e2e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e1a:	f107 0208 	add.w	r2, r7, #8
 8007e1e:	4610      	mov	r0, r2
 8007e20:	4798      	blx	r3
 8007e22:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	3301      	adds	r3, #1
 8007e28:	2207      	movs	r2, #7
 8007e2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e2c:	e00f      	b.n	8007e4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fa10 	bl	8008256 <USBD_CtlError>
        err++;
 8007e36:	7afb      	ldrb	r3, [r7, #11]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	72fb      	strb	r3, [r7, #11]
      break;
 8007e3c:	e007      	b.n	8007e4e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fa08 	bl	8008256 <USBD_CtlError>
      err++;
 8007e46:	7afb      	ldrb	r3, [r7, #11]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	72fb      	strb	r3, [r7, #11]
      break;
 8007e4c:	bf00      	nop
  }

  if (err != 0U)
 8007e4e:	7afb      	ldrb	r3, [r7, #11]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d11e      	bne.n	8007e92 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	88db      	ldrh	r3, [r3, #6]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d016      	beq.n	8007e8a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007e5c:	893b      	ldrh	r3, [r7, #8]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00e      	beq.n	8007e80 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	88da      	ldrh	r2, [r3, #6]
 8007e66:	893b      	ldrh	r3, [r7, #8]
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	bf28      	it	cs
 8007e6c:	4613      	movcs	r3, r2
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e72:	893b      	ldrh	r3, [r7, #8]
 8007e74:	461a      	mov	r2, r3
 8007e76:	68f9      	ldr	r1, [r7, #12]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fa5d 	bl	8008338 <USBD_CtlSendData>
 8007e7e:	e009      	b.n	8007e94 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f9e7 	bl	8008256 <USBD_CtlError>
 8007e88:	e004      	b.n	8007e94 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 faae 	bl	80083ec <USBD_CtlSendStatus>
 8007e90:	e000      	b.n	8007e94 <USBD_GetDescriptor+0x2cc>
    return;
 8007e92:	bf00      	nop
  }
}
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop

08007e9c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	889b      	ldrh	r3, [r3, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d131      	bne.n	8007f12 <USBD_SetAddress+0x76>
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	88db      	ldrh	r3, [r3, #6]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d12d      	bne.n	8007f12 <USBD_SetAddress+0x76>
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	885b      	ldrh	r3, [r3, #2]
 8007eba:	2b7f      	cmp	r3, #127	; 0x7f
 8007ebc:	d829      	bhi.n	8007f12 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	885b      	ldrh	r3, [r3, #2]
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ec8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b03      	cmp	r3, #3
 8007ed4:	d104      	bne.n	8007ee0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007ed6:	6839      	ldr	r1, [r7, #0]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f9bc 	bl	8008256 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ede:	e01d      	b.n	8007f1c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	7bfa      	ldrb	r2, [r7, #15]
 8007ee4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ee8:	7bfb      	ldrb	r3, [r7, #15]
 8007eea:	4619      	mov	r1, r3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 ff13 	bl	8008d18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 fa7a 	bl	80083ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ef8:	7bfb      	ldrb	r3, [r7, #15]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d004      	beq.n	8007f08 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2202      	movs	r2, #2
 8007f02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f06:	e009      	b.n	8007f1c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f10:	e004      	b.n	8007f1c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f12:	6839      	ldr	r1, [r7, #0]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f99e 	bl	8008256 <USBD_CtlError>
  }
}
 8007f1a:	bf00      	nop
 8007f1c:	bf00      	nop
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	885b      	ldrh	r3, [r3, #2]
 8007f36:	b2da      	uxtb	r2, r3
 8007f38:	4b4e      	ldr	r3, [pc, #312]	; (8008074 <USBD_SetConfig+0x150>)
 8007f3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f3c:	4b4d      	ldr	r3, [pc, #308]	; (8008074 <USBD_SetConfig+0x150>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d905      	bls.n	8007f50 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f985 	bl	8008256 <USBD_CtlError>
    return USBD_FAIL;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e08c      	b.n	800806a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d002      	beq.n	8007f62 <USBD_SetConfig+0x3e>
 8007f5c:	2b03      	cmp	r3, #3
 8007f5e:	d029      	beq.n	8007fb4 <USBD_SetConfig+0x90>
 8007f60:	e075      	b.n	800804e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007f62:	4b44      	ldr	r3, [pc, #272]	; (8008074 <USBD_SetConfig+0x150>)
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d020      	beq.n	8007fac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007f6a:	4b42      	ldr	r3, [pc, #264]	; (8008074 <USBD_SetConfig+0x150>)
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f74:	4b3f      	ldr	r3, [pc, #252]	; (8008074 <USBD_SetConfig+0x150>)
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7fe ffe7 	bl	8006f4e <USBD_SetClassConfig>
 8007f80:	4603      	mov	r3, r0
 8007f82:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d008      	beq.n	8007f9c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007f8a:	6839      	ldr	r1, [r7, #0]
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f962 	bl	8008256 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2202      	movs	r2, #2
 8007f96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f9a:	e065      	b.n	8008068 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 fa25 	bl	80083ec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2203      	movs	r2, #3
 8007fa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007faa:	e05d      	b.n	8008068 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fa1d 	bl	80083ec <USBD_CtlSendStatus>
      break;
 8007fb2:	e059      	b.n	8008068 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007fb4:	4b2f      	ldr	r3, [pc, #188]	; (8008074 <USBD_SetConfig+0x150>)
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d112      	bne.n	8007fe2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007fc4:	4b2b      	ldr	r3, [pc, #172]	; (8008074 <USBD_SetConfig+0x150>)
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	461a      	mov	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fce:	4b29      	ldr	r3, [pc, #164]	; (8008074 <USBD_SetConfig+0x150>)
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f7fe ffd6 	bl	8006f86 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 fa06 	bl	80083ec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007fe0:	e042      	b.n	8008068 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007fe2:	4b24      	ldr	r3, [pc, #144]	; (8008074 <USBD_SetConfig+0x150>)
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d02a      	beq.n	8008046 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f7fe ffc4 	bl	8006f86 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007ffe:	4b1d      	ldr	r3, [pc, #116]	; (8008074 <USBD_SetConfig+0x150>)
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	461a      	mov	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008008:	4b1a      	ldr	r3, [pc, #104]	; (8008074 <USBD_SetConfig+0x150>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7fe ff9d 	bl	8006f4e <USBD_SetClassConfig>
 8008014:	4603      	mov	r3, r0
 8008016:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008018:	7bfb      	ldrb	r3, [r7, #15]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00f      	beq.n	800803e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800801e:	6839      	ldr	r1, [r7, #0]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f918 	bl	8008256 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	b2db      	uxtb	r3, r3
 800802c:	4619      	mov	r1, r3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7fe ffa9 	bl	8006f86 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2202      	movs	r2, #2
 8008038:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800803c:	e014      	b.n	8008068 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f9d4 	bl	80083ec <USBD_CtlSendStatus>
      break;
 8008044:	e010      	b.n	8008068 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f9d0 	bl	80083ec <USBD_CtlSendStatus>
      break;
 800804c:	e00c      	b.n	8008068 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f900 	bl	8008256 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008056:	4b07      	ldr	r3, [pc, #28]	; (8008074 <USBD_SetConfig+0x150>)
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	4619      	mov	r1, r3
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7fe ff92 	bl	8006f86 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008062:	2303      	movs	r3, #3
 8008064:	73fb      	strb	r3, [r7, #15]
      break;
 8008066:	bf00      	nop
  }

  return ret;
 8008068:	7bfb      	ldrb	r3, [r7, #15]
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	20000384 	.word	0x20000384

08008078 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	88db      	ldrh	r3, [r3, #6]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d004      	beq.n	8008094 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f8e2 	bl	8008256 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008092:	e023      	b.n	80080dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800809a:	b2db      	uxtb	r3, r3
 800809c:	2b02      	cmp	r3, #2
 800809e:	dc02      	bgt.n	80080a6 <USBD_GetConfig+0x2e>
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	dc03      	bgt.n	80080ac <USBD_GetConfig+0x34>
 80080a4:	e015      	b.n	80080d2 <USBD_GetConfig+0x5a>
 80080a6:	2b03      	cmp	r3, #3
 80080a8:	d00b      	beq.n	80080c2 <USBD_GetConfig+0x4a>
 80080aa:	e012      	b.n	80080d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	3308      	adds	r3, #8
 80080b6:	2201      	movs	r2, #1
 80080b8:	4619      	mov	r1, r3
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f93c 	bl	8008338 <USBD_CtlSendData>
        break;
 80080c0:	e00c      	b.n	80080dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	3304      	adds	r3, #4
 80080c6:	2201      	movs	r2, #1
 80080c8:	4619      	mov	r1, r3
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f934 	bl	8008338 <USBD_CtlSendData>
        break;
 80080d0:	e004      	b.n	80080dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f8be 	bl	8008256 <USBD_CtlError>
        break;
 80080da:	bf00      	nop
}
 80080dc:	bf00      	nop
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	3b01      	subs	r3, #1
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d81e      	bhi.n	800813a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	88db      	ldrh	r3, [r3, #6]
 8008100:	2b02      	cmp	r3, #2
 8008102:	d004      	beq.n	800810e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f8a5 	bl	8008256 <USBD_CtlError>
        break;
 800810c:	e01a      	b.n	8008144 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800811a:	2b00      	cmp	r3, #0
 800811c:	d005      	beq.n	800812a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	f043 0202 	orr.w	r2, r3, #2
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	330c      	adds	r3, #12
 800812e:	2202      	movs	r2, #2
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f900 	bl	8008338 <USBD_CtlSendData>
      break;
 8008138:	e004      	b.n	8008144 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f88a 	bl	8008256 <USBD_CtlError>
      break;
 8008142:	bf00      	nop
  }
}
 8008144:	bf00      	nop
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	885b      	ldrh	r3, [r3, #2]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d107      	bne.n	800816e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2201      	movs	r2, #1
 8008162:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f940 	bl	80083ec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800816c:	e013      	b.n	8008196 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	885b      	ldrh	r3, [r3, #2]
 8008172:	2b02      	cmp	r3, #2
 8008174:	d10b      	bne.n	800818e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	889b      	ldrh	r3, [r3, #4]
 800817a:	0a1b      	lsrs	r3, r3, #8
 800817c:	b29b      	uxth	r3, r3
 800817e:	b2da      	uxtb	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f930 	bl	80083ec <USBD_CtlSendStatus>
}
 800818c:	e003      	b.n	8008196 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f860 	bl	8008256 <USBD_CtlError>
}
 8008196:	bf00      	nop
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b082      	sub	sp, #8
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	3b01      	subs	r3, #1
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d80b      	bhi.n	80081ce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	885b      	ldrh	r3, [r3, #2]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d10c      	bne.n	80081d8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f910 	bl	80083ec <USBD_CtlSendStatus>
      }
      break;
 80081cc:	e004      	b.n	80081d8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80081ce:	6839      	ldr	r1, [r7, #0]
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f840 	bl	8008256 <USBD_CtlError>
      break;
 80081d6:	e000      	b.n	80081da <USBD_ClrFeature+0x3c>
      break;
 80081d8:	bf00      	nop
  }
}
 80081da:	bf00      	nop
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b084      	sub	sp, #16
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	781a      	ldrb	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	3301      	adds	r3, #1
 80081fc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	781a      	ldrb	r2, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	3301      	adds	r3, #1
 800820a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f7ff fa41 	bl	8007694 <SWAPBYTE>
 8008212:	4603      	mov	r3, r0
 8008214:	461a      	mov	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3301      	adds	r3, #1
 800821e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	3301      	adds	r3, #1
 8008224:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f7ff fa34 	bl	8007694 <SWAPBYTE>
 800822c:	4603      	mov	r3, r0
 800822e:	461a      	mov	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	3301      	adds	r3, #1
 8008238:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	3301      	adds	r3, #1
 800823e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f7ff fa27 	bl	8007694 <SWAPBYTE>
 8008246:	4603      	mov	r3, r0
 8008248:	461a      	mov	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	80da      	strh	r2, [r3, #6]
}
 800824e:	bf00      	nop
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b082      	sub	sp, #8
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008260:	2180      	movs	r1, #128	; 0x80
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fcee 	bl	8008c44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008268:	2100      	movs	r1, #0
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fcea 	bl	8008c44 <USBD_LL_StallEP>
}
 8008270:	bf00      	nop
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b086      	sub	sp, #24
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008284:	2300      	movs	r3, #0
 8008286:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d036      	beq.n	80082fc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008292:	6938      	ldr	r0, [r7, #16]
 8008294:	f000 f836 	bl	8008304 <USBD_GetLen>
 8008298:	4603      	mov	r3, r0
 800829a:	3301      	adds	r3, #1
 800829c:	b29b      	uxth	r3, r3
 800829e:	005b      	lsls	r3, r3, #1
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80082a6:	7dfb      	ldrb	r3, [r7, #23]
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	4413      	add	r3, r2
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	7812      	ldrb	r2, [r2, #0]
 80082b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80082b2:	7dfb      	ldrb	r3, [r7, #23]
 80082b4:	3301      	adds	r3, #1
 80082b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80082b8:	7dfb      	ldrb	r3, [r7, #23]
 80082ba:	68ba      	ldr	r2, [r7, #8]
 80082bc:	4413      	add	r3, r2
 80082be:	2203      	movs	r2, #3
 80082c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80082c2:	7dfb      	ldrb	r3, [r7, #23]
 80082c4:	3301      	adds	r3, #1
 80082c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80082c8:	e013      	b.n	80082f2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80082ca:	7dfb      	ldrb	r3, [r7, #23]
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	4413      	add	r3, r2
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	7812      	ldrb	r2, [r2, #0]
 80082d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	3301      	adds	r3, #1
 80082da:	613b      	str	r3, [r7, #16]
    idx++;
 80082dc:	7dfb      	ldrb	r3, [r7, #23]
 80082de:	3301      	adds	r3, #1
 80082e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80082e2:	7dfb      	ldrb	r3, [r7, #23]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	4413      	add	r3, r2
 80082e8:	2200      	movs	r2, #0
 80082ea:	701a      	strb	r2, [r3, #0]
    idx++;
 80082ec:	7dfb      	ldrb	r3, [r7, #23]
 80082ee:	3301      	adds	r3, #1
 80082f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1e7      	bne.n	80082ca <USBD_GetString+0x52>
 80082fa:	e000      	b.n	80082fe <USBD_GetString+0x86>
    return;
 80082fc:	bf00      	nop
  }
}
 80082fe:	3718      	adds	r7, #24
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800830c:	2300      	movs	r3, #0
 800830e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008314:	e005      	b.n	8008322 <USBD_GetLen+0x1e>
  {
    len++;
 8008316:	7bfb      	ldrb	r3, [r7, #15]
 8008318:	3301      	adds	r3, #1
 800831a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	3301      	adds	r3, #1
 8008320:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1f5      	bne.n	8008316 <USBD_GetLen+0x12>
  }

  return len;
 800832a:	7bfb      	ldrb	r3, [r7, #15]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2202      	movs	r2, #2
 8008348:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	2100      	movs	r1, #0
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f000 fcf9 	bl	8008d56 <USBD_LL_Transmit>

  return USBD_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b084      	sub	sp, #16
 8008372:	af00      	add	r7, sp, #0
 8008374:	60f8      	str	r0, [r7, #12]
 8008376:	60b9      	str	r1, [r7, #8]
 8008378:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	2100      	movs	r1, #0
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	f000 fce8 	bl	8008d56 <USBD_LL_Transmit>

  return USBD_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2203      	movs	r2, #3
 80083a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68ba      	ldr	r2, [r7, #8]
 80083b8:	2100      	movs	r1, #0
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f000 fcec 	bl	8008d98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b084      	sub	sp, #16
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	60f8      	str	r0, [r7, #12]
 80083d2:	60b9      	str	r1, [r7, #8]
 80083d4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68ba      	ldr	r2, [r7, #8]
 80083da:	2100      	movs	r1, #0
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f000 fcdb 	bl	8008d98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2204      	movs	r2, #4
 80083f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083fc:	2300      	movs	r3, #0
 80083fe:	2200      	movs	r2, #0
 8008400:	2100      	movs	r1, #0
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fca7 	bl	8008d56 <USBD_LL_Transmit>

  return USBD_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b082      	sub	sp, #8
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2205      	movs	r2, #5
 800841e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008422:	2300      	movs	r3, #0
 8008424:	2200      	movs	r2, #0
 8008426:	2100      	movs	r1, #0
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fcb5 	bl	8008d98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800843c:	2200      	movs	r2, #0
 800843e:	4912      	ldr	r1, [pc, #72]	; (8008488 <MX_USB_DEVICE_Init+0x50>)
 8008440:	4812      	ldr	r0, [pc, #72]	; (800848c <MX_USB_DEVICE_Init+0x54>)
 8008442:	f7fe fd07 	bl	8006e54 <USBD_Init>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d001      	beq.n	8008450 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800844c:	f7f8 fba4 	bl	8000b98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008450:	490f      	ldr	r1, [pc, #60]	; (8008490 <MX_USB_DEVICE_Init+0x58>)
 8008452:	480e      	ldr	r0, [pc, #56]	; (800848c <MX_USB_DEVICE_Init+0x54>)
 8008454:	f7fe fd2e 	bl	8006eb4 <USBD_RegisterClass>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800845e:	f7f8 fb9b 	bl	8000b98 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008462:	490c      	ldr	r1, [pc, #48]	; (8008494 <MX_USB_DEVICE_Init+0x5c>)
 8008464:	4809      	ldr	r0, [pc, #36]	; (800848c <MX_USB_DEVICE_Init+0x54>)
 8008466:	f7fe fc1f 	bl	8006ca8 <USBD_CDC_RegisterInterface>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d001      	beq.n	8008474 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008470:	f7f8 fb92 	bl	8000b98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008474:	4805      	ldr	r0, [pc, #20]	; (800848c <MX_USB_DEVICE_Init+0x54>)
 8008476:	f7fe fd53 	bl	8006f20 <USBD_Start>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d001      	beq.n	8008484 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008480:	f7f8 fb8a 	bl	8000b98 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008484:	bf00      	nop
 8008486:	bd80      	pop	{r7, pc}
 8008488:	200000ac 	.word	0x200000ac
 800848c:	20000388 	.word	0x20000388
 8008490:	20000018 	.word	0x20000018
 8008494:	20000098 	.word	0x20000098

08008498 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800849c:	2200      	movs	r2, #0
 800849e:	4905      	ldr	r1, [pc, #20]	; (80084b4 <CDC_Init_FS+0x1c>)
 80084a0:	4805      	ldr	r0, [pc, #20]	; (80084b8 <CDC_Init_FS+0x20>)
 80084a2:	f7fe fc1b 	bl	8006cdc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80084a6:	4905      	ldr	r1, [pc, #20]	; (80084bc <CDC_Init_FS+0x24>)
 80084a8:	4803      	ldr	r0, [pc, #12]	; (80084b8 <CDC_Init_FS+0x20>)
 80084aa:	f7fe fc39 	bl	8006d20 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80084ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	20000e64 	.word	0x20000e64
 80084b8:	20000388 	.word	0x20000388
 80084bc:	20000664 	.word	0x20000664

080084c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80084c0:	b480      	push	{r7}
 80084c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80084c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	4603      	mov	r3, r0
 80084d8:	6039      	str	r1, [r7, #0]
 80084da:	71fb      	strb	r3, [r7, #7]
 80084dc:	4613      	mov	r3, r2
 80084de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80084e0:	79fb      	ldrb	r3, [r7, #7]
 80084e2:	2b23      	cmp	r3, #35	; 0x23
 80084e4:	d84a      	bhi.n	800857c <CDC_Control_FS+0xac>
 80084e6:	a201      	add	r2, pc, #4	; (adr r2, 80084ec <CDC_Control_FS+0x1c>)
 80084e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ec:	0800857d 	.word	0x0800857d
 80084f0:	0800857d 	.word	0x0800857d
 80084f4:	0800857d 	.word	0x0800857d
 80084f8:	0800857d 	.word	0x0800857d
 80084fc:	0800857d 	.word	0x0800857d
 8008500:	0800857d 	.word	0x0800857d
 8008504:	0800857d 	.word	0x0800857d
 8008508:	0800857d 	.word	0x0800857d
 800850c:	0800857d 	.word	0x0800857d
 8008510:	0800857d 	.word	0x0800857d
 8008514:	0800857d 	.word	0x0800857d
 8008518:	0800857d 	.word	0x0800857d
 800851c:	0800857d 	.word	0x0800857d
 8008520:	0800857d 	.word	0x0800857d
 8008524:	0800857d 	.word	0x0800857d
 8008528:	0800857d 	.word	0x0800857d
 800852c:	0800857d 	.word	0x0800857d
 8008530:	0800857d 	.word	0x0800857d
 8008534:	0800857d 	.word	0x0800857d
 8008538:	0800857d 	.word	0x0800857d
 800853c:	0800857d 	.word	0x0800857d
 8008540:	0800857d 	.word	0x0800857d
 8008544:	0800857d 	.word	0x0800857d
 8008548:	0800857d 	.word	0x0800857d
 800854c:	0800857d 	.word	0x0800857d
 8008550:	0800857d 	.word	0x0800857d
 8008554:	0800857d 	.word	0x0800857d
 8008558:	0800857d 	.word	0x0800857d
 800855c:	0800857d 	.word	0x0800857d
 8008560:	0800857d 	.word	0x0800857d
 8008564:	0800857d 	.word	0x0800857d
 8008568:	0800857d 	.word	0x0800857d
 800856c:	0800857d 	.word	0x0800857d
 8008570:	0800857d 	.word	0x0800857d
 8008574:	0800857d 	.word	0x0800857d
 8008578:	0800857d 	.word	0x0800857d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800857c:	bf00      	nop
  }

  return (USBD_OK);
 800857e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008580:	4618      	mov	r0, r3
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008596:	6879      	ldr	r1, [r7, #4]
 8008598:	4805      	ldr	r0, [pc, #20]	; (80085b0 <CDC_Receive_FS+0x24>)
 800859a:	f7fe fbc1 	bl	8006d20 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800859e:	4804      	ldr	r0, [pc, #16]	; (80085b0 <CDC_Receive_FS+0x24>)
 80085a0:	f7fe fc22 	bl	8006de8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80085a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	20000388 	.word	0x20000388

080085b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	460b      	mov	r3, r1
 80085be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80085c4:	4b0d      	ldr	r3, [pc, #52]	; (80085fc <CDC_Transmit_FS+0x48>)
 80085c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d001      	beq.n	80085da <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e00b      	b.n	80085f2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80085da:	887b      	ldrh	r3, [r7, #2]
 80085dc:	461a      	mov	r2, r3
 80085de:	6879      	ldr	r1, [r7, #4]
 80085e0:	4806      	ldr	r0, [pc, #24]	; (80085fc <CDC_Transmit_FS+0x48>)
 80085e2:	f7fe fb7b 	bl	8006cdc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80085e6:	4805      	ldr	r0, [pc, #20]	; (80085fc <CDC_Transmit_FS+0x48>)
 80085e8:	f7fe fbb8 	bl	8006d5c <USBD_CDC_TransmitPacket>
 80085ec:	4603      	mov	r3, r0
 80085ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	20000388 	.word	0x20000388

08008600 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008600:	b480      	push	{r7}
 8008602:	b087      	sub	sp, #28
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	4613      	mov	r3, r2
 800860c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800860e:	2300      	movs	r3, #0
 8008610:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008612:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008616:	4618      	mov	r0, r3
 8008618:	371c      	adds	r7, #28
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
	...

08008624 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	4603      	mov	r3, r0
 800862c:	6039      	str	r1, [r7, #0]
 800862e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	2212      	movs	r2, #18
 8008634:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008636:	4b03      	ldr	r3, [pc, #12]	; (8008644 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008638:	4618      	mov	r0, r3
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr
 8008644:	200000c8 	.word	0x200000c8

08008648 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	4603      	mov	r3, r0
 8008650:	6039      	str	r1, [r7, #0]
 8008652:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	2204      	movs	r2, #4
 8008658:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800865a:	4b03      	ldr	r3, [pc, #12]	; (8008668 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800865c:	4618      	mov	r0, r3
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr
 8008668:	200000dc 	.word	0x200000dc

0800866c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	4603      	mov	r3, r0
 8008674:	6039      	str	r1, [r7, #0]
 8008676:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008678:	79fb      	ldrb	r3, [r7, #7]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d105      	bne.n	800868a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800867e:	683a      	ldr	r2, [r7, #0]
 8008680:	4907      	ldr	r1, [pc, #28]	; (80086a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008682:	4808      	ldr	r0, [pc, #32]	; (80086a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008684:	f7ff fdf8 	bl	8008278 <USBD_GetString>
 8008688:	e004      	b.n	8008694 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	4904      	ldr	r1, [pc, #16]	; (80086a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800868e:	4805      	ldr	r0, [pc, #20]	; (80086a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008690:	f7ff fdf2 	bl	8008278 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008694:	4b02      	ldr	r3, [pc, #8]	; (80086a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008696:	4618      	mov	r0, r3
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	20001664 	.word	0x20001664
 80086a4:	08009830 	.word	0x08009830

080086a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	4603      	mov	r3, r0
 80086b0:	6039      	str	r1, [r7, #0]
 80086b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086b4:	683a      	ldr	r2, [r7, #0]
 80086b6:	4904      	ldr	r1, [pc, #16]	; (80086c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086b8:	4804      	ldr	r0, [pc, #16]	; (80086cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086ba:	f7ff fddd 	bl	8008278 <USBD_GetString>
  return USBD_StrDesc;
 80086be:	4b02      	ldr	r3, [pc, #8]	; (80086c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	20001664 	.word	0x20001664
 80086cc:	0800984c 	.word	0x0800984c

080086d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	4603      	mov	r3, r0
 80086d8:	6039      	str	r1, [r7, #0]
 80086da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	221a      	movs	r2, #26
 80086e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80086e2:	f000 f843 	bl	800876c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80086e6:	4b02      	ldr	r3, [pc, #8]	; (80086f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	200000e0 	.word	0x200000e0

080086f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	4603      	mov	r3, r0
 80086fc:	6039      	str	r1, [r7, #0]
 80086fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008700:	79fb      	ldrb	r3, [r7, #7]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d105      	bne.n	8008712 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	4907      	ldr	r1, [pc, #28]	; (8008728 <USBD_FS_ConfigStrDescriptor+0x34>)
 800870a:	4808      	ldr	r0, [pc, #32]	; (800872c <USBD_FS_ConfigStrDescriptor+0x38>)
 800870c:	f7ff fdb4 	bl	8008278 <USBD_GetString>
 8008710:	e004      	b.n	800871c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008712:	683a      	ldr	r2, [r7, #0]
 8008714:	4904      	ldr	r1, [pc, #16]	; (8008728 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008716:	4805      	ldr	r0, [pc, #20]	; (800872c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008718:	f7ff fdae 	bl	8008278 <USBD_GetString>
  }
  return USBD_StrDesc;
 800871c:	4b02      	ldr	r3, [pc, #8]	; (8008728 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800871e:	4618      	mov	r0, r3
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	20001664 	.word	0x20001664
 800872c:	08009860 	.word	0x08009860

08008730 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	4603      	mov	r3, r0
 8008738:	6039      	str	r1, [r7, #0]
 800873a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800873c:	79fb      	ldrb	r3, [r7, #7]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d105      	bne.n	800874e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	4907      	ldr	r1, [pc, #28]	; (8008764 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008746:	4808      	ldr	r0, [pc, #32]	; (8008768 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008748:	f7ff fd96 	bl	8008278 <USBD_GetString>
 800874c:	e004      	b.n	8008758 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	4904      	ldr	r1, [pc, #16]	; (8008764 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008752:	4805      	ldr	r0, [pc, #20]	; (8008768 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008754:	f7ff fd90 	bl	8008278 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008758:	4b02      	ldr	r3, [pc, #8]	; (8008764 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800875a:	4618      	mov	r0, r3
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	20001664 	.word	0x20001664
 8008768:	0800986c 	.word	0x0800986c

0800876c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008772:	4b0f      	ldr	r3, [pc, #60]	; (80087b0 <Get_SerialNum+0x44>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008778:	4b0e      	ldr	r3, [pc, #56]	; (80087b4 <Get_SerialNum+0x48>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800877e:	4b0e      	ldr	r3, [pc, #56]	; (80087b8 <Get_SerialNum+0x4c>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4413      	add	r3, r2
 800878a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d009      	beq.n	80087a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008792:	2208      	movs	r2, #8
 8008794:	4909      	ldr	r1, [pc, #36]	; (80087bc <Get_SerialNum+0x50>)
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f000 f814 	bl	80087c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800879c:	2204      	movs	r2, #4
 800879e:	4908      	ldr	r1, [pc, #32]	; (80087c0 <Get_SerialNum+0x54>)
 80087a0:	68b8      	ldr	r0, [r7, #8]
 80087a2:	f000 f80f 	bl	80087c4 <IntToUnicode>
  }
}
 80087a6:	bf00      	nop
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	1fff7a10 	.word	0x1fff7a10
 80087b4:	1fff7a14 	.word	0x1fff7a14
 80087b8:	1fff7a18 	.word	0x1fff7a18
 80087bc:	200000e2 	.word	0x200000e2
 80087c0:	200000f2 	.word	0x200000f2

080087c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b087      	sub	sp, #28
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	4613      	mov	r3, r2
 80087d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087d2:	2300      	movs	r3, #0
 80087d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80087d6:	2300      	movs	r3, #0
 80087d8:	75fb      	strb	r3, [r7, #23]
 80087da:	e027      	b.n	800882c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	0f1b      	lsrs	r3, r3, #28
 80087e0:	2b09      	cmp	r3, #9
 80087e2:	d80b      	bhi.n	80087fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	0f1b      	lsrs	r3, r3, #28
 80087e8:	b2da      	uxtb	r2, r3
 80087ea:	7dfb      	ldrb	r3, [r7, #23]
 80087ec:	005b      	lsls	r3, r3, #1
 80087ee:	4619      	mov	r1, r3
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	440b      	add	r3, r1
 80087f4:	3230      	adds	r2, #48	; 0x30
 80087f6:	b2d2      	uxtb	r2, r2
 80087f8:	701a      	strb	r2, [r3, #0]
 80087fa:	e00a      	b.n	8008812 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	0f1b      	lsrs	r3, r3, #28
 8008800:	b2da      	uxtb	r2, r3
 8008802:	7dfb      	ldrb	r3, [r7, #23]
 8008804:	005b      	lsls	r3, r3, #1
 8008806:	4619      	mov	r1, r3
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	440b      	add	r3, r1
 800880c:	3237      	adds	r2, #55	; 0x37
 800880e:	b2d2      	uxtb	r2, r2
 8008810:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	011b      	lsls	r3, r3, #4
 8008816:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008818:	7dfb      	ldrb	r3, [r7, #23]
 800881a:	005b      	lsls	r3, r3, #1
 800881c:	3301      	adds	r3, #1
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	4413      	add	r3, r2
 8008822:	2200      	movs	r2, #0
 8008824:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008826:	7dfb      	ldrb	r3, [r7, #23]
 8008828:	3301      	adds	r3, #1
 800882a:	75fb      	strb	r3, [r7, #23]
 800882c:	7dfa      	ldrb	r2, [r7, #23]
 800882e:	79fb      	ldrb	r3, [r7, #7]
 8008830:	429a      	cmp	r2, r3
 8008832:	d3d3      	bcc.n	80087dc <IntToUnicode+0x18>
  }
}
 8008834:	bf00      	nop
 8008836:	bf00      	nop
 8008838:	371c      	adds	r7, #28
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
	...

08008844 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b08a      	sub	sp, #40	; 0x28
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800884c:	f107 0314 	add.w	r3, r7, #20
 8008850:	2200      	movs	r2, #0
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	605a      	str	r2, [r3, #4]
 8008856:	609a      	str	r2, [r3, #8]
 8008858:	60da      	str	r2, [r3, #12]
 800885a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008864:	d147      	bne.n	80088f6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008866:	2300      	movs	r3, #0
 8008868:	613b      	str	r3, [r7, #16]
 800886a:	4b25      	ldr	r3, [pc, #148]	; (8008900 <HAL_PCD_MspInit+0xbc>)
 800886c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886e:	4a24      	ldr	r2, [pc, #144]	; (8008900 <HAL_PCD_MspInit+0xbc>)
 8008870:	f043 0301 	orr.w	r3, r3, #1
 8008874:	6313      	str	r3, [r2, #48]	; 0x30
 8008876:	4b22      	ldr	r3, [pc, #136]	; (8008900 <HAL_PCD_MspInit+0xbc>)
 8008878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887a:	f003 0301 	and.w	r3, r3, #1
 800887e:	613b      	str	r3, [r7, #16]
 8008880:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008882:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008888:	2300      	movs	r3, #0
 800888a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800888c:	2300      	movs	r3, #0
 800888e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008890:	f107 0314 	add.w	r3, r7, #20
 8008894:	4619      	mov	r1, r3
 8008896:	481b      	ldr	r0, [pc, #108]	; (8008904 <HAL_PCD_MspInit+0xc0>)
 8008898:	f7f8 fc78 	bl	800118c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800889c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80088a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088a2:	2302      	movs	r3, #2
 80088a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088a6:	2300      	movs	r3, #0
 80088a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088aa:	2300      	movs	r3, #0
 80088ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80088ae:	230a      	movs	r3, #10
 80088b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088b2:	f107 0314 	add.w	r3, r7, #20
 80088b6:	4619      	mov	r1, r3
 80088b8:	4812      	ldr	r0, [pc, #72]	; (8008904 <HAL_PCD_MspInit+0xc0>)
 80088ba:	f7f8 fc67 	bl	800118c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80088be:	4b10      	ldr	r3, [pc, #64]	; (8008900 <HAL_PCD_MspInit+0xbc>)
 80088c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c2:	4a0f      	ldr	r2, [pc, #60]	; (8008900 <HAL_PCD_MspInit+0xbc>)
 80088c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c8:	6353      	str	r3, [r2, #52]	; 0x34
 80088ca:	2300      	movs	r3, #0
 80088cc:	60fb      	str	r3, [r7, #12]
 80088ce:	4b0c      	ldr	r3, [pc, #48]	; (8008900 <HAL_PCD_MspInit+0xbc>)
 80088d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d2:	4a0b      	ldr	r2, [pc, #44]	; (8008900 <HAL_PCD_MspInit+0xbc>)
 80088d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088d8:	6453      	str	r3, [r2, #68]	; 0x44
 80088da:	4b09      	ldr	r3, [pc, #36]	; (8008900 <HAL_PCD_MspInit+0xbc>)
 80088dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088e2:	60fb      	str	r3, [r7, #12]
 80088e4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80088e6:	2200      	movs	r2, #0
 80088e8:	2100      	movs	r1, #0
 80088ea:	2043      	movs	r0, #67	; 0x43
 80088ec:	f7f8 fc17 	bl	800111e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088f0:	2043      	movs	r0, #67	; 0x43
 80088f2:	f7f8 fc30 	bl	8001156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088f6:	bf00      	nop
 80088f8:	3728      	adds	r7, #40	; 0x28
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	40023800 	.word	0x40023800
 8008904:	40020000 	.word	0x40020000

08008908 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800891c:	4619      	mov	r1, r3
 800891e:	4610      	mov	r0, r2
 8008920:	f7fe fb4b 	bl	8006fba <USBD_LL_SetupStage>
}
 8008924:	bf00      	nop
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800893e:	78fa      	ldrb	r2, [r7, #3]
 8008940:	6879      	ldr	r1, [r7, #4]
 8008942:	4613      	mov	r3, r2
 8008944:	00db      	lsls	r3, r3, #3
 8008946:	4413      	add	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	440b      	add	r3, r1
 800894c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	78fb      	ldrb	r3, [r7, #3]
 8008954:	4619      	mov	r1, r3
 8008956:	f7fe fb85 	bl	8007064 <USBD_LL_DataOutStage>
}
 800895a:	bf00      	nop
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b082      	sub	sp, #8
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	460b      	mov	r3, r1
 800896c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008974:	78fa      	ldrb	r2, [r7, #3]
 8008976:	6879      	ldr	r1, [r7, #4]
 8008978:	4613      	mov	r3, r2
 800897a:	00db      	lsls	r3, r3, #3
 800897c:	4413      	add	r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	440b      	add	r3, r1
 8008982:	334c      	adds	r3, #76	; 0x4c
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	78fb      	ldrb	r3, [r7, #3]
 8008988:	4619      	mov	r1, r3
 800898a:	f7fe fc1e 	bl	80071ca <USBD_LL_DataInStage>
}
 800898e:	bf00      	nop
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b082      	sub	sp, #8
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7fe fd52 	bl	800744e <USBD_LL_SOF>
}
 80089aa:	bf00      	nop
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b084      	sub	sp, #16
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80089ba:	2301      	movs	r3, #1
 80089bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d102      	bne.n	80089cc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80089c6:	2300      	movs	r3, #0
 80089c8:	73fb      	strb	r3, [r7, #15]
 80089ca:	e008      	b.n	80089de <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d102      	bne.n	80089da <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80089d4:	2301      	movs	r3, #1
 80089d6:	73fb      	strb	r3, [r7, #15]
 80089d8:	e001      	b.n	80089de <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80089da:	f7f8 f8dd 	bl	8000b98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089e4:	7bfa      	ldrb	r2, [r7, #15]
 80089e6:	4611      	mov	r1, r2
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7fe fcf2 	bl	80073d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fe fc9a 	bl	800732e <USBD_LL_Reset>
}
 80089fa:	bf00      	nop
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
	...

08008a04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7fe fced 	bl	80073f2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	6812      	ldr	r2, [r2, #0]
 8008a26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a2a:	f043 0301 	orr.w	r3, r3, #1
 8008a2e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a1b      	ldr	r3, [r3, #32]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d005      	beq.n	8008a44 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a38:	4b04      	ldr	r3, [pc, #16]	; (8008a4c <HAL_PCD_SuspendCallback+0x48>)
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	4a03      	ldr	r2, [pc, #12]	; (8008a4c <HAL_PCD_SuspendCallback+0x48>)
 8008a3e:	f043 0306 	orr.w	r3, r3, #6
 8008a42:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a44:	bf00      	nop
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	e000ed00 	.word	0xe000ed00

08008a50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fe fcdd 	bl	800741e <USBD_LL_Resume>
}
 8008a64:	bf00      	nop
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	460b      	mov	r3, r1
 8008a76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a7e:	78fa      	ldrb	r2, [r7, #3]
 8008a80:	4611      	mov	r1, r2
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7fe fd35 	bl	80074f2 <USBD_LL_IsoOUTIncomplete>
}
 8008a88:	bf00      	nop
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	460b      	mov	r3, r1
 8008a9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008aa2:	78fa      	ldrb	r2, [r7, #3]
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fe fcf1 	bl	800748e <USBD_LL_IsoINIncomplete>
}
 8008aac:	bf00      	nop
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7fe fd47 	bl	8007556 <USBD_LL_DevConnected>
}
 8008ac8:	bf00      	nop
 8008aca:	3708      	adds	r7, #8
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7fe fd44 	bl	800756c <USBD_LL_DevDisconnected>
}
 8008ae4:	bf00      	nop
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d13c      	bne.n	8008b76 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008afc:	4a20      	ldr	r2, [pc, #128]	; (8008b80 <USBD_LL_Init+0x94>)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a1e      	ldr	r2, [pc, #120]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b08:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008b0c:	4b1c      	ldr	r3, [pc, #112]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008b12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008b14:	4b1a      	ldr	r3, [pc, #104]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b16:	2204      	movs	r2, #4
 8008b18:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008b1a:	4b19      	ldr	r3, [pc, #100]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b1c:	2202      	movs	r2, #2
 8008b1e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008b20:	4b17      	ldr	r3, [pc, #92]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008b26:	4b16      	ldr	r3, [pc, #88]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b28:	2202      	movs	r2, #2
 8008b2a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b2c:	4b14      	ldr	r3, [pc, #80]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b2e:	2200      	movs	r2, #0
 8008b30:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008b32:	4b13      	ldr	r3, [pc, #76]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008b38:	4b11      	ldr	r3, [pc, #68]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008b3e:	4b10      	ldr	r3, [pc, #64]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b40:	2200      	movs	r2, #0
 8008b42:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008b44:	4b0e      	ldr	r3, [pc, #56]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b46:	2200      	movs	r2, #0
 8008b48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008b4a:	480d      	ldr	r0, [pc, #52]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b4c:	f7f9 ff94 	bl	8002a78 <HAL_PCD_Init>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d001      	beq.n	8008b5a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008b56:	f7f8 f81f 	bl	8000b98 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008b5a:	2180      	movs	r1, #128	; 0x80
 8008b5c:	4808      	ldr	r0, [pc, #32]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b5e:	f7fb f9ec 	bl	8003f3a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008b62:	2240      	movs	r2, #64	; 0x40
 8008b64:	2100      	movs	r1, #0
 8008b66:	4806      	ldr	r0, [pc, #24]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b68:	f7fb f9a0 	bl	8003eac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008b6c:	2280      	movs	r2, #128	; 0x80
 8008b6e:	2101      	movs	r1, #1
 8008b70:	4803      	ldr	r0, [pc, #12]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b72:	f7fb f99b 	bl	8003eac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	20001864 	.word	0x20001864

08008b84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fa f889 	bl	8002cb2 <HAL_PCD_Start>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 f942 	bl	8008e30 <USBD_Get_USB_Status>
 8008bac:	4603      	mov	r3, r0
 8008bae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b084      	sub	sp, #16
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	4608      	mov	r0, r1
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	4603      	mov	r3, r0
 8008bca:	70fb      	strb	r3, [r7, #3]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	70bb      	strb	r3, [r7, #2]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008be2:	78bb      	ldrb	r3, [r7, #2]
 8008be4:	883a      	ldrh	r2, [r7, #0]
 8008be6:	78f9      	ldrb	r1, [r7, #3]
 8008be8:	f7fa fd5a 	bl	80036a0 <HAL_PCD_EP_Open>
 8008bec:	4603      	mov	r3, r0
 8008bee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bf0:	7bfb      	ldrb	r3, [r7, #15]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 f91c 	bl	8008e30 <USBD_Get_USB_Status>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b084      	sub	sp, #16
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	460b      	mov	r3, r1
 8008c10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c12:	2300      	movs	r3, #0
 8008c14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c20:	78fa      	ldrb	r2, [r7, #3]
 8008c22:	4611      	mov	r1, r2
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7fa fda3 	bl	8003770 <HAL_PCD_EP_Close>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c2e:	7bfb      	ldrb	r3, [r7, #15]
 8008c30:	4618      	mov	r0, r3
 8008c32:	f000 f8fd 	bl	8008e30 <USBD_Get_USB_Status>
 8008c36:	4603      	mov	r3, r0
 8008c38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c54:	2300      	movs	r3, #0
 8008c56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c5e:	78fa      	ldrb	r2, [r7, #3]
 8008c60:	4611      	mov	r1, r2
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fa fe7b 	bl	800395e <HAL_PCD_EP_SetStall>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 f8de 	bl	8008e30 <USBD_Get_USB_Status>
 8008c74:	4603      	mov	r3, r0
 8008c76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c78:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b084      	sub	sp, #16
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c92:	2300      	movs	r3, #0
 8008c94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c9c:	78fa      	ldrb	r2, [r7, #3]
 8008c9e:	4611      	mov	r1, r2
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7fa fec0 	bl	8003a26 <HAL_PCD_EP_ClrStall>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 f8bf 	bl	8008e30 <USBD_Get_USB_Status>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	460b      	mov	r3, r1
 8008cca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cd2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008cd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	da0b      	bge.n	8008cf4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008cdc:	78fb      	ldrb	r3, [r7, #3]
 8008cde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ce2:	68f9      	ldr	r1, [r7, #12]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	00db      	lsls	r3, r3, #3
 8008ce8:	4413      	add	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	440b      	add	r3, r1
 8008cee:	333e      	adds	r3, #62	; 0x3e
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	e00b      	b.n	8008d0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008cf4:	78fb      	ldrb	r3, [r7, #3]
 8008cf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cfa:	68f9      	ldr	r1, [r7, #12]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	00db      	lsls	r3, r3, #3
 8008d00:	4413      	add	r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	440b      	add	r3, r1
 8008d06:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008d0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	460b      	mov	r3, r1
 8008d22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d32:	78fa      	ldrb	r2, [r7, #3]
 8008d34:	4611      	mov	r1, r2
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7fa fc8d 	bl	8003656 <HAL_PCD_SetAddress>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 f874 	bl	8008e30 <USBD_Get_USB_Status>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b086      	sub	sp, #24
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	60f8      	str	r0, [r7, #12]
 8008d5e:	607a      	str	r2, [r7, #4]
 8008d60:	603b      	str	r3, [r7, #0]
 8008d62:	460b      	mov	r3, r1
 8008d64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d66:	2300      	movs	r3, #0
 8008d68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d74:	7af9      	ldrb	r1, [r7, #11]
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	f7fa fda6 	bl	80038ca <HAL_PCD_EP_Transmit>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d82:	7dfb      	ldrb	r3, [r7, #23]
 8008d84:	4618      	mov	r0, r3
 8008d86:	f000 f853 	bl	8008e30 <USBD_Get_USB_Status>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d8e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3718      	adds	r7, #24
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b086      	sub	sp, #24
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	607a      	str	r2, [r7, #4]
 8008da2:	603b      	str	r3, [r7, #0]
 8008da4:	460b      	mov	r3, r1
 8008da6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008da8:	2300      	movs	r3, #0
 8008daa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dac:	2300      	movs	r3, #0
 8008dae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008db6:	7af9      	ldrb	r1, [r7, #11]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	f7fa fd22 	bl	8003804 <HAL_PCD_EP_Receive>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dc4:	7dfb      	ldrb	r3, [r7, #23]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 f832 	bl	8008e30 <USBD_Get_USB_Status>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008dd0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3718      	adds	r7, #24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b082      	sub	sp, #8
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	460b      	mov	r3, r1
 8008de4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dec:	78fa      	ldrb	r2, [r7, #3]
 8008dee:	4611      	mov	r1, r2
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7fa fd52 	bl	800389a <HAL_PCD_EP_GetRxCount>
 8008df6:	4603      	mov	r3, r0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008e08:	4b03      	ldr	r3, [pc, #12]	; (8008e18 <USBD_static_malloc+0x18>)
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	370c      	adds	r7, #12
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	20001d70 	.word	0x20001d70

08008e1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]

}
 8008e24:	bf00      	nop
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	4603      	mov	r3, r0
 8008e38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e3e:	79fb      	ldrb	r3, [r7, #7]
 8008e40:	2b03      	cmp	r3, #3
 8008e42:	d817      	bhi.n	8008e74 <USBD_Get_USB_Status+0x44>
 8008e44:	a201      	add	r2, pc, #4	; (adr r2, 8008e4c <USBD_Get_USB_Status+0x1c>)
 8008e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e4a:	bf00      	nop
 8008e4c:	08008e5d 	.word	0x08008e5d
 8008e50:	08008e63 	.word	0x08008e63
 8008e54:	08008e69 	.word	0x08008e69
 8008e58:	08008e6f 	.word	0x08008e6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e60:	e00b      	b.n	8008e7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e62:	2303      	movs	r3, #3
 8008e64:	73fb      	strb	r3, [r7, #15]
    break;
 8008e66:	e008      	b.n	8008e7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e6c:	e005      	b.n	8008e7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	73fb      	strb	r3, [r7, #15]
    break;
 8008e72:	e002      	b.n	8008e7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e74:	2303      	movs	r3, #3
 8008e76:	73fb      	strb	r3, [r7, #15]
    break;
 8008e78:	bf00      	nop
  }
  return usb_status;
 8008e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3714      	adds	r7, #20
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <__errno>:
 8008e88:	4b01      	ldr	r3, [pc, #4]	; (8008e90 <__errno+0x8>)
 8008e8a:	6818      	ldr	r0, [r3, #0]
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	200000fc 	.word	0x200000fc

08008e94 <__libc_init_array>:
 8008e94:	b570      	push	{r4, r5, r6, lr}
 8008e96:	4d0d      	ldr	r5, [pc, #52]	; (8008ecc <__libc_init_array+0x38>)
 8008e98:	4c0d      	ldr	r4, [pc, #52]	; (8008ed0 <__libc_init_array+0x3c>)
 8008e9a:	1b64      	subs	r4, r4, r5
 8008e9c:	10a4      	asrs	r4, r4, #2
 8008e9e:	2600      	movs	r6, #0
 8008ea0:	42a6      	cmp	r6, r4
 8008ea2:	d109      	bne.n	8008eb8 <__libc_init_array+0x24>
 8008ea4:	4d0b      	ldr	r5, [pc, #44]	; (8008ed4 <__libc_init_array+0x40>)
 8008ea6:	4c0c      	ldr	r4, [pc, #48]	; (8008ed8 <__libc_init_array+0x44>)
 8008ea8:	f000 fca2 	bl	80097f0 <_init>
 8008eac:	1b64      	subs	r4, r4, r5
 8008eae:	10a4      	asrs	r4, r4, #2
 8008eb0:	2600      	movs	r6, #0
 8008eb2:	42a6      	cmp	r6, r4
 8008eb4:	d105      	bne.n	8008ec2 <__libc_init_array+0x2e>
 8008eb6:	bd70      	pop	{r4, r5, r6, pc}
 8008eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ebc:	4798      	blx	r3
 8008ebe:	3601      	adds	r6, #1
 8008ec0:	e7ee      	b.n	8008ea0 <__libc_init_array+0xc>
 8008ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ec6:	4798      	blx	r3
 8008ec8:	3601      	adds	r6, #1
 8008eca:	e7f2      	b.n	8008eb2 <__libc_init_array+0x1e>
 8008ecc:	080098d0 	.word	0x080098d0
 8008ed0:	080098d0 	.word	0x080098d0
 8008ed4:	080098d0 	.word	0x080098d0
 8008ed8:	080098d4 	.word	0x080098d4

08008edc <memset>:
 8008edc:	4402      	add	r2, r0
 8008ede:	4603      	mov	r3, r0
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d100      	bne.n	8008ee6 <memset+0xa>
 8008ee4:	4770      	bx	lr
 8008ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8008eea:	e7f9      	b.n	8008ee0 <memset+0x4>

08008eec <sniprintf>:
 8008eec:	b40c      	push	{r2, r3}
 8008eee:	b530      	push	{r4, r5, lr}
 8008ef0:	4b17      	ldr	r3, [pc, #92]	; (8008f50 <sniprintf+0x64>)
 8008ef2:	1e0c      	subs	r4, r1, #0
 8008ef4:	681d      	ldr	r5, [r3, #0]
 8008ef6:	b09d      	sub	sp, #116	; 0x74
 8008ef8:	da08      	bge.n	8008f0c <sniprintf+0x20>
 8008efa:	238b      	movs	r3, #139	; 0x8b
 8008efc:	602b      	str	r3, [r5, #0]
 8008efe:	f04f 30ff 	mov.w	r0, #4294967295
 8008f02:	b01d      	add	sp, #116	; 0x74
 8008f04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f08:	b002      	add	sp, #8
 8008f0a:	4770      	bx	lr
 8008f0c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008f10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008f14:	bf14      	ite	ne
 8008f16:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008f1a:	4623      	moveq	r3, r4
 8008f1c:	9304      	str	r3, [sp, #16]
 8008f1e:	9307      	str	r3, [sp, #28]
 8008f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f24:	9002      	str	r0, [sp, #8]
 8008f26:	9006      	str	r0, [sp, #24]
 8008f28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008f2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008f2e:	ab21      	add	r3, sp, #132	; 0x84
 8008f30:	a902      	add	r1, sp, #8
 8008f32:	4628      	mov	r0, r5
 8008f34:	9301      	str	r3, [sp, #4]
 8008f36:	f000 f869 	bl	800900c <_svfiprintf_r>
 8008f3a:	1c43      	adds	r3, r0, #1
 8008f3c:	bfbc      	itt	lt
 8008f3e:	238b      	movlt	r3, #139	; 0x8b
 8008f40:	602b      	strlt	r3, [r5, #0]
 8008f42:	2c00      	cmp	r4, #0
 8008f44:	d0dd      	beq.n	8008f02 <sniprintf+0x16>
 8008f46:	9b02      	ldr	r3, [sp, #8]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	701a      	strb	r2, [r3, #0]
 8008f4c:	e7d9      	b.n	8008f02 <sniprintf+0x16>
 8008f4e:	bf00      	nop
 8008f50:	200000fc 	.word	0x200000fc

08008f54 <__ssputs_r>:
 8008f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f58:	688e      	ldr	r6, [r1, #8]
 8008f5a:	429e      	cmp	r6, r3
 8008f5c:	4682      	mov	sl, r0
 8008f5e:	460c      	mov	r4, r1
 8008f60:	4690      	mov	r8, r2
 8008f62:	461f      	mov	r7, r3
 8008f64:	d838      	bhi.n	8008fd8 <__ssputs_r+0x84>
 8008f66:	898a      	ldrh	r2, [r1, #12]
 8008f68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f6c:	d032      	beq.n	8008fd4 <__ssputs_r+0x80>
 8008f6e:	6825      	ldr	r5, [r4, #0]
 8008f70:	6909      	ldr	r1, [r1, #16]
 8008f72:	eba5 0901 	sub.w	r9, r5, r1
 8008f76:	6965      	ldr	r5, [r4, #20]
 8008f78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f80:	3301      	adds	r3, #1
 8008f82:	444b      	add	r3, r9
 8008f84:	106d      	asrs	r5, r5, #1
 8008f86:	429d      	cmp	r5, r3
 8008f88:	bf38      	it	cc
 8008f8a:	461d      	movcc	r5, r3
 8008f8c:	0553      	lsls	r3, r2, #21
 8008f8e:	d531      	bpl.n	8008ff4 <__ssputs_r+0xa0>
 8008f90:	4629      	mov	r1, r5
 8008f92:	f000 fb63 	bl	800965c <_malloc_r>
 8008f96:	4606      	mov	r6, r0
 8008f98:	b950      	cbnz	r0, 8008fb0 <__ssputs_r+0x5c>
 8008f9a:	230c      	movs	r3, #12
 8008f9c:	f8ca 3000 	str.w	r3, [sl]
 8008fa0:	89a3      	ldrh	r3, [r4, #12]
 8008fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fa6:	81a3      	strh	r3, [r4, #12]
 8008fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fb0:	6921      	ldr	r1, [r4, #16]
 8008fb2:	464a      	mov	r2, r9
 8008fb4:	f000 fabe 	bl	8009534 <memcpy>
 8008fb8:	89a3      	ldrh	r3, [r4, #12]
 8008fba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fc2:	81a3      	strh	r3, [r4, #12]
 8008fc4:	6126      	str	r6, [r4, #16]
 8008fc6:	6165      	str	r5, [r4, #20]
 8008fc8:	444e      	add	r6, r9
 8008fca:	eba5 0509 	sub.w	r5, r5, r9
 8008fce:	6026      	str	r6, [r4, #0]
 8008fd0:	60a5      	str	r5, [r4, #8]
 8008fd2:	463e      	mov	r6, r7
 8008fd4:	42be      	cmp	r6, r7
 8008fd6:	d900      	bls.n	8008fda <__ssputs_r+0x86>
 8008fd8:	463e      	mov	r6, r7
 8008fda:	6820      	ldr	r0, [r4, #0]
 8008fdc:	4632      	mov	r2, r6
 8008fde:	4641      	mov	r1, r8
 8008fe0:	f000 fab6 	bl	8009550 <memmove>
 8008fe4:	68a3      	ldr	r3, [r4, #8]
 8008fe6:	1b9b      	subs	r3, r3, r6
 8008fe8:	60a3      	str	r3, [r4, #8]
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	4433      	add	r3, r6
 8008fee:	6023      	str	r3, [r4, #0]
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	e7db      	b.n	8008fac <__ssputs_r+0x58>
 8008ff4:	462a      	mov	r2, r5
 8008ff6:	f000 fba5 	bl	8009744 <_realloc_r>
 8008ffa:	4606      	mov	r6, r0
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	d1e1      	bne.n	8008fc4 <__ssputs_r+0x70>
 8009000:	6921      	ldr	r1, [r4, #16]
 8009002:	4650      	mov	r0, sl
 8009004:	f000 fabe 	bl	8009584 <_free_r>
 8009008:	e7c7      	b.n	8008f9a <__ssputs_r+0x46>
	...

0800900c <_svfiprintf_r>:
 800900c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009010:	4698      	mov	r8, r3
 8009012:	898b      	ldrh	r3, [r1, #12]
 8009014:	061b      	lsls	r3, r3, #24
 8009016:	b09d      	sub	sp, #116	; 0x74
 8009018:	4607      	mov	r7, r0
 800901a:	460d      	mov	r5, r1
 800901c:	4614      	mov	r4, r2
 800901e:	d50e      	bpl.n	800903e <_svfiprintf_r+0x32>
 8009020:	690b      	ldr	r3, [r1, #16]
 8009022:	b963      	cbnz	r3, 800903e <_svfiprintf_r+0x32>
 8009024:	2140      	movs	r1, #64	; 0x40
 8009026:	f000 fb19 	bl	800965c <_malloc_r>
 800902a:	6028      	str	r0, [r5, #0]
 800902c:	6128      	str	r0, [r5, #16]
 800902e:	b920      	cbnz	r0, 800903a <_svfiprintf_r+0x2e>
 8009030:	230c      	movs	r3, #12
 8009032:	603b      	str	r3, [r7, #0]
 8009034:	f04f 30ff 	mov.w	r0, #4294967295
 8009038:	e0d1      	b.n	80091de <_svfiprintf_r+0x1d2>
 800903a:	2340      	movs	r3, #64	; 0x40
 800903c:	616b      	str	r3, [r5, #20]
 800903e:	2300      	movs	r3, #0
 8009040:	9309      	str	r3, [sp, #36]	; 0x24
 8009042:	2320      	movs	r3, #32
 8009044:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009048:	f8cd 800c 	str.w	r8, [sp, #12]
 800904c:	2330      	movs	r3, #48	; 0x30
 800904e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80091f8 <_svfiprintf_r+0x1ec>
 8009052:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009056:	f04f 0901 	mov.w	r9, #1
 800905a:	4623      	mov	r3, r4
 800905c:	469a      	mov	sl, r3
 800905e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009062:	b10a      	cbz	r2, 8009068 <_svfiprintf_r+0x5c>
 8009064:	2a25      	cmp	r2, #37	; 0x25
 8009066:	d1f9      	bne.n	800905c <_svfiprintf_r+0x50>
 8009068:	ebba 0b04 	subs.w	fp, sl, r4
 800906c:	d00b      	beq.n	8009086 <_svfiprintf_r+0x7a>
 800906e:	465b      	mov	r3, fp
 8009070:	4622      	mov	r2, r4
 8009072:	4629      	mov	r1, r5
 8009074:	4638      	mov	r0, r7
 8009076:	f7ff ff6d 	bl	8008f54 <__ssputs_r>
 800907a:	3001      	adds	r0, #1
 800907c:	f000 80aa 	beq.w	80091d4 <_svfiprintf_r+0x1c8>
 8009080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009082:	445a      	add	r2, fp
 8009084:	9209      	str	r2, [sp, #36]	; 0x24
 8009086:	f89a 3000 	ldrb.w	r3, [sl]
 800908a:	2b00      	cmp	r3, #0
 800908c:	f000 80a2 	beq.w	80091d4 <_svfiprintf_r+0x1c8>
 8009090:	2300      	movs	r3, #0
 8009092:	f04f 32ff 	mov.w	r2, #4294967295
 8009096:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800909a:	f10a 0a01 	add.w	sl, sl, #1
 800909e:	9304      	str	r3, [sp, #16]
 80090a0:	9307      	str	r3, [sp, #28]
 80090a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090a6:	931a      	str	r3, [sp, #104]	; 0x68
 80090a8:	4654      	mov	r4, sl
 80090aa:	2205      	movs	r2, #5
 80090ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090b0:	4851      	ldr	r0, [pc, #324]	; (80091f8 <_svfiprintf_r+0x1ec>)
 80090b2:	f7f7 f895 	bl	80001e0 <memchr>
 80090b6:	9a04      	ldr	r2, [sp, #16]
 80090b8:	b9d8      	cbnz	r0, 80090f2 <_svfiprintf_r+0xe6>
 80090ba:	06d0      	lsls	r0, r2, #27
 80090bc:	bf44      	itt	mi
 80090be:	2320      	movmi	r3, #32
 80090c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090c4:	0711      	lsls	r1, r2, #28
 80090c6:	bf44      	itt	mi
 80090c8:	232b      	movmi	r3, #43	; 0x2b
 80090ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090ce:	f89a 3000 	ldrb.w	r3, [sl]
 80090d2:	2b2a      	cmp	r3, #42	; 0x2a
 80090d4:	d015      	beq.n	8009102 <_svfiprintf_r+0xf6>
 80090d6:	9a07      	ldr	r2, [sp, #28]
 80090d8:	4654      	mov	r4, sl
 80090da:	2000      	movs	r0, #0
 80090dc:	f04f 0c0a 	mov.w	ip, #10
 80090e0:	4621      	mov	r1, r4
 80090e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090e6:	3b30      	subs	r3, #48	; 0x30
 80090e8:	2b09      	cmp	r3, #9
 80090ea:	d94e      	bls.n	800918a <_svfiprintf_r+0x17e>
 80090ec:	b1b0      	cbz	r0, 800911c <_svfiprintf_r+0x110>
 80090ee:	9207      	str	r2, [sp, #28]
 80090f0:	e014      	b.n	800911c <_svfiprintf_r+0x110>
 80090f2:	eba0 0308 	sub.w	r3, r0, r8
 80090f6:	fa09 f303 	lsl.w	r3, r9, r3
 80090fa:	4313      	orrs	r3, r2
 80090fc:	9304      	str	r3, [sp, #16]
 80090fe:	46a2      	mov	sl, r4
 8009100:	e7d2      	b.n	80090a8 <_svfiprintf_r+0x9c>
 8009102:	9b03      	ldr	r3, [sp, #12]
 8009104:	1d19      	adds	r1, r3, #4
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	9103      	str	r1, [sp, #12]
 800910a:	2b00      	cmp	r3, #0
 800910c:	bfbb      	ittet	lt
 800910e:	425b      	neglt	r3, r3
 8009110:	f042 0202 	orrlt.w	r2, r2, #2
 8009114:	9307      	strge	r3, [sp, #28]
 8009116:	9307      	strlt	r3, [sp, #28]
 8009118:	bfb8      	it	lt
 800911a:	9204      	strlt	r2, [sp, #16]
 800911c:	7823      	ldrb	r3, [r4, #0]
 800911e:	2b2e      	cmp	r3, #46	; 0x2e
 8009120:	d10c      	bne.n	800913c <_svfiprintf_r+0x130>
 8009122:	7863      	ldrb	r3, [r4, #1]
 8009124:	2b2a      	cmp	r3, #42	; 0x2a
 8009126:	d135      	bne.n	8009194 <_svfiprintf_r+0x188>
 8009128:	9b03      	ldr	r3, [sp, #12]
 800912a:	1d1a      	adds	r2, r3, #4
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	9203      	str	r2, [sp, #12]
 8009130:	2b00      	cmp	r3, #0
 8009132:	bfb8      	it	lt
 8009134:	f04f 33ff 	movlt.w	r3, #4294967295
 8009138:	3402      	adds	r4, #2
 800913a:	9305      	str	r3, [sp, #20]
 800913c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009208 <_svfiprintf_r+0x1fc>
 8009140:	7821      	ldrb	r1, [r4, #0]
 8009142:	2203      	movs	r2, #3
 8009144:	4650      	mov	r0, sl
 8009146:	f7f7 f84b 	bl	80001e0 <memchr>
 800914a:	b140      	cbz	r0, 800915e <_svfiprintf_r+0x152>
 800914c:	2340      	movs	r3, #64	; 0x40
 800914e:	eba0 000a 	sub.w	r0, r0, sl
 8009152:	fa03 f000 	lsl.w	r0, r3, r0
 8009156:	9b04      	ldr	r3, [sp, #16]
 8009158:	4303      	orrs	r3, r0
 800915a:	3401      	adds	r4, #1
 800915c:	9304      	str	r3, [sp, #16]
 800915e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009162:	4826      	ldr	r0, [pc, #152]	; (80091fc <_svfiprintf_r+0x1f0>)
 8009164:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009168:	2206      	movs	r2, #6
 800916a:	f7f7 f839 	bl	80001e0 <memchr>
 800916e:	2800      	cmp	r0, #0
 8009170:	d038      	beq.n	80091e4 <_svfiprintf_r+0x1d8>
 8009172:	4b23      	ldr	r3, [pc, #140]	; (8009200 <_svfiprintf_r+0x1f4>)
 8009174:	bb1b      	cbnz	r3, 80091be <_svfiprintf_r+0x1b2>
 8009176:	9b03      	ldr	r3, [sp, #12]
 8009178:	3307      	adds	r3, #7
 800917a:	f023 0307 	bic.w	r3, r3, #7
 800917e:	3308      	adds	r3, #8
 8009180:	9303      	str	r3, [sp, #12]
 8009182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009184:	4433      	add	r3, r6
 8009186:	9309      	str	r3, [sp, #36]	; 0x24
 8009188:	e767      	b.n	800905a <_svfiprintf_r+0x4e>
 800918a:	fb0c 3202 	mla	r2, ip, r2, r3
 800918e:	460c      	mov	r4, r1
 8009190:	2001      	movs	r0, #1
 8009192:	e7a5      	b.n	80090e0 <_svfiprintf_r+0xd4>
 8009194:	2300      	movs	r3, #0
 8009196:	3401      	adds	r4, #1
 8009198:	9305      	str	r3, [sp, #20]
 800919a:	4619      	mov	r1, r3
 800919c:	f04f 0c0a 	mov.w	ip, #10
 80091a0:	4620      	mov	r0, r4
 80091a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091a6:	3a30      	subs	r2, #48	; 0x30
 80091a8:	2a09      	cmp	r2, #9
 80091aa:	d903      	bls.n	80091b4 <_svfiprintf_r+0x1a8>
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d0c5      	beq.n	800913c <_svfiprintf_r+0x130>
 80091b0:	9105      	str	r1, [sp, #20]
 80091b2:	e7c3      	b.n	800913c <_svfiprintf_r+0x130>
 80091b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80091b8:	4604      	mov	r4, r0
 80091ba:	2301      	movs	r3, #1
 80091bc:	e7f0      	b.n	80091a0 <_svfiprintf_r+0x194>
 80091be:	ab03      	add	r3, sp, #12
 80091c0:	9300      	str	r3, [sp, #0]
 80091c2:	462a      	mov	r2, r5
 80091c4:	4b0f      	ldr	r3, [pc, #60]	; (8009204 <_svfiprintf_r+0x1f8>)
 80091c6:	a904      	add	r1, sp, #16
 80091c8:	4638      	mov	r0, r7
 80091ca:	f3af 8000 	nop.w
 80091ce:	1c42      	adds	r2, r0, #1
 80091d0:	4606      	mov	r6, r0
 80091d2:	d1d6      	bne.n	8009182 <_svfiprintf_r+0x176>
 80091d4:	89ab      	ldrh	r3, [r5, #12]
 80091d6:	065b      	lsls	r3, r3, #25
 80091d8:	f53f af2c 	bmi.w	8009034 <_svfiprintf_r+0x28>
 80091dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091de:	b01d      	add	sp, #116	; 0x74
 80091e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091e4:	ab03      	add	r3, sp, #12
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	462a      	mov	r2, r5
 80091ea:	4b06      	ldr	r3, [pc, #24]	; (8009204 <_svfiprintf_r+0x1f8>)
 80091ec:	a904      	add	r1, sp, #16
 80091ee:	4638      	mov	r0, r7
 80091f0:	f000 f87a 	bl	80092e8 <_printf_i>
 80091f4:	e7eb      	b.n	80091ce <_svfiprintf_r+0x1c2>
 80091f6:	bf00      	nop
 80091f8:	08009894 	.word	0x08009894
 80091fc:	0800989e 	.word	0x0800989e
 8009200:	00000000 	.word	0x00000000
 8009204:	08008f55 	.word	0x08008f55
 8009208:	0800989a 	.word	0x0800989a

0800920c <_printf_common>:
 800920c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009210:	4616      	mov	r6, r2
 8009212:	4699      	mov	r9, r3
 8009214:	688a      	ldr	r2, [r1, #8]
 8009216:	690b      	ldr	r3, [r1, #16]
 8009218:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800921c:	4293      	cmp	r3, r2
 800921e:	bfb8      	it	lt
 8009220:	4613      	movlt	r3, r2
 8009222:	6033      	str	r3, [r6, #0]
 8009224:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009228:	4607      	mov	r7, r0
 800922a:	460c      	mov	r4, r1
 800922c:	b10a      	cbz	r2, 8009232 <_printf_common+0x26>
 800922e:	3301      	adds	r3, #1
 8009230:	6033      	str	r3, [r6, #0]
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	0699      	lsls	r1, r3, #26
 8009236:	bf42      	ittt	mi
 8009238:	6833      	ldrmi	r3, [r6, #0]
 800923a:	3302      	addmi	r3, #2
 800923c:	6033      	strmi	r3, [r6, #0]
 800923e:	6825      	ldr	r5, [r4, #0]
 8009240:	f015 0506 	ands.w	r5, r5, #6
 8009244:	d106      	bne.n	8009254 <_printf_common+0x48>
 8009246:	f104 0a19 	add.w	sl, r4, #25
 800924a:	68e3      	ldr	r3, [r4, #12]
 800924c:	6832      	ldr	r2, [r6, #0]
 800924e:	1a9b      	subs	r3, r3, r2
 8009250:	42ab      	cmp	r3, r5
 8009252:	dc26      	bgt.n	80092a2 <_printf_common+0x96>
 8009254:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009258:	1e13      	subs	r3, r2, #0
 800925a:	6822      	ldr	r2, [r4, #0]
 800925c:	bf18      	it	ne
 800925e:	2301      	movne	r3, #1
 8009260:	0692      	lsls	r2, r2, #26
 8009262:	d42b      	bmi.n	80092bc <_printf_common+0xb0>
 8009264:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009268:	4649      	mov	r1, r9
 800926a:	4638      	mov	r0, r7
 800926c:	47c0      	blx	r8
 800926e:	3001      	adds	r0, #1
 8009270:	d01e      	beq.n	80092b0 <_printf_common+0xa4>
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	68e5      	ldr	r5, [r4, #12]
 8009276:	6832      	ldr	r2, [r6, #0]
 8009278:	f003 0306 	and.w	r3, r3, #6
 800927c:	2b04      	cmp	r3, #4
 800927e:	bf08      	it	eq
 8009280:	1aad      	subeq	r5, r5, r2
 8009282:	68a3      	ldr	r3, [r4, #8]
 8009284:	6922      	ldr	r2, [r4, #16]
 8009286:	bf0c      	ite	eq
 8009288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800928c:	2500      	movne	r5, #0
 800928e:	4293      	cmp	r3, r2
 8009290:	bfc4      	itt	gt
 8009292:	1a9b      	subgt	r3, r3, r2
 8009294:	18ed      	addgt	r5, r5, r3
 8009296:	2600      	movs	r6, #0
 8009298:	341a      	adds	r4, #26
 800929a:	42b5      	cmp	r5, r6
 800929c:	d11a      	bne.n	80092d4 <_printf_common+0xc8>
 800929e:	2000      	movs	r0, #0
 80092a0:	e008      	b.n	80092b4 <_printf_common+0xa8>
 80092a2:	2301      	movs	r3, #1
 80092a4:	4652      	mov	r2, sl
 80092a6:	4649      	mov	r1, r9
 80092a8:	4638      	mov	r0, r7
 80092aa:	47c0      	blx	r8
 80092ac:	3001      	adds	r0, #1
 80092ae:	d103      	bne.n	80092b8 <_printf_common+0xac>
 80092b0:	f04f 30ff 	mov.w	r0, #4294967295
 80092b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b8:	3501      	adds	r5, #1
 80092ba:	e7c6      	b.n	800924a <_printf_common+0x3e>
 80092bc:	18e1      	adds	r1, r4, r3
 80092be:	1c5a      	adds	r2, r3, #1
 80092c0:	2030      	movs	r0, #48	; 0x30
 80092c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092c6:	4422      	add	r2, r4
 80092c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092d0:	3302      	adds	r3, #2
 80092d2:	e7c7      	b.n	8009264 <_printf_common+0x58>
 80092d4:	2301      	movs	r3, #1
 80092d6:	4622      	mov	r2, r4
 80092d8:	4649      	mov	r1, r9
 80092da:	4638      	mov	r0, r7
 80092dc:	47c0      	blx	r8
 80092de:	3001      	adds	r0, #1
 80092e0:	d0e6      	beq.n	80092b0 <_printf_common+0xa4>
 80092e2:	3601      	adds	r6, #1
 80092e4:	e7d9      	b.n	800929a <_printf_common+0x8e>
	...

080092e8 <_printf_i>:
 80092e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092ec:	7e0f      	ldrb	r7, [r1, #24]
 80092ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092f0:	2f78      	cmp	r7, #120	; 0x78
 80092f2:	4691      	mov	r9, r2
 80092f4:	4680      	mov	r8, r0
 80092f6:	460c      	mov	r4, r1
 80092f8:	469a      	mov	sl, r3
 80092fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80092fe:	d807      	bhi.n	8009310 <_printf_i+0x28>
 8009300:	2f62      	cmp	r7, #98	; 0x62
 8009302:	d80a      	bhi.n	800931a <_printf_i+0x32>
 8009304:	2f00      	cmp	r7, #0
 8009306:	f000 80d8 	beq.w	80094ba <_printf_i+0x1d2>
 800930a:	2f58      	cmp	r7, #88	; 0x58
 800930c:	f000 80a3 	beq.w	8009456 <_printf_i+0x16e>
 8009310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009314:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009318:	e03a      	b.n	8009390 <_printf_i+0xa8>
 800931a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800931e:	2b15      	cmp	r3, #21
 8009320:	d8f6      	bhi.n	8009310 <_printf_i+0x28>
 8009322:	a101      	add	r1, pc, #4	; (adr r1, 8009328 <_printf_i+0x40>)
 8009324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009328:	08009381 	.word	0x08009381
 800932c:	08009395 	.word	0x08009395
 8009330:	08009311 	.word	0x08009311
 8009334:	08009311 	.word	0x08009311
 8009338:	08009311 	.word	0x08009311
 800933c:	08009311 	.word	0x08009311
 8009340:	08009395 	.word	0x08009395
 8009344:	08009311 	.word	0x08009311
 8009348:	08009311 	.word	0x08009311
 800934c:	08009311 	.word	0x08009311
 8009350:	08009311 	.word	0x08009311
 8009354:	080094a1 	.word	0x080094a1
 8009358:	080093c5 	.word	0x080093c5
 800935c:	08009483 	.word	0x08009483
 8009360:	08009311 	.word	0x08009311
 8009364:	08009311 	.word	0x08009311
 8009368:	080094c3 	.word	0x080094c3
 800936c:	08009311 	.word	0x08009311
 8009370:	080093c5 	.word	0x080093c5
 8009374:	08009311 	.word	0x08009311
 8009378:	08009311 	.word	0x08009311
 800937c:	0800948b 	.word	0x0800948b
 8009380:	682b      	ldr	r3, [r5, #0]
 8009382:	1d1a      	adds	r2, r3, #4
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	602a      	str	r2, [r5, #0]
 8009388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800938c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009390:	2301      	movs	r3, #1
 8009392:	e0a3      	b.n	80094dc <_printf_i+0x1f4>
 8009394:	6820      	ldr	r0, [r4, #0]
 8009396:	6829      	ldr	r1, [r5, #0]
 8009398:	0606      	lsls	r6, r0, #24
 800939a:	f101 0304 	add.w	r3, r1, #4
 800939e:	d50a      	bpl.n	80093b6 <_printf_i+0xce>
 80093a0:	680e      	ldr	r6, [r1, #0]
 80093a2:	602b      	str	r3, [r5, #0]
 80093a4:	2e00      	cmp	r6, #0
 80093a6:	da03      	bge.n	80093b0 <_printf_i+0xc8>
 80093a8:	232d      	movs	r3, #45	; 0x2d
 80093aa:	4276      	negs	r6, r6
 80093ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093b0:	485e      	ldr	r0, [pc, #376]	; (800952c <_printf_i+0x244>)
 80093b2:	230a      	movs	r3, #10
 80093b4:	e019      	b.n	80093ea <_printf_i+0x102>
 80093b6:	680e      	ldr	r6, [r1, #0]
 80093b8:	602b      	str	r3, [r5, #0]
 80093ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80093be:	bf18      	it	ne
 80093c0:	b236      	sxthne	r6, r6
 80093c2:	e7ef      	b.n	80093a4 <_printf_i+0xbc>
 80093c4:	682b      	ldr	r3, [r5, #0]
 80093c6:	6820      	ldr	r0, [r4, #0]
 80093c8:	1d19      	adds	r1, r3, #4
 80093ca:	6029      	str	r1, [r5, #0]
 80093cc:	0601      	lsls	r1, r0, #24
 80093ce:	d501      	bpl.n	80093d4 <_printf_i+0xec>
 80093d0:	681e      	ldr	r6, [r3, #0]
 80093d2:	e002      	b.n	80093da <_printf_i+0xf2>
 80093d4:	0646      	lsls	r6, r0, #25
 80093d6:	d5fb      	bpl.n	80093d0 <_printf_i+0xe8>
 80093d8:	881e      	ldrh	r6, [r3, #0]
 80093da:	4854      	ldr	r0, [pc, #336]	; (800952c <_printf_i+0x244>)
 80093dc:	2f6f      	cmp	r7, #111	; 0x6f
 80093de:	bf0c      	ite	eq
 80093e0:	2308      	moveq	r3, #8
 80093e2:	230a      	movne	r3, #10
 80093e4:	2100      	movs	r1, #0
 80093e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093ea:	6865      	ldr	r5, [r4, #4]
 80093ec:	60a5      	str	r5, [r4, #8]
 80093ee:	2d00      	cmp	r5, #0
 80093f0:	bfa2      	ittt	ge
 80093f2:	6821      	ldrge	r1, [r4, #0]
 80093f4:	f021 0104 	bicge.w	r1, r1, #4
 80093f8:	6021      	strge	r1, [r4, #0]
 80093fa:	b90e      	cbnz	r6, 8009400 <_printf_i+0x118>
 80093fc:	2d00      	cmp	r5, #0
 80093fe:	d04d      	beq.n	800949c <_printf_i+0x1b4>
 8009400:	4615      	mov	r5, r2
 8009402:	fbb6 f1f3 	udiv	r1, r6, r3
 8009406:	fb03 6711 	mls	r7, r3, r1, r6
 800940a:	5dc7      	ldrb	r7, [r0, r7]
 800940c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009410:	4637      	mov	r7, r6
 8009412:	42bb      	cmp	r3, r7
 8009414:	460e      	mov	r6, r1
 8009416:	d9f4      	bls.n	8009402 <_printf_i+0x11a>
 8009418:	2b08      	cmp	r3, #8
 800941a:	d10b      	bne.n	8009434 <_printf_i+0x14c>
 800941c:	6823      	ldr	r3, [r4, #0]
 800941e:	07de      	lsls	r6, r3, #31
 8009420:	d508      	bpl.n	8009434 <_printf_i+0x14c>
 8009422:	6923      	ldr	r3, [r4, #16]
 8009424:	6861      	ldr	r1, [r4, #4]
 8009426:	4299      	cmp	r1, r3
 8009428:	bfde      	ittt	le
 800942a:	2330      	movle	r3, #48	; 0x30
 800942c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009430:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009434:	1b52      	subs	r2, r2, r5
 8009436:	6122      	str	r2, [r4, #16]
 8009438:	f8cd a000 	str.w	sl, [sp]
 800943c:	464b      	mov	r3, r9
 800943e:	aa03      	add	r2, sp, #12
 8009440:	4621      	mov	r1, r4
 8009442:	4640      	mov	r0, r8
 8009444:	f7ff fee2 	bl	800920c <_printf_common>
 8009448:	3001      	adds	r0, #1
 800944a:	d14c      	bne.n	80094e6 <_printf_i+0x1fe>
 800944c:	f04f 30ff 	mov.w	r0, #4294967295
 8009450:	b004      	add	sp, #16
 8009452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009456:	4835      	ldr	r0, [pc, #212]	; (800952c <_printf_i+0x244>)
 8009458:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800945c:	6829      	ldr	r1, [r5, #0]
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	f851 6b04 	ldr.w	r6, [r1], #4
 8009464:	6029      	str	r1, [r5, #0]
 8009466:	061d      	lsls	r5, r3, #24
 8009468:	d514      	bpl.n	8009494 <_printf_i+0x1ac>
 800946a:	07df      	lsls	r7, r3, #31
 800946c:	bf44      	itt	mi
 800946e:	f043 0320 	orrmi.w	r3, r3, #32
 8009472:	6023      	strmi	r3, [r4, #0]
 8009474:	b91e      	cbnz	r6, 800947e <_printf_i+0x196>
 8009476:	6823      	ldr	r3, [r4, #0]
 8009478:	f023 0320 	bic.w	r3, r3, #32
 800947c:	6023      	str	r3, [r4, #0]
 800947e:	2310      	movs	r3, #16
 8009480:	e7b0      	b.n	80093e4 <_printf_i+0xfc>
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	f043 0320 	orr.w	r3, r3, #32
 8009488:	6023      	str	r3, [r4, #0]
 800948a:	2378      	movs	r3, #120	; 0x78
 800948c:	4828      	ldr	r0, [pc, #160]	; (8009530 <_printf_i+0x248>)
 800948e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009492:	e7e3      	b.n	800945c <_printf_i+0x174>
 8009494:	0659      	lsls	r1, r3, #25
 8009496:	bf48      	it	mi
 8009498:	b2b6      	uxthmi	r6, r6
 800949a:	e7e6      	b.n	800946a <_printf_i+0x182>
 800949c:	4615      	mov	r5, r2
 800949e:	e7bb      	b.n	8009418 <_printf_i+0x130>
 80094a0:	682b      	ldr	r3, [r5, #0]
 80094a2:	6826      	ldr	r6, [r4, #0]
 80094a4:	6961      	ldr	r1, [r4, #20]
 80094a6:	1d18      	adds	r0, r3, #4
 80094a8:	6028      	str	r0, [r5, #0]
 80094aa:	0635      	lsls	r5, r6, #24
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	d501      	bpl.n	80094b4 <_printf_i+0x1cc>
 80094b0:	6019      	str	r1, [r3, #0]
 80094b2:	e002      	b.n	80094ba <_printf_i+0x1d2>
 80094b4:	0670      	lsls	r0, r6, #25
 80094b6:	d5fb      	bpl.n	80094b0 <_printf_i+0x1c8>
 80094b8:	8019      	strh	r1, [r3, #0]
 80094ba:	2300      	movs	r3, #0
 80094bc:	6123      	str	r3, [r4, #16]
 80094be:	4615      	mov	r5, r2
 80094c0:	e7ba      	b.n	8009438 <_printf_i+0x150>
 80094c2:	682b      	ldr	r3, [r5, #0]
 80094c4:	1d1a      	adds	r2, r3, #4
 80094c6:	602a      	str	r2, [r5, #0]
 80094c8:	681d      	ldr	r5, [r3, #0]
 80094ca:	6862      	ldr	r2, [r4, #4]
 80094cc:	2100      	movs	r1, #0
 80094ce:	4628      	mov	r0, r5
 80094d0:	f7f6 fe86 	bl	80001e0 <memchr>
 80094d4:	b108      	cbz	r0, 80094da <_printf_i+0x1f2>
 80094d6:	1b40      	subs	r0, r0, r5
 80094d8:	6060      	str	r0, [r4, #4]
 80094da:	6863      	ldr	r3, [r4, #4]
 80094dc:	6123      	str	r3, [r4, #16]
 80094de:	2300      	movs	r3, #0
 80094e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094e4:	e7a8      	b.n	8009438 <_printf_i+0x150>
 80094e6:	6923      	ldr	r3, [r4, #16]
 80094e8:	462a      	mov	r2, r5
 80094ea:	4649      	mov	r1, r9
 80094ec:	4640      	mov	r0, r8
 80094ee:	47d0      	blx	sl
 80094f0:	3001      	adds	r0, #1
 80094f2:	d0ab      	beq.n	800944c <_printf_i+0x164>
 80094f4:	6823      	ldr	r3, [r4, #0]
 80094f6:	079b      	lsls	r3, r3, #30
 80094f8:	d413      	bmi.n	8009522 <_printf_i+0x23a>
 80094fa:	68e0      	ldr	r0, [r4, #12]
 80094fc:	9b03      	ldr	r3, [sp, #12]
 80094fe:	4298      	cmp	r0, r3
 8009500:	bfb8      	it	lt
 8009502:	4618      	movlt	r0, r3
 8009504:	e7a4      	b.n	8009450 <_printf_i+0x168>
 8009506:	2301      	movs	r3, #1
 8009508:	4632      	mov	r2, r6
 800950a:	4649      	mov	r1, r9
 800950c:	4640      	mov	r0, r8
 800950e:	47d0      	blx	sl
 8009510:	3001      	adds	r0, #1
 8009512:	d09b      	beq.n	800944c <_printf_i+0x164>
 8009514:	3501      	adds	r5, #1
 8009516:	68e3      	ldr	r3, [r4, #12]
 8009518:	9903      	ldr	r1, [sp, #12]
 800951a:	1a5b      	subs	r3, r3, r1
 800951c:	42ab      	cmp	r3, r5
 800951e:	dcf2      	bgt.n	8009506 <_printf_i+0x21e>
 8009520:	e7eb      	b.n	80094fa <_printf_i+0x212>
 8009522:	2500      	movs	r5, #0
 8009524:	f104 0619 	add.w	r6, r4, #25
 8009528:	e7f5      	b.n	8009516 <_printf_i+0x22e>
 800952a:	bf00      	nop
 800952c:	080098a5 	.word	0x080098a5
 8009530:	080098b6 	.word	0x080098b6

08009534 <memcpy>:
 8009534:	440a      	add	r2, r1
 8009536:	4291      	cmp	r1, r2
 8009538:	f100 33ff 	add.w	r3, r0, #4294967295
 800953c:	d100      	bne.n	8009540 <memcpy+0xc>
 800953e:	4770      	bx	lr
 8009540:	b510      	push	{r4, lr}
 8009542:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009546:	f803 4f01 	strb.w	r4, [r3, #1]!
 800954a:	4291      	cmp	r1, r2
 800954c:	d1f9      	bne.n	8009542 <memcpy+0xe>
 800954e:	bd10      	pop	{r4, pc}

08009550 <memmove>:
 8009550:	4288      	cmp	r0, r1
 8009552:	b510      	push	{r4, lr}
 8009554:	eb01 0402 	add.w	r4, r1, r2
 8009558:	d902      	bls.n	8009560 <memmove+0x10>
 800955a:	4284      	cmp	r4, r0
 800955c:	4623      	mov	r3, r4
 800955e:	d807      	bhi.n	8009570 <memmove+0x20>
 8009560:	1e43      	subs	r3, r0, #1
 8009562:	42a1      	cmp	r1, r4
 8009564:	d008      	beq.n	8009578 <memmove+0x28>
 8009566:	f811 2b01 	ldrb.w	r2, [r1], #1
 800956a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800956e:	e7f8      	b.n	8009562 <memmove+0x12>
 8009570:	4402      	add	r2, r0
 8009572:	4601      	mov	r1, r0
 8009574:	428a      	cmp	r2, r1
 8009576:	d100      	bne.n	800957a <memmove+0x2a>
 8009578:	bd10      	pop	{r4, pc}
 800957a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800957e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009582:	e7f7      	b.n	8009574 <memmove+0x24>

08009584 <_free_r>:
 8009584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009586:	2900      	cmp	r1, #0
 8009588:	d044      	beq.n	8009614 <_free_r+0x90>
 800958a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800958e:	9001      	str	r0, [sp, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	f1a1 0404 	sub.w	r4, r1, #4
 8009596:	bfb8      	it	lt
 8009598:	18e4      	addlt	r4, r4, r3
 800959a:	f000 f913 	bl	80097c4 <__malloc_lock>
 800959e:	4a1e      	ldr	r2, [pc, #120]	; (8009618 <_free_r+0x94>)
 80095a0:	9801      	ldr	r0, [sp, #4]
 80095a2:	6813      	ldr	r3, [r2, #0]
 80095a4:	b933      	cbnz	r3, 80095b4 <_free_r+0x30>
 80095a6:	6063      	str	r3, [r4, #4]
 80095a8:	6014      	str	r4, [r2, #0]
 80095aa:	b003      	add	sp, #12
 80095ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095b0:	f000 b90e 	b.w	80097d0 <__malloc_unlock>
 80095b4:	42a3      	cmp	r3, r4
 80095b6:	d908      	bls.n	80095ca <_free_r+0x46>
 80095b8:	6825      	ldr	r5, [r4, #0]
 80095ba:	1961      	adds	r1, r4, r5
 80095bc:	428b      	cmp	r3, r1
 80095be:	bf01      	itttt	eq
 80095c0:	6819      	ldreq	r1, [r3, #0]
 80095c2:	685b      	ldreq	r3, [r3, #4]
 80095c4:	1949      	addeq	r1, r1, r5
 80095c6:	6021      	streq	r1, [r4, #0]
 80095c8:	e7ed      	b.n	80095a6 <_free_r+0x22>
 80095ca:	461a      	mov	r2, r3
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	b10b      	cbz	r3, 80095d4 <_free_r+0x50>
 80095d0:	42a3      	cmp	r3, r4
 80095d2:	d9fa      	bls.n	80095ca <_free_r+0x46>
 80095d4:	6811      	ldr	r1, [r2, #0]
 80095d6:	1855      	adds	r5, r2, r1
 80095d8:	42a5      	cmp	r5, r4
 80095da:	d10b      	bne.n	80095f4 <_free_r+0x70>
 80095dc:	6824      	ldr	r4, [r4, #0]
 80095de:	4421      	add	r1, r4
 80095e0:	1854      	adds	r4, r2, r1
 80095e2:	42a3      	cmp	r3, r4
 80095e4:	6011      	str	r1, [r2, #0]
 80095e6:	d1e0      	bne.n	80095aa <_free_r+0x26>
 80095e8:	681c      	ldr	r4, [r3, #0]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	6053      	str	r3, [r2, #4]
 80095ee:	4421      	add	r1, r4
 80095f0:	6011      	str	r1, [r2, #0]
 80095f2:	e7da      	b.n	80095aa <_free_r+0x26>
 80095f4:	d902      	bls.n	80095fc <_free_r+0x78>
 80095f6:	230c      	movs	r3, #12
 80095f8:	6003      	str	r3, [r0, #0]
 80095fa:	e7d6      	b.n	80095aa <_free_r+0x26>
 80095fc:	6825      	ldr	r5, [r4, #0]
 80095fe:	1961      	adds	r1, r4, r5
 8009600:	428b      	cmp	r3, r1
 8009602:	bf04      	itt	eq
 8009604:	6819      	ldreq	r1, [r3, #0]
 8009606:	685b      	ldreq	r3, [r3, #4]
 8009608:	6063      	str	r3, [r4, #4]
 800960a:	bf04      	itt	eq
 800960c:	1949      	addeq	r1, r1, r5
 800960e:	6021      	streq	r1, [r4, #0]
 8009610:	6054      	str	r4, [r2, #4]
 8009612:	e7ca      	b.n	80095aa <_free_r+0x26>
 8009614:	b003      	add	sp, #12
 8009616:	bd30      	pop	{r4, r5, pc}
 8009618:	20001f90 	.word	0x20001f90

0800961c <sbrk_aligned>:
 800961c:	b570      	push	{r4, r5, r6, lr}
 800961e:	4e0e      	ldr	r6, [pc, #56]	; (8009658 <sbrk_aligned+0x3c>)
 8009620:	460c      	mov	r4, r1
 8009622:	6831      	ldr	r1, [r6, #0]
 8009624:	4605      	mov	r5, r0
 8009626:	b911      	cbnz	r1, 800962e <sbrk_aligned+0x12>
 8009628:	f000 f8bc 	bl	80097a4 <_sbrk_r>
 800962c:	6030      	str	r0, [r6, #0]
 800962e:	4621      	mov	r1, r4
 8009630:	4628      	mov	r0, r5
 8009632:	f000 f8b7 	bl	80097a4 <_sbrk_r>
 8009636:	1c43      	adds	r3, r0, #1
 8009638:	d00a      	beq.n	8009650 <sbrk_aligned+0x34>
 800963a:	1cc4      	adds	r4, r0, #3
 800963c:	f024 0403 	bic.w	r4, r4, #3
 8009640:	42a0      	cmp	r0, r4
 8009642:	d007      	beq.n	8009654 <sbrk_aligned+0x38>
 8009644:	1a21      	subs	r1, r4, r0
 8009646:	4628      	mov	r0, r5
 8009648:	f000 f8ac 	bl	80097a4 <_sbrk_r>
 800964c:	3001      	adds	r0, #1
 800964e:	d101      	bne.n	8009654 <sbrk_aligned+0x38>
 8009650:	f04f 34ff 	mov.w	r4, #4294967295
 8009654:	4620      	mov	r0, r4
 8009656:	bd70      	pop	{r4, r5, r6, pc}
 8009658:	20001f94 	.word	0x20001f94

0800965c <_malloc_r>:
 800965c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009660:	1ccd      	adds	r5, r1, #3
 8009662:	f025 0503 	bic.w	r5, r5, #3
 8009666:	3508      	adds	r5, #8
 8009668:	2d0c      	cmp	r5, #12
 800966a:	bf38      	it	cc
 800966c:	250c      	movcc	r5, #12
 800966e:	2d00      	cmp	r5, #0
 8009670:	4607      	mov	r7, r0
 8009672:	db01      	blt.n	8009678 <_malloc_r+0x1c>
 8009674:	42a9      	cmp	r1, r5
 8009676:	d905      	bls.n	8009684 <_malloc_r+0x28>
 8009678:	230c      	movs	r3, #12
 800967a:	603b      	str	r3, [r7, #0]
 800967c:	2600      	movs	r6, #0
 800967e:	4630      	mov	r0, r6
 8009680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009684:	4e2e      	ldr	r6, [pc, #184]	; (8009740 <_malloc_r+0xe4>)
 8009686:	f000 f89d 	bl	80097c4 <__malloc_lock>
 800968a:	6833      	ldr	r3, [r6, #0]
 800968c:	461c      	mov	r4, r3
 800968e:	bb34      	cbnz	r4, 80096de <_malloc_r+0x82>
 8009690:	4629      	mov	r1, r5
 8009692:	4638      	mov	r0, r7
 8009694:	f7ff ffc2 	bl	800961c <sbrk_aligned>
 8009698:	1c43      	adds	r3, r0, #1
 800969a:	4604      	mov	r4, r0
 800969c:	d14d      	bne.n	800973a <_malloc_r+0xde>
 800969e:	6834      	ldr	r4, [r6, #0]
 80096a0:	4626      	mov	r6, r4
 80096a2:	2e00      	cmp	r6, #0
 80096a4:	d140      	bne.n	8009728 <_malloc_r+0xcc>
 80096a6:	6823      	ldr	r3, [r4, #0]
 80096a8:	4631      	mov	r1, r6
 80096aa:	4638      	mov	r0, r7
 80096ac:	eb04 0803 	add.w	r8, r4, r3
 80096b0:	f000 f878 	bl	80097a4 <_sbrk_r>
 80096b4:	4580      	cmp	r8, r0
 80096b6:	d13a      	bne.n	800972e <_malloc_r+0xd2>
 80096b8:	6821      	ldr	r1, [r4, #0]
 80096ba:	3503      	adds	r5, #3
 80096bc:	1a6d      	subs	r5, r5, r1
 80096be:	f025 0503 	bic.w	r5, r5, #3
 80096c2:	3508      	adds	r5, #8
 80096c4:	2d0c      	cmp	r5, #12
 80096c6:	bf38      	it	cc
 80096c8:	250c      	movcc	r5, #12
 80096ca:	4629      	mov	r1, r5
 80096cc:	4638      	mov	r0, r7
 80096ce:	f7ff ffa5 	bl	800961c <sbrk_aligned>
 80096d2:	3001      	adds	r0, #1
 80096d4:	d02b      	beq.n	800972e <_malloc_r+0xd2>
 80096d6:	6823      	ldr	r3, [r4, #0]
 80096d8:	442b      	add	r3, r5
 80096da:	6023      	str	r3, [r4, #0]
 80096dc:	e00e      	b.n	80096fc <_malloc_r+0xa0>
 80096de:	6822      	ldr	r2, [r4, #0]
 80096e0:	1b52      	subs	r2, r2, r5
 80096e2:	d41e      	bmi.n	8009722 <_malloc_r+0xc6>
 80096e4:	2a0b      	cmp	r2, #11
 80096e6:	d916      	bls.n	8009716 <_malloc_r+0xba>
 80096e8:	1961      	adds	r1, r4, r5
 80096ea:	42a3      	cmp	r3, r4
 80096ec:	6025      	str	r5, [r4, #0]
 80096ee:	bf18      	it	ne
 80096f0:	6059      	strne	r1, [r3, #4]
 80096f2:	6863      	ldr	r3, [r4, #4]
 80096f4:	bf08      	it	eq
 80096f6:	6031      	streq	r1, [r6, #0]
 80096f8:	5162      	str	r2, [r4, r5]
 80096fa:	604b      	str	r3, [r1, #4]
 80096fc:	4638      	mov	r0, r7
 80096fe:	f104 060b 	add.w	r6, r4, #11
 8009702:	f000 f865 	bl	80097d0 <__malloc_unlock>
 8009706:	f026 0607 	bic.w	r6, r6, #7
 800970a:	1d23      	adds	r3, r4, #4
 800970c:	1af2      	subs	r2, r6, r3
 800970e:	d0b6      	beq.n	800967e <_malloc_r+0x22>
 8009710:	1b9b      	subs	r3, r3, r6
 8009712:	50a3      	str	r3, [r4, r2]
 8009714:	e7b3      	b.n	800967e <_malloc_r+0x22>
 8009716:	6862      	ldr	r2, [r4, #4]
 8009718:	42a3      	cmp	r3, r4
 800971a:	bf0c      	ite	eq
 800971c:	6032      	streq	r2, [r6, #0]
 800971e:	605a      	strne	r2, [r3, #4]
 8009720:	e7ec      	b.n	80096fc <_malloc_r+0xa0>
 8009722:	4623      	mov	r3, r4
 8009724:	6864      	ldr	r4, [r4, #4]
 8009726:	e7b2      	b.n	800968e <_malloc_r+0x32>
 8009728:	4634      	mov	r4, r6
 800972a:	6876      	ldr	r6, [r6, #4]
 800972c:	e7b9      	b.n	80096a2 <_malloc_r+0x46>
 800972e:	230c      	movs	r3, #12
 8009730:	603b      	str	r3, [r7, #0]
 8009732:	4638      	mov	r0, r7
 8009734:	f000 f84c 	bl	80097d0 <__malloc_unlock>
 8009738:	e7a1      	b.n	800967e <_malloc_r+0x22>
 800973a:	6025      	str	r5, [r4, #0]
 800973c:	e7de      	b.n	80096fc <_malloc_r+0xa0>
 800973e:	bf00      	nop
 8009740:	20001f90 	.word	0x20001f90

08009744 <_realloc_r>:
 8009744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009748:	4680      	mov	r8, r0
 800974a:	4614      	mov	r4, r2
 800974c:	460e      	mov	r6, r1
 800974e:	b921      	cbnz	r1, 800975a <_realloc_r+0x16>
 8009750:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009754:	4611      	mov	r1, r2
 8009756:	f7ff bf81 	b.w	800965c <_malloc_r>
 800975a:	b92a      	cbnz	r2, 8009768 <_realloc_r+0x24>
 800975c:	f7ff ff12 	bl	8009584 <_free_r>
 8009760:	4625      	mov	r5, r4
 8009762:	4628      	mov	r0, r5
 8009764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009768:	f000 f838 	bl	80097dc <_malloc_usable_size_r>
 800976c:	4284      	cmp	r4, r0
 800976e:	4607      	mov	r7, r0
 8009770:	d802      	bhi.n	8009778 <_realloc_r+0x34>
 8009772:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009776:	d812      	bhi.n	800979e <_realloc_r+0x5a>
 8009778:	4621      	mov	r1, r4
 800977a:	4640      	mov	r0, r8
 800977c:	f7ff ff6e 	bl	800965c <_malloc_r>
 8009780:	4605      	mov	r5, r0
 8009782:	2800      	cmp	r0, #0
 8009784:	d0ed      	beq.n	8009762 <_realloc_r+0x1e>
 8009786:	42bc      	cmp	r4, r7
 8009788:	4622      	mov	r2, r4
 800978a:	4631      	mov	r1, r6
 800978c:	bf28      	it	cs
 800978e:	463a      	movcs	r2, r7
 8009790:	f7ff fed0 	bl	8009534 <memcpy>
 8009794:	4631      	mov	r1, r6
 8009796:	4640      	mov	r0, r8
 8009798:	f7ff fef4 	bl	8009584 <_free_r>
 800979c:	e7e1      	b.n	8009762 <_realloc_r+0x1e>
 800979e:	4635      	mov	r5, r6
 80097a0:	e7df      	b.n	8009762 <_realloc_r+0x1e>
	...

080097a4 <_sbrk_r>:
 80097a4:	b538      	push	{r3, r4, r5, lr}
 80097a6:	4d06      	ldr	r5, [pc, #24]	; (80097c0 <_sbrk_r+0x1c>)
 80097a8:	2300      	movs	r3, #0
 80097aa:	4604      	mov	r4, r0
 80097ac:	4608      	mov	r0, r1
 80097ae:	602b      	str	r3, [r5, #0]
 80097b0:	f7f7 fad2 	bl	8000d58 <_sbrk>
 80097b4:	1c43      	adds	r3, r0, #1
 80097b6:	d102      	bne.n	80097be <_sbrk_r+0x1a>
 80097b8:	682b      	ldr	r3, [r5, #0]
 80097ba:	b103      	cbz	r3, 80097be <_sbrk_r+0x1a>
 80097bc:	6023      	str	r3, [r4, #0]
 80097be:	bd38      	pop	{r3, r4, r5, pc}
 80097c0:	20001f98 	.word	0x20001f98

080097c4 <__malloc_lock>:
 80097c4:	4801      	ldr	r0, [pc, #4]	; (80097cc <__malloc_lock+0x8>)
 80097c6:	f000 b811 	b.w	80097ec <__retarget_lock_acquire_recursive>
 80097ca:	bf00      	nop
 80097cc:	20001f9c 	.word	0x20001f9c

080097d0 <__malloc_unlock>:
 80097d0:	4801      	ldr	r0, [pc, #4]	; (80097d8 <__malloc_unlock+0x8>)
 80097d2:	f000 b80c 	b.w	80097ee <__retarget_lock_release_recursive>
 80097d6:	bf00      	nop
 80097d8:	20001f9c 	.word	0x20001f9c

080097dc <_malloc_usable_size_r>:
 80097dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097e0:	1f18      	subs	r0, r3, #4
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	bfbc      	itt	lt
 80097e6:	580b      	ldrlt	r3, [r1, r0]
 80097e8:	18c0      	addlt	r0, r0, r3
 80097ea:	4770      	bx	lr

080097ec <__retarget_lock_acquire_recursive>:
 80097ec:	4770      	bx	lr

080097ee <__retarget_lock_release_recursive>:
 80097ee:	4770      	bx	lr

080097f0 <_init>:
 80097f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f2:	bf00      	nop
 80097f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097f6:	bc08      	pop	{r3}
 80097f8:	469e      	mov	lr, r3
 80097fa:	4770      	bx	lr

080097fc <_fini>:
 80097fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fe:	bf00      	nop
 8009800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009802:	bc08      	pop	{r3}
 8009804:	469e      	mov	lr, r3
 8009806:	4770      	bx	lr
