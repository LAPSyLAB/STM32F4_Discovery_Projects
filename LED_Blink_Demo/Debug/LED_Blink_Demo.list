
LED_Blink_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08008384  08008384  00018384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008428  08008428  000201d0  2**0
                  CONTENTS
  4 .ARM          00000008  08008428  08008428  00018428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008430  08008430  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008430  08008430  00018430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008434  08008434  00018434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  08008438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e5c  200001d0  08008608  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000202c  08008608  0002202c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013b89  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037a8  00000000  00000000  00033dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b0  00000000  00000000  00037578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d7c  00000000  00000000  00038728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000240fb  00000000  00000000  000394a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018773  00000000  00000000  0005d59f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9c52  00000000  00000000  00075d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e18  00000000  00000000  0013f964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0014477c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d0 	.word	0x200001d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800836c 	.word	0x0800836c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	0800836c 	.word	0x0800836c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fc32 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f850 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f964 	bl	8000854 <MX_GPIO_Init>
  MX_I2C1_Init();
 800058c:	f000 f8ce 	bl	800072c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000590:	f000 f8fa 	bl	8000788 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000594:	f000 f928 	bl	80007e8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000598:	f006 fd08 	bl	8006fac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,1);
 800059c:	2201      	movs	r2, #1
 800059e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a2:	481e      	ldr	r0, [pc, #120]	; (800061c <main+0xa0>)
 80005a4:	f000 ff64 	bl	8001470 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ae:	481b      	ldr	r0, [pc, #108]	; (800061c <main+0xa0>)
 80005b0:	f000 ff5e 	bl	8001470 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,1);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ba:	4818      	ldr	r0, [pc, #96]	; (800061c <main+0xa0>)
 80005bc:	f000 ff58 	bl	8001470 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,0);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005c6:	4815      	ldr	r0, [pc, #84]	; (800061c <main+0xa0>)
 80005c8:	f000 ff52 	bl	8001470 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d0:	4812      	ldr	r0, [pc, #72]	; (800061c <main+0xa0>)
 80005d2:	f000 ff66 	bl	80014a2 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80005d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005da:	4810      	ldr	r0, [pc, #64]	; (800061c <main+0xa0>)
 80005dc:	f000 ff61 	bl	80014a2 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80005e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e4:	480d      	ldr	r0, [pc, #52]	; (800061c <main+0xa0>)
 80005e6:	f000 ff5c 	bl	80014a2 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80005ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ee:	480b      	ldr	r0, [pc, #44]	; (800061c <main+0xa0>)
 80005f0:	f000 ff57 	bl	80014a2 <HAL_GPIO_TogglePin>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    snprintf (SendBuffer,BUFSIZE,"USB:2 secs\r\n");
 80005f4:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <main+0xa4>)
 80005f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005fa:	480a      	ldr	r0, [pc, #40]	; (8000624 <main+0xa8>)
 80005fc:	f007 f9fe 	bl	80079fc <sniprintf>
	    CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 8000600:	4808      	ldr	r0, [pc, #32]	; (8000624 <main+0xa8>)
 8000602:	f7ff fde5 	bl	80001d0 <strlen>
 8000606:	4603      	mov	r3, r0
 8000608:	4619      	mov	r1, r3
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <main+0xa8>)
 800060c:	f006 fd8c 	bl	8007128 <CDC_Transmit_FS>

      HAL_Delay(2000);
 8000610:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000614:	f000 fc5a 	bl	8000ecc <HAL_Delay>
  {
 8000618:	e7d8      	b.n	80005cc <main+0x50>
 800061a:	bf00      	nop
 800061c:	40020c00 	.word	0x40020c00
 8000620:	08008384 	.word	0x08008384
 8000624:	200002e0 	.word	0x200002e0

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b098      	sub	sp, #96	; 0x60
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f007 fa14 	bl	8007a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	4b31      	ldr	r3, [pc, #196]	; (8000724 <SystemClock_Config+0xfc>)
 8000660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000662:	4a30      	ldr	r2, [pc, #192]	; (8000724 <SystemClock_Config+0xfc>)
 8000664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000668:	6413      	str	r3, [r2, #64]	; 0x40
 800066a:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <SystemClock_Config+0xfc>)
 800066c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <SystemClock_Config+0x100>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a2a      	ldr	r2, [pc, #168]	; (8000728 <SystemClock_Config+0x100>)
 8000680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000684:	6013      	str	r3, [r2, #0]
 8000686:	4b28      	ldr	r3, [pc, #160]	; (8000728 <SystemClock_Config+0x100>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000692:	2301      	movs	r3, #1
 8000694:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000696:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800069a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a6:	2308      	movs	r3, #8
 80006a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006aa:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006ae:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b4:	2307      	movs	r3, #7
 80006b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 fe73 	bl	80033a8 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006c8:	f000 f9c2 	bl	8000a50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	2105      	movs	r1, #5
 80006ea:	4618      	mov	r0, r3
 80006ec:	f003 f8d4 	bl	8003898 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006f6:	f000 f9ab 	bl	8000a50 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006fa:	2301      	movs	r3, #1
 80006fc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80006fe:	23c0      	movs	r3, #192	; 0xc0
 8000700:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000702:	2302      	movs	r3, #2
 8000704:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	4618      	mov	r0, r3
 800070c:	f003 fad0 	bl	8003cb0 <HAL_RCCEx_PeriphCLKConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000716:	f000 f99b 	bl	8000a50 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3760      	adds	r7, #96	; 0x60
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_I2C1_Init+0x50>)
 8000732:	4a13      	ldr	r2, [pc, #76]	; (8000780 <MX_I2C1_Init+0x54>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_I2C1_Init+0x50>)
 8000738:	4a12      	ldr	r2, [pc, #72]	; (8000784 <MX_I2C1_Init+0x58>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_I2C1_Init+0x50>)
 800074a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800074e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <MX_I2C1_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_I2C1_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_I2C1_Init+0x50>)
 800076a:	f000 feb5 	bl	80014d8 <HAL_I2C_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000774:	f000 f96c 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200001ec 	.word	0x200001ec
 8000780:	40005400 	.word	0x40005400
 8000784:	000186a0 	.word	0x000186a0

08000788 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800078c:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_I2S3_Init+0x54>)
 800078e:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <MX_I2S3_Init+0x58>)
 8000790:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_I2S3_Init+0x54>)
 8000794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000798:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_I2S3_Init+0x54>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_I2S3_Init+0x54>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <MX_I2S3_Init+0x54>)
 80007a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ac:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_I2S3_Init+0x54>)
 80007b0:	4a0c      	ldr	r2, [pc, #48]	; (80007e4 <MX_I2S3_Init+0x5c>)
 80007b2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_I2S3_Init+0x54>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_I2S3_Init+0x54>)
 80007bc:	2200      	movs	r2, #0
 80007be:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_I2S3_Init+0x54>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_I2S3_Init+0x54>)
 80007c8:	f000 ffca 	bl	8001760 <HAL_I2S_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007d2:	f000 f93d 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000240 	.word	0x20000240
 80007e0:	40003c00 	.word	0x40003c00
 80007e4:	00017700 	.word	0x00017700

080007e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_SPI1_Init+0x64>)
 80007ee:	4a18      	ldr	r2, [pc, #96]	; (8000850 <MX_SPI1_Init+0x68>)
 80007f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_SPI1_Init+0x64>)
 80007f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_SPI1_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_SPI1_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_SPI1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_SPI1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_SPI1_Init+0x64>)
 8000814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000818:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_SPI1_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <MX_SPI1_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_SPI1_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <MX_SPI1_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_SPI1_Init+0x64>)
 8000834:	220a      	movs	r2, #10
 8000836:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_SPI1_Init+0x64>)
 800083a:	f003 fb79 	bl	8003f30 <HAL_SPI_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000844:	f000 f904 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000288 	.word	0x20000288
 8000850:	40013000 	.word	0x40013000

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	; 0x30
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
 800086e:	4b71      	ldr	r3, [pc, #452]	; (8000a34 <MX_GPIO_Init+0x1e0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a70      	ldr	r2, [pc, #448]	; (8000a34 <MX_GPIO_Init+0x1e0>)
 8000874:	f043 0310 	orr.w	r3, r3, #16
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b6e      	ldr	r3, [pc, #440]	; (8000a34 <MX_GPIO_Init+0x1e0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0310 	and.w	r3, r3, #16
 8000882:	61bb      	str	r3, [r7, #24]
 8000884:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	4b6a      	ldr	r3, [pc, #424]	; (8000a34 <MX_GPIO_Init+0x1e0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a69      	ldr	r2, [pc, #420]	; (8000a34 <MX_GPIO_Init+0x1e0>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b67      	ldr	r3, [pc, #412]	; (8000a34 <MX_GPIO_Init+0x1e0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b63      	ldr	r3, [pc, #396]	; (8000a34 <MX_GPIO_Init+0x1e0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a62      	ldr	r2, [pc, #392]	; (8000a34 <MX_GPIO_Init+0x1e0>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b60      	ldr	r3, [pc, #384]	; (8000a34 <MX_GPIO_Init+0x1e0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b5c      	ldr	r3, [pc, #368]	; (8000a34 <MX_GPIO_Init+0x1e0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a5b      	ldr	r2, [pc, #364]	; (8000a34 <MX_GPIO_Init+0x1e0>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b59      	ldr	r3, [pc, #356]	; (8000a34 <MX_GPIO_Init+0x1e0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	4b55      	ldr	r3, [pc, #340]	; (8000a34 <MX_GPIO_Init+0x1e0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a54      	ldr	r2, [pc, #336]	; (8000a34 <MX_GPIO_Init+0x1e0>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b52      	ldr	r3, [pc, #328]	; (8000a34 <MX_GPIO_Init+0x1e0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b4e      	ldr	r3, [pc, #312]	; (8000a34 <MX_GPIO_Init+0x1e0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a4d      	ldr	r2, [pc, #308]	; (8000a34 <MX_GPIO_Init+0x1e0>)
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b4b      	ldr	r3, [pc, #300]	; (8000a34 <MX_GPIO_Init+0x1e0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0308 	and.w	r3, r3, #8
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2108      	movs	r1, #8
 8000916:	4848      	ldr	r0, [pc, #288]	; (8000a38 <MX_GPIO_Init+0x1e4>)
 8000918:	f000 fdaa 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	2101      	movs	r1, #1
 8000920:	4846      	ldr	r0, [pc, #280]	; (8000a3c <MX_GPIO_Init+0x1e8>)
 8000922:	f000 fda5 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000926:	2200      	movs	r2, #0
 8000928:	f24f 0110 	movw	r1, #61456	; 0xf010
 800092c:	4844      	ldr	r0, [pc, #272]	; (8000a40 <MX_GPIO_Init+0x1ec>)
 800092e:	f000 fd9f 	bl	8001470 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000932:	2308      	movs	r3, #8
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	483b      	ldr	r0, [pc, #236]	; (8000a38 <MX_GPIO_Init+0x1e4>)
 800094a:	f000 fbf5 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800094e:	2301      	movs	r3, #1
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4835      	ldr	r0, [pc, #212]	; (8000a3c <MX_GPIO_Init+0x1e8>)
 8000966:	f000 fbe7 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800096a:	2308      	movs	r3, #8
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800097a:	2305      	movs	r3, #5
 800097c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	482d      	ldr	r0, [pc, #180]	; (8000a3c <MX_GPIO_Init+0x1e8>)
 8000986:	f000 fbd7 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800098a:	2301      	movs	r3, #1
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800098e:	4b2d      	ldr	r3, [pc, #180]	; (8000a44 <MX_GPIO_Init+0x1f0>)
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	482a      	ldr	r0, [pc, #168]	; (8000a48 <MX_GPIO_Init+0x1f4>)
 800099e:	f000 fbcb 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009a2:	2304      	movs	r3, #4
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4825      	ldr	r0, [pc, #148]	; (8000a4c <MX_GPIO_Init+0x1f8>)
 80009b6:	f000 fbbf 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009cc:	2305      	movs	r3, #5
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	481d      	ldr	r0, [pc, #116]	; (8000a4c <MX_GPIO_Init+0x1f8>)
 80009d8:	f000 fbae 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009dc:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009e0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4812      	ldr	r0, [pc, #72]	; (8000a40 <MX_GPIO_Init+0x1ec>)
 80009f6:	f000 fb9f 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009fa:	2320      	movs	r3, #32
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	480c      	ldr	r0, [pc, #48]	; (8000a40 <MX_GPIO_Init+0x1ec>)
 8000a0e:	f000 fb93 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a12:	2302      	movs	r3, #2
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_GPIO_Init+0x1f0>)
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <MX_GPIO_Init+0x1e4>)
 8000a26:	f000 fb87 	bl	8001138 <HAL_GPIO_Init>

}
 8000a2a:	bf00      	nop
 8000a2c:	3730      	adds	r7, #48	; 0x30
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40020800 	.word	0x40020800
 8000a40:	40020c00 	.word	0x40020c00
 8000a44:	10120000 	.word	0x10120000
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	40020400 	.word	0x40020400

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <Error_Handler+0x8>
	...

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a70:	6453      	str	r3, [r2, #68]	; 0x44
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	4a08      	ldr	r2, [pc, #32]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a9a:	2007      	movs	r0, #7
 8000a9c:	f000 fb0a 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800

08000aac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	; 0x28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a19      	ldr	r2, [pc, #100]	; (8000b30 <HAL_I2C_MspInit+0x84>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d12c      	bne.n	8000b28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <HAL_I2C_MspInit+0x88>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a17      	ldr	r2, [pc, #92]	; (8000b34 <HAL_I2C_MspInit+0x88>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <HAL_I2C_MspInit+0x88>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000aea:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af0:	2312      	movs	r3, #18
 8000af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000afc:	2304      	movs	r3, #4
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	480c      	ldr	r0, [pc, #48]	; (8000b38 <HAL_I2C_MspInit+0x8c>)
 8000b08:	f000 fb16 	bl	8001138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <HAL_I2C_MspInit+0x88>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <HAL_I2C_MspInit+0x88>)
 8000b16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_I2C_MspInit+0x88>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b28:	bf00      	nop
 8000b2a:	3728      	adds	r7, #40	; 0x28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40005400 	.word	0x40005400
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020400 	.word	0x40020400

08000b3c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a28      	ldr	r2, [pc, #160]	; (8000bfc <HAL_I2S_MspInit+0xc0>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d14a      	bne.n	8000bf4 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <HAL_I2S_MspInit+0xc4>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	4a26      	ldr	r2, [pc, #152]	; (8000c00 <HAL_I2S_MspInit+0xc4>)
 8000b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6e:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <HAL_I2S_MspInit+0xc4>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <HAL_I2S_MspInit+0xc4>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a1f      	ldr	r2, [pc, #124]	; (8000c00 <HAL_I2S_MspInit+0xc4>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <HAL_I2S_MspInit+0xc4>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <HAL_I2S_MspInit+0xc4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a18      	ldr	r2, [pc, #96]	; (8000c00 <HAL_I2S_MspInit+0xc4>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <HAL_I2S_MspInit+0xc4>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bb2:	2310      	movs	r3, #16
 8000bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bc2:	2306      	movs	r3, #6
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	480d      	ldr	r0, [pc, #52]	; (8000c04 <HAL_I2S_MspInit+0xc8>)
 8000bce:	f000 fab3 	bl	8001138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bd2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000be4:	2306      	movs	r3, #6
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	4806      	ldr	r0, [pc, #24]	; (8000c08 <HAL_I2S_MspInit+0xcc>)
 8000bf0:	f000 faa2 	bl	8001138 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bf4:	bf00      	nop
 8000bf6:	3728      	adds	r7, #40	; 0x28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40003c00 	.word	0x40003c00
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020000 	.word	0x40020000
 8000c08:	40020800 	.word	0x40020800

08000c0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	; 0x28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a19      	ldr	r2, [pc, #100]	; (8000c90 <HAL_SPI_MspInit+0x84>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d12b      	bne.n	8000c86 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <HAL_SPI_MspInit+0x88>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	4a17      	ldr	r2, [pc, #92]	; (8000c94 <HAL_SPI_MspInit+0x88>)
 8000c38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_SPI_MspInit+0x88>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <HAL_SPI_MspInit+0x88>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a10      	ldr	r2, [pc, #64]	; (8000c94 <HAL_SPI_MspInit+0x88>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_SPI_MspInit+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c66:	23e0      	movs	r3, #224	; 0xe0
 8000c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c76:	2305      	movs	r3, #5
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	; (8000c98 <HAL_SPI_MspInit+0x8c>)
 8000c82:	f000 fa59 	bl	8001138 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c86:	bf00      	nop
 8000c88:	3728      	adds	r7, #40	; 0x28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40013000 	.word	0x40013000
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020000 	.word	0x40020000

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <MemManage_Handler+0x4>

08000cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce8:	f000 f8d0 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <OTG_FS_IRQHandler+0x10>)
 8000cf6:	f001 fb23 	bl	8002340 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200018bc 	.word	0x200018bc

08000d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d0c:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <_sbrk+0x5c>)
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <_sbrk+0x60>)
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <_sbrk+0x64>)
 8000d22:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <_sbrk+0x68>)
 8000d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d207      	bcs.n	8000d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d34:	f006 fe9e 	bl	8007a74 <__errno>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d42:	e009      	b.n	8000d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <_sbrk+0x64>)
 8000d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d56:	68fb      	ldr	r3, [r7, #12]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20020000 	.word	0x20020000
 8000d64:	00000400 	.word	0x00000400
 8000d68:	200003e0 	.word	0x200003e0
 8000d6c:	20002030 	.word	0x20002030

08000d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <SystemInit+0x20>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <SystemInit+0x20>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d98:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d9a:	490e      	ldr	r1, [pc, #56]	; (8000dd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d9c:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db0:	4c0b      	ldr	r4, [pc, #44]	; (8000de0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dbe:	f7ff ffd7 	bl	8000d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f006 fe5d 	bl	8007a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fbd9 	bl	800057c <main>
  bx  lr    
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8000dd8:	08008438 	.word	0x08008438
  ldr r2, =_sbss
 8000ddc:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000de0:	2000202c 	.word	0x2000202c

08000de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <HAL_Init+0x40>)
 8000df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <HAL_Init+0x40>)
 8000dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_Init+0x40>)
 8000e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f94f 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e16:	2000      	movs	r0, #0
 8000e18:	f000 f808 	bl	8000e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1c:	f7ff fe1e 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023c00 	.word	0x40023c00

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x54>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x58>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f967 	bl	800111e <HAL_SYSTICK_Config>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00e      	b.n	8000e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d80a      	bhi.n	8000e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e60:	2200      	movs	r2, #0
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f000 f92f 	bl	80010ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <HAL_InitTick+0x5c>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e000      	b.n	8000e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000004 	.word	0x20000004

08000e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x20>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	200003e4 	.word	0x200003e4

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_GetTick+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	200003e4 	.word	0x200003e4

08000ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff ffee 	bl	8000eb4 <HAL_GetTick>
 8000ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee4:	d005      	beq.n	8000ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_Delay+0x44>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ef2:	bf00      	nop
 8000ef4:	f7ff ffde 	bl	8000eb4 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8f7      	bhi.n	8000ef4 <HAL_Delay+0x28>
  {
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008

08000f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f30:	4013      	ands	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	60d3      	str	r3, [r2, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <__NVIC_GetPriorityGrouping+0x18>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	f003 0307 	and.w	r3, r3, #7
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	db0b      	blt.n	8000fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f003 021f 	and.w	r2, r3, #31
 8000f90:	4907      	ldr	r1, [pc, #28]	; (8000fb0 <__NVIC_EnableIRQ+0x38>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	095b      	lsrs	r3, r3, #5
 8000f98:	2001      	movs	r0, #1
 8000f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000e100 	.word	0xe000e100

08000fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db0a      	blt.n	8000fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	490c      	ldr	r1, [pc, #48]	; (8001000 <__NVIC_SetPriority+0x4c>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	0112      	lsls	r2, r2, #4
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fdc:	e00a      	b.n	8000ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4908      	ldr	r1, [pc, #32]	; (8001004 <__NVIC_SetPriority+0x50>)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	3b04      	subs	r3, #4
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	761a      	strb	r2, [r3, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f1c3 0307 	rsb	r3, r3, #7
 8001022:	2b04      	cmp	r3, #4
 8001024:	bf28      	it	cs
 8001026:	2304      	movcs	r3, #4
 8001028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3304      	adds	r3, #4
 800102e:	2b06      	cmp	r3, #6
 8001030:	d902      	bls.n	8001038 <NVIC_EncodePriority+0x30>
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3b03      	subs	r3, #3
 8001036:	e000      	b.n	800103a <NVIC_EncodePriority+0x32>
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43da      	mvns	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	401a      	ands	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001050:	f04f 31ff 	mov.w	r1, #4294967295
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
 800105a:	43d9      	mvns	r1, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	4313      	orrs	r3, r2
         );
}
 8001062:	4618      	mov	r0, r3
 8001064:	3724      	adds	r7, #36	; 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001080:	d301      	bcc.n	8001086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001082:	2301      	movs	r3, #1
 8001084:	e00f      	b.n	80010a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <SysTick_Config+0x40>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108e:	210f      	movs	r1, #15
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f7ff ff8e 	bl	8000fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <SysTick_Config+0x40>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <SysTick_Config+0x40>)
 80010a0:	2207      	movs	r2, #7
 80010a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff29 	bl	8000f14 <__NVIC_SetPriorityGrouping>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010dc:	f7ff ff3e 	bl	8000f5c <__NVIC_GetPriorityGrouping>
 80010e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff ff8e 	bl	8001008 <NVIC_EncodePriority>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff5d 	bl	8000fb4 <__NVIC_SetPriority>
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff31 	bl	8000f78 <__NVIC_EnableIRQ>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffa2 	bl	8001070 <SysTick_Config>
 800112c:	4603      	mov	r3, r0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
 8001152:	e16b      	b.n	800142c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001154:	2201      	movs	r2, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	429a      	cmp	r2, r3
 800116e:	f040 815a 	bne.w	8001426 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	2b01      	cmp	r3, #1
 800117c:	d005      	beq.n	800118a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001186:	2b02      	cmp	r3, #2
 8001188:	d130      	bne.n	80011ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	2203      	movs	r2, #3
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c0:	2201      	movs	r2, #1
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	091b      	lsrs	r3, r3, #4
 80011d6:	f003 0201 	and.w	r2, r3, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d017      	beq.n	8001228 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d123      	bne.n	800127c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	08da      	lsrs	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3208      	adds	r2, #8
 800123c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	220f      	movs	r2, #15
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	691a      	ldr	r2, [r3, #16]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	08da      	lsrs	r2, r3, #3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3208      	adds	r2, #8
 8001276:	69b9      	ldr	r1, [r7, #24]
 8001278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0203 	and.w	r2, r3, #3
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80b4 	beq.w	8001426 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b60      	ldr	r3, [pc, #384]	; (8001444 <HAL_GPIO_Init+0x30c>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a5f      	ldr	r2, [pc, #380]	; (8001444 <HAL_GPIO_Init+0x30c>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b5d      	ldr	r3, [pc, #372]	; (8001444 <HAL_GPIO_Init+0x30c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012da:	4a5b      	ldr	r2, [pc, #364]	; (8001448 <HAL_GPIO_Init+0x310>)
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	089b      	lsrs	r3, r3, #2
 80012e0:	3302      	adds	r3, #2
 80012e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	220f      	movs	r2, #15
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a52      	ldr	r2, [pc, #328]	; (800144c <HAL_GPIO_Init+0x314>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d02b      	beq.n	800135e <HAL_GPIO_Init+0x226>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a51      	ldr	r2, [pc, #324]	; (8001450 <HAL_GPIO_Init+0x318>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d025      	beq.n	800135a <HAL_GPIO_Init+0x222>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a50      	ldr	r2, [pc, #320]	; (8001454 <HAL_GPIO_Init+0x31c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d01f      	beq.n	8001356 <HAL_GPIO_Init+0x21e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4f      	ldr	r2, [pc, #316]	; (8001458 <HAL_GPIO_Init+0x320>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d019      	beq.n	8001352 <HAL_GPIO_Init+0x21a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4e      	ldr	r2, [pc, #312]	; (800145c <HAL_GPIO_Init+0x324>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d013      	beq.n	800134e <HAL_GPIO_Init+0x216>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4d      	ldr	r2, [pc, #308]	; (8001460 <HAL_GPIO_Init+0x328>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d00d      	beq.n	800134a <HAL_GPIO_Init+0x212>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4c      	ldr	r2, [pc, #304]	; (8001464 <HAL_GPIO_Init+0x32c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d007      	beq.n	8001346 <HAL_GPIO_Init+0x20e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4b      	ldr	r2, [pc, #300]	; (8001468 <HAL_GPIO_Init+0x330>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d101      	bne.n	8001342 <HAL_GPIO_Init+0x20a>
 800133e:	2307      	movs	r3, #7
 8001340:	e00e      	b.n	8001360 <HAL_GPIO_Init+0x228>
 8001342:	2308      	movs	r3, #8
 8001344:	e00c      	b.n	8001360 <HAL_GPIO_Init+0x228>
 8001346:	2306      	movs	r3, #6
 8001348:	e00a      	b.n	8001360 <HAL_GPIO_Init+0x228>
 800134a:	2305      	movs	r3, #5
 800134c:	e008      	b.n	8001360 <HAL_GPIO_Init+0x228>
 800134e:	2304      	movs	r3, #4
 8001350:	e006      	b.n	8001360 <HAL_GPIO_Init+0x228>
 8001352:	2303      	movs	r3, #3
 8001354:	e004      	b.n	8001360 <HAL_GPIO_Init+0x228>
 8001356:	2302      	movs	r3, #2
 8001358:	e002      	b.n	8001360 <HAL_GPIO_Init+0x228>
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <HAL_GPIO_Init+0x228>
 800135e:	2300      	movs	r3, #0
 8001360:	69fa      	ldr	r2, [r7, #28]
 8001362:	f002 0203 	and.w	r2, r2, #3
 8001366:	0092      	lsls	r2, r2, #2
 8001368:	4093      	lsls	r3, r2
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001370:	4935      	ldr	r1, [pc, #212]	; (8001448 <HAL_GPIO_Init+0x310>)
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	3302      	adds	r3, #2
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800137e:	4b3b      	ldr	r3, [pc, #236]	; (800146c <HAL_GPIO_Init+0x334>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013a2:	4a32      	ldr	r2, [pc, #200]	; (800146c <HAL_GPIO_Init+0x334>)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013a8:	4b30      	ldr	r3, [pc, #192]	; (800146c <HAL_GPIO_Init+0x334>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013cc:	4a27      	ldr	r2, [pc, #156]	; (800146c <HAL_GPIO_Init+0x334>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <HAL_GPIO_Init+0x334>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013f6:	4a1d      	ldr	r2, [pc, #116]	; (800146c <HAL_GPIO_Init+0x334>)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <HAL_GPIO_Init+0x334>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001420:	4a12      	ldr	r2, [pc, #72]	; (800146c <HAL_GPIO_Init+0x334>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3301      	adds	r3, #1
 800142a:	61fb      	str	r3, [r7, #28]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	2b0f      	cmp	r3, #15
 8001430:	f67f ae90 	bls.w	8001154 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	40013800 	.word	0x40013800
 800144c:	40020000 	.word	0x40020000
 8001450:	40020400 	.word	0x40020400
 8001454:	40020800 	.word	0x40020800
 8001458:	40020c00 	.word	0x40020c00
 800145c:	40021000 	.word	0x40021000
 8001460:	40021400 	.word	0x40021400
 8001464:	40021800 	.word	0x40021800
 8001468:	40021c00 	.word	0x40021c00
 800146c:	40013c00 	.word	0x40013c00

08001470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	807b      	strh	r3, [r7, #2]
 800147c:	4613      	mov	r3, r2
 800147e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001480:	787b      	ldrb	r3, [r7, #1]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800148c:	e003      	b.n	8001496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	041a      	lsls	r2, r3, #16
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	619a      	str	r2, [r3, #24]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b085      	sub	sp, #20
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	460b      	mov	r3, r1
 80014ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014b4:	887a      	ldrh	r2, [r7, #2]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4013      	ands	r3, r2
 80014ba:	041a      	lsls	r2, r3, #16
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43d9      	mvns	r1, r3
 80014c0:	887b      	ldrh	r3, [r7, #2]
 80014c2:	400b      	ands	r3, r1
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	619a      	str	r2, [r3, #24]
}
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e12b      	b.n	8001742 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d106      	bne.n	8001504 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fad4 	bl	8000aac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2224      	movs	r2, #36	; 0x24
 8001508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800152a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800153a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800153c:	f002 fba4 	bl	8003c88 <HAL_RCC_GetPCLK1Freq>
 8001540:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	4a81      	ldr	r2, [pc, #516]	; (800174c <HAL_I2C_Init+0x274>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d807      	bhi.n	800155c <HAL_I2C_Init+0x84>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4a80      	ldr	r2, [pc, #512]	; (8001750 <HAL_I2C_Init+0x278>)
 8001550:	4293      	cmp	r3, r2
 8001552:	bf94      	ite	ls
 8001554:	2301      	movls	r3, #1
 8001556:	2300      	movhi	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	e006      	b.n	800156a <HAL_I2C_Init+0x92>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4a7d      	ldr	r2, [pc, #500]	; (8001754 <HAL_I2C_Init+0x27c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	bf94      	ite	ls
 8001564:	2301      	movls	r3, #1
 8001566:	2300      	movhi	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e0e7      	b.n	8001742 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4a78      	ldr	r2, [pc, #480]	; (8001758 <HAL_I2C_Init+0x280>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	0c9b      	lsrs	r3, r3, #18
 800157c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	430a      	orrs	r2, r1
 8001590:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	4a6a      	ldr	r2, [pc, #424]	; (800174c <HAL_I2C_Init+0x274>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d802      	bhi.n	80015ac <HAL_I2C_Init+0xd4>
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	3301      	adds	r3, #1
 80015aa:	e009      	b.n	80015c0 <HAL_I2C_Init+0xe8>
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015b2:	fb02 f303 	mul.w	r3, r2, r3
 80015b6:	4a69      	ldr	r2, [pc, #420]	; (800175c <HAL_I2C_Init+0x284>)
 80015b8:	fba2 2303 	umull	r2, r3, r2, r3
 80015bc:	099b      	lsrs	r3, r3, #6
 80015be:	3301      	adds	r3, #1
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	430b      	orrs	r3, r1
 80015c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	495c      	ldr	r1, [pc, #368]	; (800174c <HAL_I2C_Init+0x274>)
 80015dc:	428b      	cmp	r3, r1
 80015de:	d819      	bhi.n	8001614 <HAL_I2C_Init+0x13c>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1e59      	subs	r1, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80015ee:	1c59      	adds	r1, r3, #1
 80015f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80015f4:	400b      	ands	r3, r1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00a      	beq.n	8001610 <HAL_I2C_Init+0x138>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	1e59      	subs	r1, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fbb1 f3f3 	udiv	r3, r1, r3
 8001608:	3301      	adds	r3, #1
 800160a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800160e:	e051      	b.n	80016b4 <HAL_I2C_Init+0x1dc>
 8001610:	2304      	movs	r3, #4
 8001612:	e04f      	b.n	80016b4 <HAL_I2C_Init+0x1dc>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d111      	bne.n	8001640 <HAL_I2C_Init+0x168>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1e58      	subs	r0, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6859      	ldr	r1, [r3, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	440b      	add	r3, r1
 800162a:	fbb0 f3f3 	udiv	r3, r0, r3
 800162e:	3301      	adds	r3, #1
 8001630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf0c      	ite	eq
 8001638:	2301      	moveq	r3, #1
 800163a:	2300      	movne	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	e012      	b.n	8001666 <HAL_I2C_Init+0x18e>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1e58      	subs	r0, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6859      	ldr	r1, [r3, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	0099      	lsls	r1, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	fbb0 f3f3 	udiv	r3, r0, r3
 8001656:	3301      	adds	r3, #1
 8001658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf0c      	ite	eq
 8001660:	2301      	moveq	r3, #1
 8001662:	2300      	movne	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_I2C_Init+0x196>
 800166a:	2301      	movs	r3, #1
 800166c:	e022      	b.n	80016b4 <HAL_I2C_Init+0x1dc>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10e      	bne.n	8001694 <HAL_I2C_Init+0x1bc>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1e58      	subs	r0, r3, #1
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6859      	ldr	r1, [r3, #4]
 800167e:	460b      	mov	r3, r1
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	440b      	add	r3, r1
 8001684:	fbb0 f3f3 	udiv	r3, r0, r3
 8001688:	3301      	adds	r3, #1
 800168a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800168e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001692:	e00f      	b.n	80016b4 <HAL_I2C_Init+0x1dc>
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	1e58      	subs	r0, r3, #1
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6859      	ldr	r1, [r3, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	0099      	lsls	r1, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016aa:	3301      	adds	r3, #1
 80016ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	6809      	ldr	r1, [r1, #0]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69da      	ldr	r2, [r3, #28]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6911      	ldr	r1, [r2, #16]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68d2      	ldr	r2, [r2, #12]
 80016ee:	4311      	orrs	r1, r2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	430b      	orrs	r3, r1
 80016f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695a      	ldr	r2, [r3, #20]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0201 	orr.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2220      	movs	r2, #32
 800172e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	000186a0 	.word	0x000186a0
 8001750:	001e847f 	.word	0x001e847f
 8001754:	003d08ff 	.word	0x003d08ff
 8001758:	431bde83 	.word	0x431bde83
 800175c:	10624dd3 	.word	0x10624dd3

08001760 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e128      	b.n	80019c4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d109      	bne.n	8001792 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a90      	ldr	r2, [pc, #576]	; (80019cc <HAL_I2S_Init+0x26c>)
 800178a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff f9d5 	bl	8000b3c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2202      	movs	r2, #2
 8001796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	6812      	ldr	r2, [r2, #0]
 80017a4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80017a8:	f023 030f 	bic.w	r3, r3, #15
 80017ac:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2202      	movs	r2, #2
 80017b4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d060      	beq.n	8001880 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d102      	bne.n	80017cc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80017c6:	2310      	movs	r3, #16
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	e001      	b.n	80017d0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80017cc:	2320      	movs	r3, #32
 80017ce:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b20      	cmp	r3, #32
 80017d6:	d802      	bhi.n	80017de <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80017de:	2001      	movs	r0, #1
 80017e0:	f002 fb48 	bl	8003e74 <HAL_RCCEx_GetPeriphCLKFreq>
 80017e4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017ee:	d125      	bne.n	800183c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d010      	beq.n	800181a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	461a      	mov	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	fbb2 f3f3 	udiv	r3, r2, r3
 8001814:	3305      	adds	r3, #5
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	e01f      	b.n	800185a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	fbb2 f2f3 	udiv	r2, r2, r3
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	461a      	mov	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	3305      	adds	r3, #5
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	e00e      	b.n	800185a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	fbb2 f2f3 	udiv	r2, r2, r3
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	461a      	mov	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	fbb2 f3f3 	udiv	r3, r2, r3
 8001856:	3305      	adds	r3, #5
 8001858:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4a5c      	ldr	r2, [pc, #368]	; (80019d0 <HAL_I2S_Init+0x270>)
 800185e:	fba2 2303 	umull	r2, r3, r2, r3
 8001862:	08db      	lsrs	r3, r3, #3
 8001864:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	085b      	lsrs	r3, r3, #1
 8001876:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	e003      	b.n	8001888 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001880:	2302      	movs	r3, #2
 8001882:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d902      	bls.n	8001894 <HAL_I2S_Init+0x134>
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	2bff      	cmp	r3, #255	; 0xff
 8001892:	d907      	bls.n	80018a4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001898:	f043 0210 	orr.w	r2, r3, #16
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e08f      	b.n	80019c4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	ea42 0103 	orr.w	r1, r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	69fa      	ldr	r2, [r7, #28]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80018c2:	f023 030f 	bic.w	r3, r3, #15
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6851      	ldr	r1, [r2, #4]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6892      	ldr	r2, [r2, #8]
 80018ce:	4311      	orrs	r1, r2
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	68d2      	ldr	r2, [r2, #12]
 80018d4:	4311      	orrs	r1, r2
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6992      	ldr	r2, [r2, #24]
 80018da:	430a      	orrs	r2, r1
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018e6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d161      	bne.n	80019b4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a38      	ldr	r2, [pc, #224]	; (80019d4 <HAL_I2S_Init+0x274>)
 80018f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a37      	ldr	r2, [pc, #220]	; (80019d8 <HAL_I2S_Init+0x278>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d101      	bne.n	8001904 <HAL_I2S_Init+0x1a4>
 8001900:	4b36      	ldr	r3, [pc, #216]	; (80019dc <HAL_I2S_Init+0x27c>)
 8001902:	e001      	b.n	8001908 <HAL_I2S_Init+0x1a8>
 8001904:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	4932      	ldr	r1, [pc, #200]	; (80019d8 <HAL_I2S_Init+0x278>)
 8001910:	428a      	cmp	r2, r1
 8001912:	d101      	bne.n	8001918 <HAL_I2S_Init+0x1b8>
 8001914:	4a31      	ldr	r2, [pc, #196]	; (80019dc <HAL_I2S_Init+0x27c>)
 8001916:	e001      	b.n	800191c <HAL_I2S_Init+0x1bc>
 8001918:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800191c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001920:	f023 030f 	bic.w	r3, r3, #15
 8001924:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a2b      	ldr	r2, [pc, #172]	; (80019d8 <HAL_I2S_Init+0x278>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d101      	bne.n	8001934 <HAL_I2S_Init+0x1d4>
 8001930:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <HAL_I2S_Init+0x27c>)
 8001932:	e001      	b.n	8001938 <HAL_I2S_Init+0x1d8>
 8001934:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001938:	2202      	movs	r2, #2
 800193a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a25      	ldr	r2, [pc, #148]	; (80019d8 <HAL_I2S_Init+0x278>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d101      	bne.n	800194a <HAL_I2S_Init+0x1ea>
 8001946:	4b25      	ldr	r3, [pc, #148]	; (80019dc <HAL_I2S_Init+0x27c>)
 8001948:	e001      	b.n	800194e <HAL_I2S_Init+0x1ee>
 800194a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800195a:	d003      	beq.n	8001964 <HAL_I2S_Init+0x204>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d103      	bne.n	800196c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	e001      	b.n	8001970 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800196c:	2300      	movs	r3, #0
 800196e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800197a:	4313      	orrs	r3, r2
 800197c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001984:	4313      	orrs	r3, r2
 8001986:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800198e:	4313      	orrs	r3, r2
 8001990:	b29a      	uxth	r2, r3
 8001992:	897b      	ldrh	r3, [r7, #10]
 8001994:	4313      	orrs	r3, r2
 8001996:	b29b      	uxth	r3, r3
 8001998:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800199c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a0d      	ldr	r2, [pc, #52]	; (80019d8 <HAL_I2S_Init+0x278>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d101      	bne.n	80019ac <HAL_I2S_Init+0x24c>
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <HAL_I2S_Init+0x27c>)
 80019aa:	e001      	b.n	80019b0 <HAL_I2S_Init+0x250>
 80019ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80019b0:	897a      	ldrh	r2, [r7, #10]
 80019b2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3720      	adds	r7, #32
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	08001ad7 	.word	0x08001ad7
 80019d0:	cccccccd 	.word	0xcccccccd
 80019d4:	08001bed 	.word	0x08001bed
 80019d8:	40003800 	.word	0x40003800
 80019dc:	40003400 	.word	0x40003400

080019e0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	881a      	ldrh	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	1c9a      	adds	r2, r3, #2
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10e      	bne.n	8001a70 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a60:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ffb8 	bl	80019e0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	b292      	uxth	r2, r2
 8001a8c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a92:	1c9a      	adds	r2, r3, #2
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10e      	bne.n	8001ace <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001abe:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff93 	bl	80019f4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d13a      	bne.n	8001b68 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d109      	bne.n	8001b10 <I2S_IRQHandler+0x3a>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b06:	2b40      	cmp	r3, #64	; 0x40
 8001b08:	d102      	bne.n	8001b10 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ffb4 	bl	8001a78 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b16:	2b40      	cmp	r3, #64	; 0x40
 8001b18:	d126      	bne.n	8001b68 <I2S_IRQHandler+0x92>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0320 	and.w	r3, r3, #32
 8001b24:	2b20      	cmp	r3, #32
 8001b26:	d11f      	bne.n	8001b68 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b36:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b38:	2300      	movs	r3, #0
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f043 0202 	orr.w	r2, r3, #2
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ff50 	bl	8001a08 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b03      	cmp	r3, #3
 8001b72:	d136      	bne.n	8001be2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d109      	bne.n	8001b92 <I2S_IRQHandler+0xbc>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b88:	2b80      	cmp	r3, #128	; 0x80
 8001b8a:	d102      	bne.n	8001b92 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff45 	bl	8001a1c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d122      	bne.n	8001be2 <I2S_IRQHandler+0x10c>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 0320 	and.w	r3, r3, #32
 8001ba6:	2b20      	cmp	r3, #32
 8001ba8:	d11b      	bne.n	8001be2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001bb8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd4:	f043 0204 	orr.w	r2, r3, #4
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ff13 	bl	8001a08 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001be2:	bf00      	nop
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a92      	ldr	r2, [pc, #584]	; (8001e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d101      	bne.n	8001c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001c06:	4b92      	ldr	r3, [pc, #584]	; (8001e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c08:	e001      	b.n	8001c0e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001c0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a8b      	ldr	r2, [pc, #556]	; (8001e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d101      	bne.n	8001c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001c24:	4b8a      	ldr	r3, [pc, #552]	; (8001e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c26:	e001      	b.n	8001c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001c28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c38:	d004      	beq.n	8001c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f040 8099 	bne.w	8001d76 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d107      	bne.n	8001c5e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f925 	bl	8001ea8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d107      	bne.n	8001c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d002      	beq.n	8001c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f9c8 	bl	8002008 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c7e:	2b40      	cmp	r3, #64	; 0x40
 8001c80:	d13a      	bne.n	8001cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	f003 0320 	and.w	r3, r3, #32
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d035      	beq.n	8001cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a6e      	ldr	r2, [pc, #440]	; (8001e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d101      	bne.n	8001c9a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001c96:	4b6e      	ldr	r3, [pc, #440]	; (8001e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c98:	e001      	b.n	8001c9e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001c9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4969      	ldr	r1, [pc, #420]	; (8001e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ca6:	428b      	cmp	r3, r1
 8001ca8:	d101      	bne.n	8001cae <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001caa:	4b69      	ldr	r3, [pc, #420]	; (8001e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001cac:	e001      	b.n	8001cb2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001cae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cb6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001cc6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	f043 0202 	orr.w	r2, r3, #2
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff fe88 	bl	8001a08 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	f040 80c3 	bne.w	8001e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f003 0320 	and.w	r3, r3, #32
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 80bd 	beq.w	8001e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d1e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a49      	ldr	r2, [pc, #292]	; (8001e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d101      	bne.n	8001d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001d2a:	4b49      	ldr	r3, [pc, #292]	; (8001e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d2c:	e001      	b.n	8001d32 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001d2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4944      	ldr	r1, [pc, #272]	; (8001e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d3a:	428b      	cmp	r3, r1
 8001d3c:	d101      	bne.n	8001d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001d3e:	4b44      	ldr	r3, [pc, #272]	; (8001e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d40:	e001      	b.n	8001d46 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001d42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d4a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f043 0204 	orr.w	r2, r3, #4
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff fe4a 	bl	8001a08 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d74:	e089      	b.n	8001e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d107      	bne.n	8001d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d002      	beq.n	8001d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f8be 	bl	8001f0c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d107      	bne.n	8001daa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f8fd 	bl	8001fa4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db0:	2b40      	cmp	r3, #64	; 0x40
 8001db2:	d12f      	bne.n	8001e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f003 0320 	and.w	r3, r3, #32
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d02a      	beq.n	8001e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001dcc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1e      	ldr	r2, [pc, #120]	; (8001e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d101      	bne.n	8001ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001dda:	e001      	b.n	8001de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001ddc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4919      	ldr	r1, [pc, #100]	; (8001e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001de8:	428b      	cmp	r3, r1
 8001dea:	d101      	bne.n	8001df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001dec:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001dee:	e001      	b.n	8001df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001df0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001df4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001df8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	f043 0202 	orr.w	r2, r3, #2
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fdfa 	bl	8001a08 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d136      	bne.n	8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	f003 0320 	and.w	r3, r3, #32
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d031      	beq.n	8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a07      	ldr	r2, [pc, #28]	; (8001e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d101      	bne.n	8001e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001e32:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e34:	e001      	b.n	8001e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001e36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4902      	ldr	r1, [pc, #8]	; (8001e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e42:	428b      	cmp	r3, r1
 8001e44:	d106      	bne.n	8001e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001e46:	4b02      	ldr	r3, [pc, #8]	; (8001e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e48:	e006      	b.n	8001e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001e4a:	bf00      	nop
 8001e4c:	40003800 	.word	0x40003800
 8001e50:	40003400 	.word	0x40003400
 8001e54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e5c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e6c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	f043 0204 	orr.w	r2, r3, #4
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff fdc0 	bl	8001a08 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e88:	e000      	b.n	8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e8a:	bf00      	nop
}
 8001e8c:	bf00      	nop
 8001e8e:	3720      	adds	r7, #32
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	1c99      	adds	r1, r3, #2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6251      	str	r1, [r2, #36]	; 0x24
 8001eba:	881a      	ldrh	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d113      	bne.n	8001f02 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ee8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d106      	bne.n	8001f02 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff ffc9 	bl	8001e94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	1c99      	adds	r1, r3, #2
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6251      	str	r1, [r2, #36]	; 0x24
 8001f1e:	8819      	ldrh	r1, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a1d      	ldr	r2, [pc, #116]	; (8001f9c <I2SEx_TxISR_I2SExt+0x90>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d101      	bne.n	8001f2e <I2SEx_TxISR_I2SExt+0x22>
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <I2SEx_TxISR_I2SExt+0x94>)
 8001f2c:	e001      	b.n	8001f32 <I2SEx_TxISR_I2SExt+0x26>
 8001f2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f32:	460a      	mov	r2, r1
 8001f34:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d121      	bne.n	8001f92 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <I2SEx_TxISR_I2SExt+0x90>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d101      	bne.n	8001f5c <I2SEx_TxISR_I2SExt+0x50>
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <I2SEx_TxISR_I2SExt+0x94>)
 8001f5a:	e001      	b.n	8001f60 <I2SEx_TxISR_I2SExt+0x54>
 8001f5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	490d      	ldr	r1, [pc, #52]	; (8001f9c <I2SEx_TxISR_I2SExt+0x90>)
 8001f68:	428b      	cmp	r3, r1
 8001f6a:	d101      	bne.n	8001f70 <I2SEx_TxISR_I2SExt+0x64>
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <I2SEx_TxISR_I2SExt+0x94>)
 8001f6e:	e001      	b.n	8001f74 <I2SEx_TxISR_I2SExt+0x68>
 8001f70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f78:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d106      	bne.n	8001f92 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff ff81 	bl	8001e94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40003800 	.word	0x40003800
 8001fa0:	40003400 	.word	0x40003400

08001fa4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68d8      	ldr	r0, [r3, #12]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb6:	1c99      	adds	r1, r3, #2
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001fbc:	b282      	uxth	r2, r0
 8001fbe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d113      	bne.n	8002000 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fe6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d106      	bne.n	8002000 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff ff4a 	bl	8001e94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002000:	bf00      	nop
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a20      	ldr	r2, [pc, #128]	; (8002098 <I2SEx_RxISR_I2SExt+0x90>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d101      	bne.n	800201e <I2SEx_RxISR_I2SExt+0x16>
 800201a:	4b20      	ldr	r3, [pc, #128]	; (800209c <I2SEx_RxISR_I2SExt+0x94>)
 800201c:	e001      	b.n	8002022 <I2SEx_RxISR_I2SExt+0x1a>
 800201e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002022:	68d8      	ldr	r0, [r3, #12]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002028:	1c99      	adds	r1, r3, #2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800202e:	b282      	uxth	r2, r0
 8002030:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002036:	b29b      	uxth	r3, r3
 8002038:	3b01      	subs	r3, #1
 800203a:	b29a      	uxth	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002044:	b29b      	uxth	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d121      	bne.n	800208e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a12      	ldr	r2, [pc, #72]	; (8002098 <I2SEx_RxISR_I2SExt+0x90>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d101      	bne.n	8002058 <I2SEx_RxISR_I2SExt+0x50>
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <I2SEx_RxISR_I2SExt+0x94>)
 8002056:	e001      	b.n	800205c <I2SEx_RxISR_I2SExt+0x54>
 8002058:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	490d      	ldr	r1, [pc, #52]	; (8002098 <I2SEx_RxISR_I2SExt+0x90>)
 8002064:	428b      	cmp	r3, r1
 8002066:	d101      	bne.n	800206c <I2SEx_RxISR_I2SExt+0x64>
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <I2SEx_RxISR_I2SExt+0x94>)
 800206a:	e001      	b.n	8002070 <I2SEx_RxISR_I2SExt+0x68>
 800206c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002070:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002074:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207a:	b29b      	uxth	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	d106      	bne.n	800208e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ff03 	bl	8001e94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40003800 	.word	0x40003800
 800209c:	40003400 	.word	0x40003400

080020a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a2:	b08f      	sub	sp, #60	; 0x3c
 80020a4:	af0a      	add	r7, sp, #40	; 0x28
 80020a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e10f      	b.n	80022d2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d106      	bne.n	80020d2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f005 f973 	bl	80073b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2203      	movs	r2, #3
 80020d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d102      	bne.n	80020ec <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f002 f8ba 	bl	800426a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	687e      	ldr	r6, [r7, #4]
 80020fe:	466d      	mov	r5, sp
 8002100:	f106 0410 	add.w	r4, r6, #16
 8002104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800210a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800210c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002110:	e885 0003 	stmia.w	r5, {r0, r1}
 8002114:	1d33      	adds	r3, r6, #4
 8002116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002118:	6838      	ldr	r0, [r7, #0]
 800211a:	f001 ff92 	bl	8004042 <USB_CoreInit>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0d0      	b.n	80022d2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f002 f8a8 	bl	800428c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213c:	2300      	movs	r3, #0
 800213e:	73fb      	strb	r3, [r7, #15]
 8002140:	e04a      	b.n	80021d8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	1a9b      	subs	r3, r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	333d      	adds	r3, #61	; 0x3d
 8002152:	2201      	movs	r2, #1
 8002154:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002156:	7bfa      	ldrb	r2, [r7, #15]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	333c      	adds	r3, #60	; 0x3c
 8002166:	7bfa      	ldrb	r2, [r7, #15]
 8002168:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800216a:	7bfa      	ldrb	r2, [r7, #15]
 800216c:	7bfb      	ldrb	r3, [r7, #15]
 800216e:	b298      	uxth	r0, r3
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	1a9b      	subs	r3, r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	3342      	adds	r3, #66	; 0x42
 800217e:	4602      	mov	r2, r0
 8002180:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002182:	7bfa      	ldrb	r2, [r7, #15]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	333f      	adds	r3, #63	; 0x3f
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002196:	7bfa      	ldrb	r2, [r7, #15]
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	1a9b      	subs	r3, r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	3344      	adds	r3, #68	; 0x44
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021aa:	7bfa      	ldrb	r2, [r7, #15]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	1a9b      	subs	r3, r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	3348      	adds	r3, #72	; 0x48
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	1a9b      	subs	r3, r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	3350      	adds	r3, #80	; 0x50
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
 80021d4:	3301      	adds	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
 80021d8:	7bfa      	ldrb	r2, [r7, #15]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d3af      	bcc.n	8002142 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021e2:	2300      	movs	r3, #0
 80021e4:	73fb      	strb	r3, [r7, #15]
 80021e6:	e044      	b.n	8002272 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021e8:	7bfa      	ldrb	r2, [r7, #15]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021fe:	7bfa      	ldrb	r2, [r7, #15]
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002214:	7bfa      	ldrb	r2, [r7, #15]
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	1a9b      	subs	r3, r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800222a:	7bfa      	ldrb	r2, [r7, #15]
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	440b      	add	r3, r1
 8002238:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002240:	7bfa      	ldrb	r2, [r7, #15]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002256:	7bfa      	ldrb	r2, [r7, #15]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	3301      	adds	r3, #1
 8002270:	73fb      	strb	r3, [r7, #15]
 8002272:	7bfa      	ldrb	r2, [r7, #15]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	429a      	cmp	r2, r3
 800227a:	d3b5      	bcc.n	80021e8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	603b      	str	r3, [r7, #0]
 8002282:	687e      	ldr	r6, [r7, #4]
 8002284:	466d      	mov	r5, sp
 8002286:	f106 0410 	add.w	r4, r6, #16
 800228a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800228c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800228e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002292:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002296:	e885 0003 	stmia.w	r5, {r0, r1}
 800229a:	1d33      	adds	r3, r6, #4
 800229c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800229e:	6838      	ldr	r0, [r7, #0]
 80022a0:	f002 f81e 	bl	80042e0 <USB_DevInit>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d005      	beq.n	80022b6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2202      	movs	r2, #2
 80022ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00d      	b.n	80022d2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f003 f866 	bl	800539c <USB_DevDisconnect>

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_PCD_Start+0x1c>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e020      	b.n	8002338 <HAL_PCD_Start+0x5e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002302:	2b01      	cmp	r3, #1
 8002304:	d109      	bne.n	800231a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800230a:	2b01      	cmp	r3, #1
 800230c:	d005      	beq.n	800231a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002312:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f001 ff92 	bl	8004248 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f003 f816 	bl	800535a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b08d      	sub	sp, #52	; 0x34
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f003 f8d4 	bl	8005504 <USB_GetMode>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	f040 839d 	bne.w	8002a9e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f003 f838 	bl	80053de <USB_ReadInterrupts>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 8393 	beq.w	8002a9c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f003 f82f 	bl	80053de <USB_ReadInterrupts>
 8002380:	4603      	mov	r3, r0
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b02      	cmp	r3, #2
 8002388:	d107      	bne.n	800239a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695a      	ldr	r2, [r3, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f002 0202 	and.w	r2, r2, #2
 8002398:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f003 f81d 	bl	80053de <USB_ReadInterrupts>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	2b10      	cmp	r3, #16
 80023ac:	d161      	bne.n	8002472 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699a      	ldr	r2, [r3, #24]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0210 	bic.w	r2, r2, #16
 80023bc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	f003 020f 	and.w	r2, r3, #15
 80023ca:	4613      	mov	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	1a9b      	subs	r3, r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	3304      	adds	r3, #4
 80023dc:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	0c5b      	lsrs	r3, r3, #17
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d124      	bne.n	8002434 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d035      	beq.n	8002462 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002400:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002404:	b29b      	uxth	r3, r3
 8002406:	461a      	mov	r2, r3
 8002408:	6a38      	ldr	r0, [r7, #32]
 800240a:	f002 fe83 	bl	8005114 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800241a:	441a      	add	r2, r3
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	699a      	ldr	r2, [r3, #24]
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	091b      	lsrs	r3, r3, #4
 8002428:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800242c:	441a      	add	r2, r3
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	619a      	str	r2, [r3, #24]
 8002432:	e016      	b.n	8002462 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	0c5b      	lsrs	r3, r3, #17
 8002438:	f003 030f 	and.w	r3, r3, #15
 800243c:	2b06      	cmp	r3, #6
 800243e:	d110      	bne.n	8002462 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002446:	2208      	movs	r2, #8
 8002448:	4619      	mov	r1, r3
 800244a:	6a38      	ldr	r0, [r7, #32]
 800244c:	f002 fe62 	bl	8005114 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	699a      	ldr	r2, [r3, #24]
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	091b      	lsrs	r3, r3, #4
 8002458:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800245c:	441a      	add	r2, r3
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	699a      	ldr	r2, [r3, #24]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 0210 	orr.w	r2, r2, #16
 8002470:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f002 ffb1 	bl	80053de <USB_ReadInterrupts>
 800247c:	4603      	mov	r3, r0
 800247e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002482:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002486:	d16e      	bne.n	8002566 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f002 ffb7 	bl	8005404 <USB_ReadDevAllOutEpInterrupt>
 8002496:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002498:	e062      	b.n	8002560 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800249a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d057      	beq.n	8002554 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f002 ffdc 	bl	800546c <USB_ReadDevOutEPInterrupt>
 80024b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00c      	beq.n	80024da <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024cc:	461a      	mov	r2, r3
 80024ce:	2301      	movs	r3, #1
 80024d0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80024d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fdb1 	bl	800303c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00c      	beq.n	80024fe <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f0:	461a      	mov	r2, r3
 80024f2:	2308      	movs	r3, #8
 80024f4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80024f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 feab 	bl	8003254 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	4413      	add	r3, r2
 8002510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002514:	461a      	mov	r2, r3
 8002516:	2310      	movs	r3, #16
 8002518:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	4413      	add	r3, r2
 800252c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002530:	461a      	mov	r2, r3
 8002532:	2320      	movs	r3, #32
 8002534:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d009      	beq.n	8002554 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	4413      	add	r3, r2
 8002548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800254c:	461a      	mov	r2, r3
 800254e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002552:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	3301      	adds	r3, #1
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255c:	085b      	lsrs	r3, r3, #1
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002562:	2b00      	cmp	r3, #0
 8002564:	d199      	bne.n	800249a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f002 ff37 	bl	80053de <USB_ReadInterrupts>
 8002570:	4603      	mov	r3, r0
 8002572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002576:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800257a:	f040 80c0 	bne.w	80026fe <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f002 ff58 	bl	8005438 <USB_ReadDevAllInEpInterrupt>
 8002588:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800258e:	e0b2      	b.n	80026f6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 80a7 	beq.w	80026ea <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f002 ff7e 	bl	80054a8 <USB_ReadDevInEPInterrupt>
 80025ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d057      	beq.n	8002668 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	2201      	movs	r2, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69f9      	ldr	r1, [r7, #28]
 80025d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80025d8:	4013      	ands	r3, r2
 80025da:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025e8:	461a      	mov	r2, r3
 80025ea:	2301      	movs	r3, #1
 80025ec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d132      	bne.n	800265c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fa:	4613      	mov	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	3348      	adds	r3, #72	; 0x48
 8002606:	6819      	ldr	r1, [r3, #0]
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800260c:	4613      	mov	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4403      	add	r3, r0
 8002616:	3344      	adds	r3, #68	; 0x44
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4419      	add	r1, r3
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002620:	4613      	mov	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	1a9b      	subs	r3, r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4403      	add	r3, r0
 800262a:	3348      	adds	r3, #72	; 0x48
 800262c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	2b00      	cmp	r3, #0
 8002632:	d113      	bne.n	800265c <HAL_PCD_IRQHandler+0x31c>
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002638:	4613      	mov	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	3350      	adds	r3, #80	; 0x50
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d108      	bne.n	800265c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002654:	461a      	mov	r2, r3
 8002656:	2101      	movs	r1, #1
 8002658:	f002 ff86 	bl	8005568 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	b2db      	uxtb	r3, r3
 8002660:	4619      	mov	r1, r3
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f004 ff37 	bl	80074d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d008      	beq.n	8002684 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	4413      	add	r3, r2
 800267a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800267e:	461a      	mov	r2, r3
 8002680:	2308      	movs	r3, #8
 8002682:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f003 0310 	and.w	r3, r3, #16
 800268a:	2b00      	cmp	r3, #0
 800268c:	d008      	beq.n	80026a0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	4413      	add	r3, r2
 8002696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800269a:	461a      	mov	r2, r3
 800269c:	2310      	movs	r3, #16
 800269e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d008      	beq.n	80026bc <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	015a      	lsls	r2, r3, #5
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026b6:	461a      	mov	r2, r3
 80026b8:	2340      	movs	r3, #64	; 0x40
 80026ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026d2:	461a      	mov	r2, r3
 80026d4:	2302      	movs	r3, #2
 80026d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80026e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 fc1b 	bl	8002f20 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	3301      	adds	r3, #1
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f2:	085b      	lsrs	r3, r3, #1
 80026f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f47f af49 	bne.w	8002590 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f002 fe6b 	bl	80053de <USB_ReadInterrupts>
 8002708:	4603      	mov	r3, r0
 800270a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800270e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002712:	d122      	bne.n	800275a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002722:	f023 0301 	bic.w	r3, r3, #1
 8002726:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800272e:	2b01      	cmp	r3, #1
 8002730:	d108      	bne.n	8002744 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800273a:	2100      	movs	r1, #0
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 fe27 	bl	8003390 <HAL_PCDEx_LPM_Callback>
 8002742:	e002      	b.n	800274a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f004 ff3d 	bl	80075c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695a      	ldr	r2, [r3, #20]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002758:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f002 fe3d 	bl	80053de <USB_ReadInterrupts>
 8002764:	4603      	mov	r3, r0
 8002766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800276a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800276e:	d112      	bne.n	8002796 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b01      	cmp	r3, #1
 800277e:	d102      	bne.n	8002786 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f004 fef9 	bl	8007578 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695a      	ldr	r2, [r3, #20]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002794:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f002 fe1f 	bl	80053de <USB_ReadInterrupts>
 80027a0:	4603      	mov	r3, r0
 80027a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027aa:	f040 80c7 	bne.w	800293c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027bc:	f023 0301 	bic.w	r3, r3, #1
 80027c0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2110      	movs	r1, #16
 80027c8:	4618      	mov	r0, r3
 80027ca:	f001 feed 	bl	80045a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ce:	2300      	movs	r3, #0
 80027d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027d2:	e056      	b.n	8002882 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80027d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027e0:	461a      	mov	r2, r3
 80027e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027e6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ea:	015a      	lsls	r2, r3, #5
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f8:	0151      	lsls	r1, r2, #5
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	440a      	add	r2, r1
 80027fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002802:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002806:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	4413      	add	r3, r2
 8002810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002818:	0151      	lsls	r1, r2, #5
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	440a      	add	r2, r1
 800281e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002822:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002826:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	4413      	add	r3, r2
 8002830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002834:	461a      	mov	r2, r3
 8002836:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800283a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800283c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	4413      	add	r3, r2
 8002844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800284c:	0151      	lsls	r1, r2, #5
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	440a      	add	r2, r1
 8002852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002856:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800285a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800285c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	4413      	add	r3, r2
 8002864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800286c:	0151      	lsls	r1, r2, #5
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	440a      	add	r2, r1
 8002872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002876:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800287a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800287c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287e:	3301      	adds	r3, #1
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002888:	429a      	cmp	r2, r3
 800288a:	d3a3      	bcc.n	80027d4 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	69fa      	ldr	r2, [r7, #28]
 8002896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800289a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800289e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d016      	beq.n	80028d6 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028b2:	69fa      	ldr	r2, [r7, #28]
 80028b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028b8:	f043 030b 	orr.w	r3, r3, #11
 80028bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c8:	69fa      	ldr	r2, [r7, #28]
 80028ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028ce:	f043 030b 	orr.w	r3, r3, #11
 80028d2:	6453      	str	r3, [r2, #68]	; 0x44
 80028d4:	e015      	b.n	8002902 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028e8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80028ec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028fc:	f043 030b 	orr.w	r3, r3, #11
 8002900:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002910:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002914:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002926:	461a      	mov	r2, r3
 8002928:	f002 fe1e 	bl	8005568 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800293a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f002 fd4c 	bl	80053de <USB_ReadInterrupts>
 8002946:	4603      	mov	r3, r0
 8002948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800294c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002950:	d124      	bne.n	800299c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f002 fde2 	bl	8005520 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f001 fe82 	bl	800466a <USB_GetDevSpeed>
 8002966:	4603      	mov	r3, r0
 8002968:	461a      	mov	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681c      	ldr	r4, [r3, #0]
 8002972:	f001 f97d 	bl	8003c70 <HAL_RCC_GetHCLKFreq>
 8002976:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800297c:	b2db      	uxtb	r3, r3
 800297e:	461a      	mov	r2, r3
 8002980:	4620      	mov	r0, r4
 8002982:	f001 fbbf 	bl	8004104 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f004 fdcd 	bl	8007526 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800299a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f002 fd1c 	bl	80053de <USB_ReadInterrupts>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d10a      	bne.n	80029c6 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f004 fdaa 	bl	800750a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695a      	ldr	r2, [r3, #20]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f002 0208 	and.w	r2, r2, #8
 80029c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f002 fd07 	bl	80053de <USB_ReadInterrupts>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029da:	d10f      	bne.n	80029fc <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	4619      	mov	r1, r3
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f004 fe0c 	bl	8007604 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695a      	ldr	r2, [r3, #20]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80029fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f002 fcec 	bl	80053de <USB_ReadInterrupts>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a10:	d10f      	bne.n	8002a32 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f004 fddf 	bl	80075e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695a      	ldr	r2, [r3, #20]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f002 fcd1 	bl	80053de <USB_ReadInterrupts>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a46:	d10a      	bne.n	8002a5e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f004 fded 	bl	8007628 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695a      	ldr	r2, [r3, #20]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f002 fcbb 	bl	80053de <USB_ReadInterrupts>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d115      	bne.n	8002a9e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f004 fddd 	bl	8007644 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6859      	ldr	r1, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	e000      	b.n	8002a9e <HAL_PCD_IRQHandler+0x75e>
      return;
 8002a9c:	bf00      	nop
    }
  }
}
 8002a9e:	3734      	adds	r7, #52	; 0x34
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd90      	pop	{r4, r7, pc}

08002aa4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d101      	bne.n	8002abe <HAL_PCD_SetAddress+0x1a>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e013      	b.n	8002ae6 <HAL_PCD_SetAddress+0x42>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	78fa      	ldrb	r2, [r7, #3]
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f002 fc19 	bl	800530e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b084      	sub	sp, #16
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	4608      	mov	r0, r1
 8002af8:	4611      	mov	r1, r2
 8002afa:	461a      	mov	r2, r3
 8002afc:	4603      	mov	r3, r0
 8002afe:	70fb      	strb	r3, [r7, #3]
 8002b00:	460b      	mov	r3, r1
 8002b02:	803b      	strh	r3, [r7, #0]
 8002b04:	4613      	mov	r3, r2
 8002b06:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	da0f      	bge.n	8002b34 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	f003 020f 	and.w	r2, r3, #15
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	1a9b      	subs	r3, r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	3338      	adds	r3, #56	; 0x38
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	4413      	add	r3, r2
 8002b28:	3304      	adds	r3, #4
 8002b2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	705a      	strb	r2, [r3, #1]
 8002b32:	e00f      	b.n	8002b54 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	f003 020f 	and.w	r2, r3, #15
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	1a9b      	subs	r3, r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	4413      	add	r3, r2
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b60:	883a      	ldrh	r2, [r7, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	78ba      	ldrb	r2, [r7, #2]
 8002b6a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	785b      	ldrb	r3, [r3, #1]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d004      	beq.n	8002b7e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b7e:	78bb      	ldrb	r3, [r7, #2]
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d102      	bne.n	8002b8a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_PCD_EP_Open+0xaa>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e00e      	b.n	8002bb6 <HAL_PCD_EP_Open+0xc8>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68f9      	ldr	r1, [r7, #12]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f001 fd84 	bl	80046b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002bb4:	7afb      	ldrb	r3, [r7, #11]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	da0f      	bge.n	8002bf2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bd2:	78fb      	ldrb	r3, [r7, #3]
 8002bd4:	f003 020f 	and.w	r2, r3, #15
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	3338      	adds	r3, #56	; 0x38
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	4413      	add	r3, r2
 8002be6:	3304      	adds	r3, #4
 8002be8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	705a      	strb	r2, [r3, #1]
 8002bf0:	e00f      	b.n	8002c12 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bf2:	78fb      	ldrb	r3, [r7, #3]
 8002bf4:	f003 020f 	and.w	r2, r3, #15
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	4413      	add	r3, r2
 8002c08:	3304      	adds	r3, #4
 8002c0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	f003 030f 	and.w	r3, r3, #15
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_PCD_EP_Close+0x6e>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e00e      	b.n	8002c4a <HAL_PCD_EP_Close+0x8c>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68f9      	ldr	r1, [r7, #12]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f001 fdc2 	bl	80047c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b086      	sub	sp, #24
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	603b      	str	r3, [r7, #0]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c62:	7afb      	ldrb	r3, [r7, #11]
 8002c64:	f003 020f 	and.w	r2, r3, #15
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4413      	add	r3, r2
 8002c78:	3304      	adds	r3, #4
 8002c7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2200      	movs	r2, #0
 8002c92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c94:	7afb      	ldrb	r3, [r7, #11]
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d102      	bne.n	8002cae <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cae:	7afb      	ldrb	r3, [r7, #11]
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d109      	bne.n	8002ccc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6818      	ldr	r0, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	6979      	ldr	r1, [r7, #20]
 8002cc6:	f002 f89d 	bl	8004e04 <USB_EP0StartXfer>
 8002cca:	e008      	b.n	8002cde <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	6979      	ldr	r1, [r7, #20]
 8002cda:	f001 fe4f 	bl	800497c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	f003 020f 	and.w	r2, r3, #15
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	460b      	mov	r3, r1
 8002d26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d28:	7afb      	ldrb	r3, [r7, #11]
 8002d2a:	f003 020f 	and.w	r2, r3, #15
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	3338      	adds	r3, #56	; 0x38
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2201      	movs	r2, #1
 8002d56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d58:	7afb      	ldrb	r3, [r7, #11]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d102      	bne.n	8002d72 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d72:	7afb      	ldrb	r3, [r7, #11]
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d109      	bne.n	8002d90 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6818      	ldr	r0, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	461a      	mov	r2, r3
 8002d88:	6979      	ldr	r1, [r7, #20]
 8002d8a:	f002 f83b 	bl	8004e04 <USB_EP0StartXfer>
 8002d8e:	e008      	b.n	8002da2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	6979      	ldr	r1, [r7, #20]
 8002d9e:	f001 fded 	bl	800497c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	f003 020f 	and.w	r2, r3, #15
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d901      	bls.n	8002dca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e050      	b.n	8002e6c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	da0f      	bge.n	8002df2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	f003 020f 	and.w	r2, r3, #15
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	3338      	adds	r3, #56	; 0x38
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	3304      	adds	r3, #4
 8002de8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	705a      	strb	r2, [r3, #1]
 8002df0:	e00d      	b.n	8002e0e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	4613      	mov	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	4413      	add	r3, r2
 8002e04:	3304      	adds	r3, #4
 8002e06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2201      	movs	r2, #1
 8002e12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_PCD_EP_SetStall+0x82>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e01e      	b.n	8002e6c <HAL_PCD_EP_SetStall+0xc0>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68f9      	ldr	r1, [r7, #12]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f002 f992 	bl	8005166 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10a      	bne.n	8002e62 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	b2d9      	uxtb	r1, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f002 fb83 	bl	8005568 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	f003 020f 	and.w	r2, r3, #15
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d901      	bls.n	8002e92 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e042      	b.n	8002f18 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	da0f      	bge.n	8002eba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e9a:	78fb      	ldrb	r3, [r7, #3]
 8002e9c:	f003 020f 	and.w	r2, r3, #15
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	3338      	adds	r3, #56	; 0x38
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	4413      	add	r3, r2
 8002eae:	3304      	adds	r3, #4
 8002eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	705a      	strb	r2, [r3, #1]
 8002eb8:	e00f      	b.n	8002eda <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eba:	78fb      	ldrb	r3, [r7, #3]
 8002ebc:	f003 020f 	and.w	r2, r3, #15
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	1a9b      	subs	r3, r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	4413      	add	r3, r2
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ee0:	78fb      	ldrb	r3, [r7, #3]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_PCD_EP_ClrStall+0x86>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e00e      	b.n	8002f18 <HAL_PCD_EP_ClrStall+0xa4>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68f9      	ldr	r1, [r7, #12]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f002 f99a 	bl	8005242 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08a      	sub	sp, #40	; 0x28
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	4613      	mov	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	1a9b      	subs	r3, r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	3338      	adds	r3, #56	; 0x38
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	4413      	add	r3, r2
 8002f44:	3304      	adds	r3, #4
 8002f46:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	699a      	ldr	r2, [r3, #24]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d901      	bls.n	8002f58 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e06c      	b.n	8003032 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	695a      	ldr	r2, [r3, #20]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	69fa      	ldr	r2, [r7, #28]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d902      	bls.n	8002f74 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	3303      	adds	r3, #3
 8002f78:	089b      	lsrs	r3, r3, #2
 8002f7a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f7c:	e02b      	b.n	8002fd6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	695a      	ldr	r2, [r3, #20]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d902      	bls.n	8002f9a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3303      	adds	r3, #3
 8002f9e:	089b      	lsrs	r3, r3, #2
 8002fa0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	68d9      	ldr	r1, [r3, #12]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	6978      	ldr	r0, [r7, #20]
 8002fba:	f002 f876 	bl	80050aa <USB_WritePacket>

    ep->xfer_buff  += len;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	441a      	add	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	699a      	ldr	r2, [r3, #24]
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	441a      	add	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d809      	bhi.n	8003000 <PCD_WriteEmptyTxFifo+0xe0>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	699a      	ldr	r2, [r3, #24]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d203      	bcs.n	8003000 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1be      	bne.n	8002f7e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	695a      	ldr	r2, [r3, #20]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	429a      	cmp	r2, r3
 800300a:	d811      	bhi.n	8003030 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	2201      	movs	r2, #1
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	43db      	mvns	r3, r3
 8003026:	6939      	ldr	r1, [r7, #16]
 8003028:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800302c:	4013      	ands	r3, r2
 800302e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3720      	adds	r7, #32
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	333c      	adds	r3, #60	; 0x3c
 8003054:	3304      	adds	r3, #4
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4413      	add	r3, r2
 8003062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	2b01      	cmp	r3, #1
 8003070:	f040 80a0 	bne.w	80031b4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d015      	beq.n	80030aa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4a72      	ldr	r2, [pc, #456]	; (800324c <PCD_EP_OutXfrComplete_int+0x210>)
 8003082:	4293      	cmp	r3, r2
 8003084:	f240 80dd 	bls.w	8003242 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 80d7 	beq.w	8003242 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a0:	461a      	mov	r2, r3
 80030a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030a6:	6093      	str	r3, [r2, #8]
 80030a8:	e0cb      	b.n	8003242 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d009      	beq.n	80030c8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c0:	461a      	mov	r2, r3
 80030c2:	2320      	movs	r3, #32
 80030c4:	6093      	str	r3, [r2, #8]
 80030c6:	e0bc      	b.n	8003242 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f040 80b7 	bne.w	8003242 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4a5d      	ldr	r2, [pc, #372]	; (800324c <PCD_EP_OutXfrComplete_int+0x210>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d90f      	bls.n	80030fc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00a      	beq.n	80030fc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f2:	461a      	mov	r2, r3
 80030f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030f8:	6093      	str	r3, [r2, #8]
 80030fa:	e0a2      	b.n	8003242 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	4613      	mov	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	1a9b      	subs	r3, r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800310e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	0159      	lsls	r1, r3, #5
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	440b      	add	r3, r1
 8003118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003122:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4403      	add	r3, r0
 8003132:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003136:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800314a:	6819      	ldr	r1, [r3, #0]
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4403      	add	r3, r0
 800315a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4419      	add	r1, r3
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4403      	add	r3, r0
 8003170:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003174:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d114      	bne.n	80031a6 <PCD_EP_OutXfrComplete_int+0x16a>
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	4613      	mov	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d108      	bne.n	80031a6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800319e:	461a      	mov	r2, r3
 80031a0:	2101      	movs	r1, #1
 80031a2:	f002 f9e1 	bl	8005568 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	4619      	mov	r1, r3
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f004 f977 	bl	80074a0 <HAL_PCD_DataOutStageCallback>
 80031b2:	e046      	b.n	8003242 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4a26      	ldr	r2, [pc, #152]	; (8003250 <PCD_EP_OutXfrComplete_int+0x214>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d124      	bne.n	8003206 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	015a      	lsls	r2, r3, #5
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d2:	461a      	mov	r2, r3
 80031d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d8:	6093      	str	r3, [r2, #8]
 80031da:	e032      	b.n	8003242 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d008      	beq.n	80031f8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	015a      	lsls	r2, r3, #5
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f2:	461a      	mov	r2, r3
 80031f4:	2320      	movs	r3, #32
 80031f6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	4619      	mov	r1, r3
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f004 f94e 	bl	80074a0 <HAL_PCD_DataOutStageCallback>
 8003204:	e01d      	b.n	8003242 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d114      	bne.n	8003236 <PCD_EP_OutXfrComplete_int+0x1fa>
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d108      	bne.n	8003236 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6818      	ldr	r0, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800322e:	461a      	mov	r2, r3
 8003230:	2100      	movs	r1, #0
 8003232:	f002 f999 	bl	8005568 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	4619      	mov	r1, r3
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f004 f92f 	bl	80074a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	4f54300a 	.word	0x4f54300a
 8003250:	4f54310a 	.word	0x4f54310a

08003254 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	333c      	adds	r3, #60	; 0x3c
 800326c:	3304      	adds	r3, #4
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4413      	add	r3, r2
 800327a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4a15      	ldr	r2, [pc, #84]	; (80032dc <PCD_EP_OutSetupPacket_int+0x88>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d90e      	bls.n	80032a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003290:	2b00      	cmp	r3, #0
 8003292:	d009      	beq.n	80032a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a0:	461a      	mov	r2, r3
 80032a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f004 f8e7 	bl	800747c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <PCD_EP_OutSetupPacket_int+0x88>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d90c      	bls.n	80032d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d108      	bne.n	80032d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032c8:	461a      	mov	r2, r3
 80032ca:	2101      	movs	r1, #1
 80032cc:	f002 f94c 	bl	8005568 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	4f54300a 	.word	0x4f54300a

080032e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
 80032ec:	4613      	mov	r3, r2
 80032ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d107      	bne.n	800330e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032fe:	883b      	ldrh	r3, [r7, #0]
 8003300:	0419      	lsls	r1, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	430a      	orrs	r2, r1
 800330a:	629a      	str	r2, [r3, #40]	; 0x28
 800330c:	e028      	b.n	8003360 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003314:	0c1b      	lsrs	r3, r3, #16
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	4413      	add	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800331c:	2300      	movs	r3, #0
 800331e:	73fb      	strb	r3, [r7, #15]
 8003320:	e00d      	b.n	800333e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	3340      	adds	r3, #64	; 0x40
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	0c1b      	lsrs	r3, r3, #16
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	4413      	add	r3, r2
 8003336:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	3301      	adds	r3, #1
 800333c:	73fb      	strb	r3, [r7, #15]
 800333e:	7bfa      	ldrb	r2, [r7, #15]
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	3b01      	subs	r3, #1
 8003344:	429a      	cmp	r2, r3
 8003346:	d3ec      	bcc.n	8003322 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003348:	883b      	ldrh	r3, [r7, #0]
 800334a:	0418      	lsls	r0, r3, #16
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6819      	ldr	r1, [r3, #0]
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	3b01      	subs	r3, #1
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	4302      	orrs	r2, r0
 8003358:	3340      	adds	r3, #64	; 0x40
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	460b      	mov	r3, r1
 8003378:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	887a      	ldrh	r2, [r7, #2]
 8003380:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e267      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d075      	beq.n	80034b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033c6:	4b88      	ldr	r3, [pc, #544]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d00c      	beq.n	80033ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033d2:	4b85      	ldr	r3, [pc, #532]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d112      	bne.n	8003404 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033de:	4b82      	ldr	r3, [pc, #520]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ea:	d10b      	bne.n	8003404 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	4b7e      	ldr	r3, [pc, #504]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d05b      	beq.n	80034b0 <HAL_RCC_OscConfig+0x108>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d157      	bne.n	80034b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e242      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340c:	d106      	bne.n	800341c <HAL_RCC_OscConfig+0x74>
 800340e:	4b76      	ldr	r3, [pc, #472]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a75      	ldr	r2, [pc, #468]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	e01d      	b.n	8003458 <HAL_RCC_OscConfig+0xb0>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0x98>
 8003426:	4b70      	ldr	r3, [pc, #448]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a6f      	ldr	r2, [pc, #444]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 800342c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	4b6d      	ldr	r3, [pc, #436]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a6c      	ldr	r2, [pc, #432]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	e00b      	b.n	8003458 <HAL_RCC_OscConfig+0xb0>
 8003440:	4b69      	ldr	r3, [pc, #420]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a68      	ldr	r2, [pc, #416]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	4b66      	ldr	r3, [pc, #408]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a65      	ldr	r2, [pc, #404]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d013      	beq.n	8003488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003460:	f7fd fd28 	bl	8000eb4 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003468:	f7fd fd24 	bl	8000eb4 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	; 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e207      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	4b5b      	ldr	r3, [pc, #364]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0xc0>
 8003486:	e014      	b.n	80034b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7fd fd14 	bl	8000eb4 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003490:	f7fd fd10 	bl	8000eb4 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	; 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e1f3      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a2:	4b51      	ldr	r3, [pc, #324]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0xe8>
 80034ae:	e000      	b.n	80034b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d063      	beq.n	8003586 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034be:	4b4a      	ldr	r3, [pc, #296]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00b      	beq.n	80034e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ca:	4b47      	ldr	r3, [pc, #284]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d11c      	bne.n	8003510 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034d6:	4b44      	ldr	r3, [pc, #272]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d116      	bne.n	8003510 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e2:	4b41      	ldr	r3, [pc, #260]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <HAL_RCC_OscConfig+0x152>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d001      	beq.n	80034fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e1c7      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fa:	4b3b      	ldr	r3, [pc, #236]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4937      	ldr	r1, [pc, #220]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 800350a:	4313      	orrs	r3, r2
 800350c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350e:	e03a      	b.n	8003586 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d020      	beq.n	800355a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003518:	4b34      	ldr	r3, [pc, #208]	; (80035ec <HAL_RCC_OscConfig+0x244>)
 800351a:	2201      	movs	r2, #1
 800351c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351e:	f7fd fcc9 	bl	8000eb4 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003526:	f7fd fcc5 	bl	8000eb4 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e1a8      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003538:	4b2b      	ldr	r3, [pc, #172]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0f0      	beq.n	8003526 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003544:	4b28      	ldr	r3, [pc, #160]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4925      	ldr	r1, [pc, #148]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003554:	4313      	orrs	r3, r2
 8003556:	600b      	str	r3, [r1, #0]
 8003558:	e015      	b.n	8003586 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800355a:	4b24      	ldr	r3, [pc, #144]	; (80035ec <HAL_RCC_OscConfig+0x244>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fd fca8 	bl	8000eb4 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003568:	f7fd fca4 	bl	8000eb4 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e187      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357a:	4b1b      	ldr	r3, [pc, #108]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d036      	beq.n	8003600 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d016      	beq.n	80035c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800359a:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <HAL_RCC_OscConfig+0x248>)
 800359c:	2201      	movs	r2, #1
 800359e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a0:	f7fd fc88 	bl	8000eb4 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035a8:	f7fd fc84 	bl	8000eb4 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e167      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ba:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80035bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x200>
 80035c6:	e01b      	b.n	8003600 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c8:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <HAL_RCC_OscConfig+0x248>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ce:	f7fd fc71 	bl	8000eb4 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d4:	e00e      	b.n	80035f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d6:	f7fd fc6d 	bl	8000eb4 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d907      	bls.n	80035f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e150      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
 80035e8:	40023800 	.word	0x40023800
 80035ec:	42470000 	.word	0x42470000
 80035f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f4:	4b88      	ldr	r3, [pc, #544]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80035f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1ea      	bne.n	80035d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 8097 	beq.w	800373c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800360e:	2300      	movs	r3, #0
 8003610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003612:	4b81      	ldr	r3, [pc, #516]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10f      	bne.n	800363e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	4b7d      	ldr	r3, [pc, #500]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	4a7c      	ldr	r2, [pc, #496]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362c:	6413      	str	r3, [r2, #64]	; 0x40
 800362e:	4b7a      	ldr	r3, [pc, #488]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003636:	60bb      	str	r3, [r7, #8]
 8003638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363a:	2301      	movs	r3, #1
 800363c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363e:	4b77      	ldr	r3, [pc, #476]	; (800381c <HAL_RCC_OscConfig+0x474>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d118      	bne.n	800367c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800364a:	4b74      	ldr	r3, [pc, #464]	; (800381c <HAL_RCC_OscConfig+0x474>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a73      	ldr	r2, [pc, #460]	; (800381c <HAL_RCC_OscConfig+0x474>)
 8003650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003656:	f7fd fc2d 	bl	8000eb4 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365e:	f7fd fc29 	bl	8000eb4 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e10c      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003670:	4b6a      	ldr	r3, [pc, #424]	; (800381c <HAL_RCC_OscConfig+0x474>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0f0      	beq.n	800365e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d106      	bne.n	8003692 <HAL_RCC_OscConfig+0x2ea>
 8003684:	4b64      	ldr	r3, [pc, #400]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	4a63      	ldr	r2, [pc, #396]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	6713      	str	r3, [r2, #112]	; 0x70
 8003690:	e01c      	b.n	80036cc <HAL_RCC_OscConfig+0x324>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b05      	cmp	r3, #5
 8003698:	d10c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x30c>
 800369a:	4b5f      	ldr	r3, [pc, #380]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	4a5e      	ldr	r2, [pc, #376]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80036a0:	f043 0304 	orr.w	r3, r3, #4
 80036a4:	6713      	str	r3, [r2, #112]	; 0x70
 80036a6:	4b5c      	ldr	r3, [pc, #368]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036aa:	4a5b      	ldr	r2, [pc, #364]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	6713      	str	r3, [r2, #112]	; 0x70
 80036b2:	e00b      	b.n	80036cc <HAL_RCC_OscConfig+0x324>
 80036b4:	4b58      	ldr	r3, [pc, #352]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	4a57      	ldr	r2, [pc, #348]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80036ba:	f023 0301 	bic.w	r3, r3, #1
 80036be:	6713      	str	r3, [r2, #112]	; 0x70
 80036c0:	4b55      	ldr	r3, [pc, #340]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	4a54      	ldr	r2, [pc, #336]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80036c6:	f023 0304 	bic.w	r3, r3, #4
 80036ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d015      	beq.n	8003700 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d4:	f7fd fbee 	bl	8000eb4 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036da:	e00a      	b.n	80036f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036dc:	f7fd fbea 	bl	8000eb4 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e0cb      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f2:	4b49      	ldr	r3, [pc, #292]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0ee      	beq.n	80036dc <HAL_RCC_OscConfig+0x334>
 80036fe:	e014      	b.n	800372a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003700:	f7fd fbd8 	bl	8000eb4 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003706:	e00a      	b.n	800371e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003708:	f7fd fbd4 	bl	8000eb4 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	; 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e0b5      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371e:	4b3e      	ldr	r3, [pc, #248]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1ee      	bne.n	8003708 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800372a:	7dfb      	ldrb	r3, [r7, #23]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d105      	bne.n	800373c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003730:	4b39      	ldr	r3, [pc, #228]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	4a38      	ldr	r2, [pc, #224]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800373a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 80a1 	beq.w	8003888 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003746:	4b34      	ldr	r3, [pc, #208]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b08      	cmp	r3, #8
 8003750:	d05c      	beq.n	800380c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d141      	bne.n	80037de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375a:	4b31      	ldr	r3, [pc, #196]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003760:	f7fd fba8 	bl	8000eb4 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003768:	f7fd fba4 	bl	8000eb4 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e087      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377a:	4b27      	ldr	r3, [pc, #156]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69da      	ldr	r2, [r3, #28]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	019b      	lsls	r3, r3, #6
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	085b      	lsrs	r3, r3, #1
 800379e:	3b01      	subs	r3, #1
 80037a0:	041b      	lsls	r3, r3, #16
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	061b      	lsls	r3, r3, #24
 80037aa:	491b      	ldr	r1, [pc, #108]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b0:	4b1b      	ldr	r3, [pc, #108]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b6:	f7fd fb7d 	bl	8000eb4 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037be:	f7fd fb79 	bl	8000eb4 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e05c      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d0:	4b11      	ldr	r3, [pc, #68]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f0      	beq.n	80037be <HAL_RCC_OscConfig+0x416>
 80037dc:	e054      	b.n	8003888 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037de:	4b10      	ldr	r3, [pc, #64]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fd fb66 	bl	8000eb4 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fd fb62 	bl	8000eb4 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e045      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fe:	4b06      	ldr	r3, [pc, #24]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x444>
 800380a:	e03d      	b.n	8003888 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d107      	bne.n	8003824 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e038      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
 8003818:	40023800 	.word	0x40023800
 800381c:	40007000 	.word	0x40007000
 8003820:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003824:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <HAL_RCC_OscConfig+0x4ec>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d028      	beq.n	8003884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800383c:	429a      	cmp	r2, r3
 800383e:	d121      	bne.n	8003884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384a:	429a      	cmp	r2, r3
 800384c:	d11a      	bne.n	8003884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003854:	4013      	ands	r3, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800385a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800385c:	4293      	cmp	r3, r2
 800385e:	d111      	bne.n	8003884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386a:	085b      	lsrs	r3, r3, #1
 800386c:	3b01      	subs	r3, #1
 800386e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003870:	429a      	cmp	r2, r3
 8003872:	d107      	bne.n	8003884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003880:	429a      	cmp	r2, r3
 8003882:	d001      	beq.n	8003888 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e000      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800

08003898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0cc      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038ac:	4b68      	ldr	r3, [pc, #416]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d90c      	bls.n	80038d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ba:	4b65      	ldr	r3, [pc, #404]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c2:	4b63      	ldr	r3, [pc, #396]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0b8      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d020      	beq.n	8003922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038ec:	4b59      	ldr	r3, [pc, #356]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	4a58      	ldr	r2, [pc, #352]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003904:	4b53      	ldr	r3, [pc, #332]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	4a52      	ldr	r2, [pc, #328]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800390e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003910:	4b50      	ldr	r3, [pc, #320]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	494d      	ldr	r1, [pc, #308]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	4313      	orrs	r3, r2
 8003920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d044      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d107      	bne.n	8003946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003936:	4b47      	ldr	r3, [pc, #284]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d119      	bne.n	8003976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e07f      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d003      	beq.n	8003956 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003952:	2b03      	cmp	r3, #3
 8003954:	d107      	bne.n	8003966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003956:	4b3f      	ldr	r3, [pc, #252]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d109      	bne.n	8003976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e06f      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003966:	4b3b      	ldr	r3, [pc, #236]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e067      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003976:	4b37      	ldr	r3, [pc, #220]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f023 0203 	bic.w	r2, r3, #3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	4934      	ldr	r1, [pc, #208]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	4313      	orrs	r3, r2
 8003986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003988:	f7fd fa94 	bl	8000eb4 <HAL_GetTick>
 800398c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398e:	e00a      	b.n	80039a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003990:	f7fd fa90 	bl	8000eb4 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	f241 3288 	movw	r2, #5000	; 0x1388
 800399e:	4293      	cmp	r3, r2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e04f      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a6:	4b2b      	ldr	r3, [pc, #172]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 020c 	and.w	r2, r3, #12
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d1eb      	bne.n	8003990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039b8:	4b25      	ldr	r3, [pc, #148]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d20c      	bcs.n	80039e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c6:	4b22      	ldr	r3, [pc, #136]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ce:	4b20      	ldr	r3, [pc, #128]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e032      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ec:	4b19      	ldr	r3, [pc, #100]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	4916      	ldr	r1, [pc, #88]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d009      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a0a:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	490e      	ldr	r1, [pc, #56]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a1e:	f000 f821 	bl	8003a64 <HAL_RCC_GetSysClockFreq>
 8003a22:	4602      	mov	r2, r0
 8003a24:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	091b      	lsrs	r3, r3, #4
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	490a      	ldr	r1, [pc, #40]	; (8003a58 <HAL_RCC_ClockConfig+0x1c0>)
 8003a30:	5ccb      	ldrb	r3, [r1, r3]
 8003a32:	fa22 f303 	lsr.w	r3, r2, r3
 8003a36:	4a09      	ldr	r2, [pc, #36]	; (8003a5c <HAL_RCC_ClockConfig+0x1c4>)
 8003a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a3a:	4b09      	ldr	r3, [pc, #36]	; (8003a60 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fd f9f4 	bl	8000e2c <HAL_InitTick>

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40023c00 	.word	0x40023c00
 8003a54:	40023800 	.word	0x40023800
 8003a58:	080083dc 	.word	0x080083dc
 8003a5c:	20000000 	.word	0x20000000
 8003a60:	20000004 	.word	0x20000004

08003a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a68:	b094      	sub	sp, #80	; 0x50
 8003a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a70:	2300      	movs	r3, #0
 8003a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a74:	2300      	movs	r3, #0
 8003a76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a7c:	4b79      	ldr	r3, [pc, #484]	; (8003c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 030c 	and.w	r3, r3, #12
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d00d      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	f200 80e1 	bhi.w	8003c50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_RCC_GetSysClockFreq+0x34>
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d003      	beq.n	8003a9e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a96:	e0db      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a98:	4b73      	ldr	r3, [pc, #460]	; (8003c68 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a9c:	e0db      	b.n	8003c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a9e:	4b73      	ldr	r3, [pc, #460]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x208>)
 8003aa0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003aa2:	e0d8      	b.n	8003c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aa4:	4b6f      	ldr	r3, [pc, #444]	; (8003c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aae:	4b6d      	ldr	r3, [pc, #436]	; (8003c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d063      	beq.n	8003b82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aba:	4b6a      	ldr	r3, [pc, #424]	; (8003c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	099b      	lsrs	r3, r3, #6
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ac4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003acc:	633b      	str	r3, [r7, #48]	; 0x30
 8003ace:	2300      	movs	r3, #0
 8003ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ad2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ad6:	4622      	mov	r2, r4
 8003ad8:	462b      	mov	r3, r5
 8003ada:	f04f 0000 	mov.w	r0, #0
 8003ade:	f04f 0100 	mov.w	r1, #0
 8003ae2:	0159      	lsls	r1, r3, #5
 8003ae4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ae8:	0150      	lsls	r0, r2, #5
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	4621      	mov	r1, r4
 8003af0:	1a51      	subs	r1, r2, r1
 8003af2:	6139      	str	r1, [r7, #16]
 8003af4:	4629      	mov	r1, r5
 8003af6:	eb63 0301 	sbc.w	r3, r3, r1
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b08:	4659      	mov	r1, fp
 8003b0a:	018b      	lsls	r3, r1, #6
 8003b0c:	4651      	mov	r1, sl
 8003b0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b12:	4651      	mov	r1, sl
 8003b14:	018a      	lsls	r2, r1, #6
 8003b16:	4651      	mov	r1, sl
 8003b18:	ebb2 0801 	subs.w	r8, r2, r1
 8003b1c:	4659      	mov	r1, fp
 8003b1e:	eb63 0901 	sbc.w	r9, r3, r1
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	f04f 0300 	mov.w	r3, #0
 8003b2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b36:	4690      	mov	r8, r2
 8003b38:	4699      	mov	r9, r3
 8003b3a:	4623      	mov	r3, r4
 8003b3c:	eb18 0303 	adds.w	r3, r8, r3
 8003b40:	60bb      	str	r3, [r7, #8]
 8003b42:	462b      	mov	r3, r5
 8003b44:	eb49 0303 	adc.w	r3, r9, r3
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b56:	4629      	mov	r1, r5
 8003b58:	024b      	lsls	r3, r1, #9
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b60:	4621      	mov	r1, r4
 8003b62:	024a      	lsls	r2, r1, #9
 8003b64:	4610      	mov	r0, r2
 8003b66:	4619      	mov	r1, r3
 8003b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b74:	f7fc fb84 	bl	8000280 <__aeabi_uldivmod>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b80:	e058      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b82:	4b38      	ldr	r3, [pc, #224]	; (8003c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	099b      	lsrs	r3, r3, #6
 8003b88:	2200      	movs	r2, #0
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b92:	623b      	str	r3, [r7, #32]
 8003b94:	2300      	movs	r3, #0
 8003b96:	627b      	str	r3, [r7, #36]	; 0x24
 8003b98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b9c:	4642      	mov	r2, r8
 8003b9e:	464b      	mov	r3, r9
 8003ba0:	f04f 0000 	mov.w	r0, #0
 8003ba4:	f04f 0100 	mov.w	r1, #0
 8003ba8:	0159      	lsls	r1, r3, #5
 8003baa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bae:	0150      	lsls	r0, r2, #5
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4641      	mov	r1, r8
 8003bb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bba:	4649      	mov	r1, r9
 8003bbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bd4:	ebb2 040a 	subs.w	r4, r2, sl
 8003bd8:	eb63 050b 	sbc.w	r5, r3, fp
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	00eb      	lsls	r3, r5, #3
 8003be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bea:	00e2      	lsls	r2, r4, #3
 8003bec:	4614      	mov	r4, r2
 8003bee:	461d      	mov	r5, r3
 8003bf0:	4643      	mov	r3, r8
 8003bf2:	18e3      	adds	r3, r4, r3
 8003bf4:	603b      	str	r3, [r7, #0]
 8003bf6:	464b      	mov	r3, r9
 8003bf8:	eb45 0303 	adc.w	r3, r5, r3
 8003bfc:	607b      	str	r3, [r7, #4]
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	f04f 0300 	mov.w	r3, #0
 8003c06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c0a:	4629      	mov	r1, r5
 8003c0c:	028b      	lsls	r3, r1, #10
 8003c0e:	4621      	mov	r1, r4
 8003c10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c14:	4621      	mov	r1, r4
 8003c16:	028a      	lsls	r2, r1, #10
 8003c18:	4610      	mov	r0, r2
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c1e:	2200      	movs	r2, #0
 8003c20:	61bb      	str	r3, [r7, #24]
 8003c22:	61fa      	str	r2, [r7, #28]
 8003c24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c28:	f7fc fb2a 	bl	8000280 <__aeabi_uldivmod>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4613      	mov	r3, r2
 8003c32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	0c1b      	lsrs	r3, r3, #16
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	3301      	adds	r3, #1
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c4e:	e002      	b.n	8003c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c50:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3750      	adds	r7, #80	; 0x50
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c62:	bf00      	nop
 8003c64:	40023800 	.word	0x40023800
 8003c68:	00f42400 	.word	0x00f42400
 8003c6c:	007a1200 	.word	0x007a1200

08003c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c74:	4b03      	ldr	r3, [pc, #12]	; (8003c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c76:	681b      	ldr	r3, [r3, #0]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	20000000 	.word	0x20000000

08003c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c8c:	f7ff fff0 	bl	8003c70 <HAL_RCC_GetHCLKFreq>
 8003c90:	4602      	mov	r2, r0
 8003c92:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	0a9b      	lsrs	r3, r3, #10
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	4903      	ldr	r1, [pc, #12]	; (8003cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	080083ec 	.word	0x080083ec

08003cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d105      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d035      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cd8:	4b62      	ldr	r3, [pc, #392]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cde:	f7fd f8e9 	bl	8000eb4 <HAL_GetTick>
 8003ce2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ce6:	f7fd f8e5 	bl	8000eb4 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e0b0      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cf8:	4b5b      	ldr	r3, [pc, #364]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1f0      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	019a      	lsls	r2, r3, #6
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	071b      	lsls	r3, r3, #28
 8003d10:	4955      	ldr	r1, [pc, #340]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d18:	4b52      	ldr	r3, [pc, #328]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d1e:	f7fd f8c9 	bl	8000eb4 <HAL_GetTick>
 8003d22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d24:	e008      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d26:	f7fd f8c5 	bl	8000eb4 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e090      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d38:	4b4b      	ldr	r3, [pc, #300]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f0      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 8083 	beq.w	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d52:	2300      	movs	r3, #0
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	4b44      	ldr	r3, [pc, #272]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	4a43      	ldr	r2, [pc, #268]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d60:	6413      	str	r3, [r2, #64]	; 0x40
 8003d62:	4b41      	ldr	r3, [pc, #260]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d6e:	4b3f      	ldr	r3, [pc, #252]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a3e      	ldr	r2, [pc, #248]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d78:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d7a:	f7fd f89b 	bl	8000eb4 <HAL_GetTick>
 8003d7e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d80:	e008      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d82:	f7fd f897 	bl	8000eb4 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e062      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d94:	4b35      	ldr	r3, [pc, #212]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003da0:	4b31      	ldr	r3, [pc, #196]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d02f      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d028      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dbe:	4b2a      	ldr	r3, [pc, #168]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dc8:	4b29      	ldr	r3, [pc, #164]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dce:	4b28      	ldr	r3, [pc, #160]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003dd4:	4a24      	ldr	r2, [pc, #144]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003dda:	4b23      	ldr	r3, [pc, #140]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d114      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003de6:	f7fd f865 	bl	8000eb4 <HAL_GetTick>
 8003dea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dec:	e00a      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dee:	f7fd f861 	bl	8000eb4 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e02a      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e04:	4b18      	ldr	r3, [pc, #96]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0ee      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e1c:	d10d      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003e1e:	4b12      	ldr	r3, [pc, #72]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e32:	490d      	ldr	r1, [pc, #52]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	608b      	str	r3, [r1, #8]
 8003e38:	e005      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003e3a:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	4a0a      	ldr	r2, [pc, #40]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e40:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e44:	6093      	str	r3, [r2, #8]
 8003e46:	4b08      	ldr	r3, [pc, #32]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e52:	4905      	ldr	r1, [pc, #20]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	42470068 	.word	0x42470068
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	40007000 	.word	0x40007000
 8003e70:	42470e40 	.word	0x42470e40

08003e74 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d13e      	bne.n	8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003e92:	4b23      	ldr	r3, [pc, #140]	; (8003f20 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d12f      	bne.n	8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003ea8:	4b1e      	ldr	r3, [pc, #120]	; (8003f24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003eaa:	617b      	str	r3, [r7, #20]
          break;
 8003eac:	e02f      	b.n	8003f0e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003eae:	4b1c      	ldr	r3, [pc, #112]	; (8003f20 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eba:	d108      	bne.n	8003ece <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ebc:	4b18      	ldr	r3, [pc, #96]	; (8003f20 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ec4:	4a18      	ldr	r2, [pc, #96]	; (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eca:	613b      	str	r3, [r7, #16]
 8003ecc:	e007      	b.n	8003ede <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ece:	4b14      	ldr	r3, [pc, #80]	; (8003f20 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ed6:	4a15      	ldr	r2, [pc, #84]	; (8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003edc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003ede:	4b10      	ldr	r3, [pc, #64]	; (8003f20 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee4:	099b      	lsrs	r3, r3, #6
 8003ee6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	fb02 f303 	mul.w	r3, r2, r3
 8003ef0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003ef2:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ef8:	0f1b      	lsrs	r3, r3, #28
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f04:	617b      	str	r3, [r7, #20]
          break;
 8003f06:	e002      	b.n	8003f0e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]
          break;
 8003f0c:	bf00      	nop
        }
      }
      break;
 8003f0e:	bf00      	nop
    }
  }
  return frequency;
 8003f10:	697b      	ldr	r3, [r7, #20]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	371c      	adds	r7, #28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40023800 	.word	0x40023800
 8003f24:	00bb8000 	.word	0x00bb8000
 8003f28:	007a1200 	.word	0x007a1200
 8003f2c:	00f42400 	.word	0x00f42400

08003f30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e07b      	b.n	800403a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d108      	bne.n	8003f5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f52:	d009      	beq.n	8003f68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	61da      	str	r2, [r3, #28]
 8003f5a:	e005      	b.n	8003f68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d106      	bne.n	8003f88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7fc fe42 	bl	8000c0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fec:	ea42 0103 	orr.w	r1, r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	0c1b      	lsrs	r3, r3, #16
 8004006:	f003 0104 	and.w	r1, r3, #4
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	f003 0210 	and.w	r2, r3, #16
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69da      	ldr	r2, [r3, #28]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004028:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004042:	b084      	sub	sp, #16
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	f107 001c 	add.w	r0, r7, #28
 8004050:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004056:	2b01      	cmp	r3, #1
 8004058:	d122      	bne.n	80040a0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800406e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004084:	2b01      	cmp	r3, #1
 8004086:	d105      	bne.n	8004094 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f001 fac5 	bl	8005624 <USB_CoreReset>
 800409a:	4603      	mov	r3, r0
 800409c:	73fb      	strb	r3, [r7, #15]
 800409e:	e01a      	b.n	80040d6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f001 fab9 	bl	8005624 <USB_CoreReset>
 80040b2:	4603      	mov	r3, r0
 80040b4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80040b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d106      	bne.n	80040ca <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	639a      	str	r2, [r3, #56]	; 0x38
 80040c8:	e005      	b.n	80040d6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80040d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d10b      	bne.n	80040f4 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f043 0206 	orr.w	r2, r3, #6
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f043 0220 	orr.w	r2, r3, #32
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004100:	b004      	add	sp, #16
 8004102:	4770      	bx	lr

08004104 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	4613      	mov	r3, r2
 8004110:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004112:	79fb      	ldrb	r3, [r7, #7]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d165      	bne.n	80041e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	4a41      	ldr	r2, [pc, #260]	; (8004220 <USB_SetTurnaroundTime+0x11c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d906      	bls.n	800412e <USB_SetTurnaroundTime+0x2a>
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4a40      	ldr	r2, [pc, #256]	; (8004224 <USB_SetTurnaroundTime+0x120>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d202      	bcs.n	800412e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004128:	230f      	movs	r3, #15
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	e062      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	4a3c      	ldr	r2, [pc, #240]	; (8004224 <USB_SetTurnaroundTime+0x120>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d306      	bcc.n	8004144 <USB_SetTurnaroundTime+0x40>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	4a3b      	ldr	r2, [pc, #236]	; (8004228 <USB_SetTurnaroundTime+0x124>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d202      	bcs.n	8004144 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800413e:	230e      	movs	r3, #14
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	e057      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4a38      	ldr	r2, [pc, #224]	; (8004228 <USB_SetTurnaroundTime+0x124>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d306      	bcc.n	800415a <USB_SetTurnaroundTime+0x56>
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4a37      	ldr	r2, [pc, #220]	; (800422c <USB_SetTurnaroundTime+0x128>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d202      	bcs.n	800415a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004154:	230d      	movs	r3, #13
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	e04c      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	4a33      	ldr	r2, [pc, #204]	; (800422c <USB_SetTurnaroundTime+0x128>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d306      	bcc.n	8004170 <USB_SetTurnaroundTime+0x6c>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	4a32      	ldr	r2, [pc, #200]	; (8004230 <USB_SetTurnaroundTime+0x12c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d802      	bhi.n	8004170 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800416a:	230c      	movs	r3, #12
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	e041      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4a2f      	ldr	r2, [pc, #188]	; (8004230 <USB_SetTurnaroundTime+0x12c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d906      	bls.n	8004186 <USB_SetTurnaroundTime+0x82>
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4a2e      	ldr	r2, [pc, #184]	; (8004234 <USB_SetTurnaroundTime+0x130>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d802      	bhi.n	8004186 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004180:	230b      	movs	r3, #11
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	e036      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	4a2a      	ldr	r2, [pc, #168]	; (8004234 <USB_SetTurnaroundTime+0x130>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d906      	bls.n	800419c <USB_SetTurnaroundTime+0x98>
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	4a29      	ldr	r2, [pc, #164]	; (8004238 <USB_SetTurnaroundTime+0x134>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d802      	bhi.n	800419c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004196:	230a      	movs	r3, #10
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	e02b      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4a26      	ldr	r2, [pc, #152]	; (8004238 <USB_SetTurnaroundTime+0x134>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d906      	bls.n	80041b2 <USB_SetTurnaroundTime+0xae>
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4a25      	ldr	r2, [pc, #148]	; (800423c <USB_SetTurnaroundTime+0x138>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d202      	bcs.n	80041b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80041ac:	2309      	movs	r3, #9
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	e020      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	4a21      	ldr	r2, [pc, #132]	; (800423c <USB_SetTurnaroundTime+0x138>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d306      	bcc.n	80041c8 <USB_SetTurnaroundTime+0xc4>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	4a20      	ldr	r2, [pc, #128]	; (8004240 <USB_SetTurnaroundTime+0x13c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d802      	bhi.n	80041c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80041c2:	2308      	movs	r3, #8
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	e015      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	4a1d      	ldr	r2, [pc, #116]	; (8004240 <USB_SetTurnaroundTime+0x13c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d906      	bls.n	80041de <USB_SetTurnaroundTime+0xda>
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	4a1c      	ldr	r2, [pc, #112]	; (8004244 <USB_SetTurnaroundTime+0x140>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d202      	bcs.n	80041de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80041d8:	2307      	movs	r3, #7
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	e00a      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80041de:	2306      	movs	r3, #6
 80041e0:	617b      	str	r3, [r7, #20]
 80041e2:	e007      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d102      	bne.n	80041f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80041ea:	2309      	movs	r3, #9
 80041ec:	617b      	str	r3, [r7, #20]
 80041ee:	e001      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80041f0:	2309      	movs	r3, #9
 80041f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	029b      	lsls	r3, r3, #10
 8004208:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800420c:	431a      	orrs	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	00d8acbf 	.word	0x00d8acbf
 8004224:	00e4e1c0 	.word	0x00e4e1c0
 8004228:	00f42400 	.word	0x00f42400
 800422c:	01067380 	.word	0x01067380
 8004230:	011a499f 	.word	0x011a499f
 8004234:	01312cff 	.word	0x01312cff
 8004238:	014ca43f 	.word	0x014ca43f
 800423c:	016e3600 	.word	0x016e3600
 8004240:	01a6ab1f 	.word	0x01a6ab1f
 8004244:	01e84800 	.word	0x01e84800

08004248 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f043 0201 	orr.w	r2, r3, #1
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f023 0201 	bic.w	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042a4:	78fb      	ldrb	r3, [r7, #3]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d106      	bne.n	80042b8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	60da      	str	r2, [r3, #12]
 80042b6:	e00b      	b.n	80042d0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	60da      	str	r2, [r3, #12]
 80042ca:	e001      	b.n	80042d0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e003      	b.n	80042d8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80042d0:	2032      	movs	r0, #50	; 0x32
 80042d2:	f7fc fdfb 	bl	8000ecc <HAL_Delay>

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042e0:	b084      	sub	sp, #16
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b086      	sub	sp, #24
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80042ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80042fa:	2300      	movs	r3, #0
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	e009      	b.n	8004314 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	3340      	adds	r3, #64	; 0x40
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	2200      	movs	r2, #0
 800430c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	3301      	adds	r3, #1
 8004312:	613b      	str	r3, [r7, #16]
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	2b0e      	cmp	r3, #14
 8004318:	d9f2      	bls.n	8004300 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800431a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800431c:	2b00      	cmp	r3, #0
 800431e:	d11c      	bne.n	800435a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800432e:	f043 0302 	orr.w	r3, r3, #2
 8004332:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004338:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004344:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	639a      	str	r2, [r3, #56]	; 0x38
 8004358:	e00b      	b.n	8004372 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004378:	461a      	mov	r2, r3
 800437a:	2300      	movs	r3, #0
 800437c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004384:	4619      	mov	r1, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438c:	461a      	mov	r2, r3
 800438e:	680b      	ldr	r3, [r1, #0]
 8004390:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004394:	2b01      	cmp	r3, #1
 8004396:	d10c      	bne.n	80043b2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439a:	2b00      	cmp	r3, #0
 800439c:	d104      	bne.n	80043a8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800439e:	2100      	movs	r1, #0
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f949 	bl	8004638 <USB_SetDevSpeed>
 80043a6:	e008      	b.n	80043ba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80043a8:	2101      	movs	r1, #1
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f944 	bl	8004638 <USB_SetDevSpeed>
 80043b0:	e003      	b.n	80043ba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043b2:	2103      	movs	r1, #3
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f93f 	bl	8004638 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043ba:	2110      	movs	r1, #16
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f8f3 	bl	80045a8 <USB_FlushTxFifo>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f911 	bl	80045f4 <USB_FlushRxFifo>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e2:	461a      	mov	r2, r3
 80043e4:	2300      	movs	r3, #0
 80043e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ee:	461a      	mov	r2, r3
 80043f0:	2300      	movs	r3, #0
 80043f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fa:	461a      	mov	r2, r3
 80043fc:	2300      	movs	r3, #0
 80043fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004400:	2300      	movs	r3, #0
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	e043      	b.n	800448e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004418:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800441c:	d118      	bne.n	8004450 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10a      	bne.n	800443a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004430:	461a      	mov	r2, r3
 8004432:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	e013      	b.n	8004462 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004446:	461a      	mov	r2, r3
 8004448:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	e008      	b.n	8004462 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4413      	add	r3, r2
 8004458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445c:	461a      	mov	r2, r3
 800445e:	2300      	movs	r3, #0
 8004460:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446e:	461a      	mov	r2, r3
 8004470:	2300      	movs	r3, #0
 8004472:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004480:	461a      	mov	r2, r3
 8004482:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004486:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	3301      	adds	r3, #1
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	429a      	cmp	r2, r3
 8004494:	d3b7      	bcc.n	8004406 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004496:	2300      	movs	r3, #0
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	e043      	b.n	8004524 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044b2:	d118      	bne.n	80044e6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10a      	bne.n	80044d0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c6:	461a      	mov	r2, r3
 80044c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	e013      	b.n	80044f8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044dc:	461a      	mov	r2, r3
 80044de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	e008      	b.n	80044f8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f2:	461a      	mov	r2, r3
 80044f4:	2300      	movs	r3, #0
 80044f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004504:	461a      	mov	r2, r3
 8004506:	2300      	movs	r3, #0
 8004508:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4413      	add	r3, r2
 8004512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004516:	461a      	mov	r2, r3
 8004518:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800451c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	3301      	adds	r3, #1
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	429a      	cmp	r2, r3
 800452a:	d3b7      	bcc.n	800449c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800453a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800453e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800454c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004550:	2b00      	cmp	r3, #0
 8004552:	d105      	bne.n	8004560 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	f043 0210 	orr.w	r2, r3, #16
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699a      	ldr	r2, [r3, #24]
 8004564:	4b0f      	ldr	r3, [pc, #60]	; (80045a4 <USB_DevInit+0x2c4>)
 8004566:	4313      	orrs	r3, r2
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800456c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	f043 0208 	orr.w	r2, r3, #8
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800457e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004580:	2b01      	cmp	r3, #1
 8004582:	d107      	bne.n	8004594 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800458c:	f043 0304 	orr.w	r3, r3, #4
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004594:	7dfb      	ldrb	r3, [r7, #23]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045a0:	b004      	add	sp, #16
 80045a2:	4770      	bx	lr
 80045a4:	803c3800 	.word	0x803c3800

080045a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	019b      	lsls	r3, r3, #6
 80045ba:	f043 0220 	orr.w	r2, r3, #32
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3301      	adds	r3, #1
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4a09      	ldr	r2, [pc, #36]	; (80045f0 <USB_FlushTxFifo+0x48>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d901      	bls.n	80045d4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e006      	b.n	80045e2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	f003 0320 	and.w	r3, r3, #32
 80045dc:	2b20      	cmp	r3, #32
 80045de:	d0f0      	beq.n	80045c2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	00030d40 	.word	0x00030d40

080045f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2210      	movs	r2, #16
 8004604:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3301      	adds	r3, #1
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4a09      	ldr	r2, [pc, #36]	; (8004634 <USB_FlushRxFifo+0x40>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d901      	bls.n	8004618 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e006      	b.n	8004626 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b10      	cmp	r3, #16
 8004622:	d0f0      	beq.n	8004606 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	00030d40 	.word	0x00030d40

08004638 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	78fb      	ldrb	r3, [r7, #3]
 8004652:	68f9      	ldr	r1, [r7, #12]
 8004654:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004658:	4313      	orrs	r3, r2
 800465a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800466a:	b480      	push	{r7}
 800466c:	b087      	sub	sp, #28
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 0306 	and.w	r3, r3, #6
 8004682:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d102      	bne.n	8004690 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800468a:	2300      	movs	r3, #0
 800468c:	75fb      	strb	r3, [r7, #23]
 800468e:	e00a      	b.n	80046a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d002      	beq.n	800469c <USB_GetDevSpeed+0x32>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2b06      	cmp	r3, #6
 800469a:	d102      	bne.n	80046a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800469c:	2302      	movs	r3, #2
 800469e:	75fb      	strb	r3, [r7, #23]
 80046a0:	e001      	b.n	80046a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80046a2:	230f      	movs	r3, #15
 80046a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80046a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	371c      	adds	r7, #28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	785b      	ldrb	r3, [r3, #1]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d13a      	bne.n	8004746 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d6:	69da      	ldr	r2, [r3, #28]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	f003 030f 	and.w	r3, r3, #15
 80046e0:	2101      	movs	r1, #1
 80046e2:	fa01 f303 	lsl.w	r3, r1, r3
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	68f9      	ldr	r1, [r7, #12]
 80046ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046ee:	4313      	orrs	r3, r2
 80046f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d155      	bne.n	80047b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	78db      	ldrb	r3, [r3, #3]
 8004722:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004724:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	059b      	lsls	r3, r3, #22
 800472a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800472c:	4313      	orrs	r3, r2
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	0151      	lsls	r1, r2, #5
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	440a      	add	r2, r1
 8004736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800473a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	e036      	b.n	80047b4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800474c:	69da      	ldr	r2, [r3, #28]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	2101      	movs	r1, #1
 8004758:	fa01 f303 	lsl.w	r3, r1, r3
 800475c:	041b      	lsls	r3, r3, #16
 800475e:	68f9      	ldr	r1, [r7, #12]
 8004760:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004764:	4313      	orrs	r3, r2
 8004766:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d11a      	bne.n	80047b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	78db      	ldrb	r3, [r3, #3]
 8004798:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800479a:	430b      	orrs	r3, r1
 800479c:	4313      	orrs	r3, r2
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	0151      	lsls	r1, r2, #5
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	440a      	add	r2, r1
 80047a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	785b      	ldrb	r3, [r3, #1]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d161      	bne.n	80048a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047f6:	d11f      	bne.n	8004838 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	0151      	lsls	r1, r2, #5
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	440a      	add	r2, r1
 800480e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004812:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004816:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	0151      	lsls	r1, r2, #5
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	440a      	add	r2, r1
 800482e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004832:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004836:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	2101      	movs	r1, #1
 800484a:	fa01 f303 	lsl.w	r3, r1, r3
 800484e:	b29b      	uxth	r3, r3
 8004850:	43db      	mvns	r3, r3
 8004852:	68f9      	ldr	r1, [r7, #12]
 8004854:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004858:	4013      	ands	r3, r2
 800485a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	2101      	movs	r1, #1
 800486e:	fa01 f303 	lsl.w	r3, r1, r3
 8004872:	b29b      	uxth	r3, r3
 8004874:	43db      	mvns	r3, r3
 8004876:	68f9      	ldr	r1, [r7, #12]
 8004878:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800487c:	4013      	ands	r3, r2
 800487e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	0159      	lsls	r1, r3, #5
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	440b      	add	r3, r1
 8004896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489a:	4619      	mov	r1, r3
 800489c:	4b35      	ldr	r3, [pc, #212]	; (8004974 <USB_DeactivateEndpoint+0x1b0>)
 800489e:	4013      	ands	r3, r2
 80048a0:	600b      	str	r3, [r1, #0]
 80048a2:	e060      	b.n	8004966 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048ba:	d11f      	bne.n	80048fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	0151      	lsls	r1, r2, #5
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	440a      	add	r2, r1
 80048d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	0151      	lsls	r1, r2, #5
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	440a      	add	r2, r1
 80048f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	2101      	movs	r1, #1
 800490e:	fa01 f303 	lsl.w	r3, r1, r3
 8004912:	041b      	lsls	r3, r3, #16
 8004914:	43db      	mvns	r3, r3
 8004916:	68f9      	ldr	r1, [r7, #12]
 8004918:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800491c:	4013      	ands	r3, r2
 800491e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004926:	69da      	ldr	r2, [r3, #28]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	f003 030f 	and.w	r3, r3, #15
 8004930:	2101      	movs	r1, #1
 8004932:	fa01 f303 	lsl.w	r3, r1, r3
 8004936:	041b      	lsls	r3, r3, #16
 8004938:	43db      	mvns	r3, r3
 800493a:	68f9      	ldr	r1, [r7, #12]
 800493c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004940:	4013      	ands	r3, r2
 8004942:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	0159      	lsls	r1, r3, #5
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	440b      	add	r3, r1
 800495a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495e:	4619      	mov	r1, r3
 8004960:	4b05      	ldr	r3, [pc, #20]	; (8004978 <USB_DeactivateEndpoint+0x1b4>)
 8004962:	4013      	ands	r3, r2
 8004964:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	ec337800 	.word	0xec337800
 8004978:	eff37800 	.word	0xeff37800

0800497c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08a      	sub	sp, #40	; 0x28
 8004980:	af02      	add	r7, sp, #8
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	4613      	mov	r3, r2
 8004988:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	785b      	ldrb	r3, [r3, #1]
 8004998:	2b01      	cmp	r3, #1
 800499a:	f040 815c 	bne.w	8004c56 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d132      	bne.n	8004a0c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	0151      	lsls	r1, r2, #5
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	440a      	add	r2, r1
 80049bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	0151      	lsls	r1, r2, #5
 80049dc:	69fa      	ldr	r2, [r7, #28]
 80049de:	440a      	add	r2, r1
 80049e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	0151      	lsls	r1, r2, #5
 80049fc:	69fa      	ldr	r2, [r7, #28]
 80049fe:	440a      	add	r2, r1
 8004a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a04:	0cdb      	lsrs	r3, r3, #19
 8004a06:	04db      	lsls	r3, r3, #19
 8004a08:	6113      	str	r3, [r2, #16]
 8004a0a:	e074      	b.n	8004af6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	0151      	lsls	r1, r2, #5
 8004a1e:	69fa      	ldr	r2, [r7, #28]
 8004a20:	440a      	add	r2, r1
 8004a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a26:	0cdb      	lsrs	r3, r3, #19
 8004a28:	04db      	lsls	r3, r3, #19
 8004a2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	0151      	lsls	r1, r2, #5
 8004a3e:	69fa      	ldr	r2, [r7, #28]
 8004a40:	440a      	add	r2, r1
 8004a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	6959      	ldr	r1, [r3, #20]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	440b      	add	r3, r1
 8004a68:	1e59      	subs	r1, r3, #1
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a72:	04d9      	lsls	r1, r3, #19
 8004a74:	4b9d      	ldr	r3, [pc, #628]	; (8004cec <USB_EPStartXfer+0x370>)
 8004a76:	400b      	ands	r3, r1
 8004a78:	69b9      	ldr	r1, [r7, #24]
 8004a7a:	0148      	lsls	r0, r1, #5
 8004a7c:	69f9      	ldr	r1, [r7, #28]
 8004a7e:	4401      	add	r1, r0
 8004a80:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a84:	4313      	orrs	r3, r2
 8004a86:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a94:	691a      	ldr	r2, [r3, #16]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a9e:	69b9      	ldr	r1, [r7, #24]
 8004aa0:	0148      	lsls	r0, r1, #5
 8004aa2:	69f9      	ldr	r1, [r7, #28]
 8004aa4:	4401      	add	r1, r0
 8004aa6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	78db      	ldrb	r3, [r3, #3]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d11f      	bne.n	8004af6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	0151      	lsls	r1, r2, #5
 8004ac8:	69fa      	ldr	r2, [r7, #28]
 8004aca:	440a      	add	r2, r1
 8004acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ad4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	0151      	lsls	r1, r2, #5
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	440a      	add	r2, r1
 8004aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004af4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d14b      	bne.n	8004b94 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d009      	beq.n	8004b18 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b10:	461a      	mov	r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	78db      	ldrb	r3, [r3, #3]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d128      	bne.n	8004b72 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d110      	bne.n	8004b52 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	0151      	lsls	r1, r2, #5
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	440a      	add	r2, r1
 8004b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b4e:	6013      	str	r3, [r2, #0]
 8004b50:	e00f      	b.n	8004b72 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	0151      	lsls	r1, r2, #5
 8004b64:	69fa      	ldr	r2, [r7, #28]
 8004b66:	440a      	add	r2, r1
 8004b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b70:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	0151      	lsls	r1, r2, #5
 8004b84:	69fa      	ldr	r2, [r7, #28]
 8004b86:	440a      	add	r2, r1
 8004b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	e12f      	b.n	8004df4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	0151      	lsls	r1, r2, #5
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	440a      	add	r2, r1
 8004baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bb2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	78db      	ldrb	r3, [r3, #3]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d015      	beq.n	8004be8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 8117 	beq.w	8004df4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bdc:	69f9      	ldr	r1, [r7, #28]
 8004bde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004be2:	4313      	orrs	r3, r2
 8004be4:	634b      	str	r3, [r1, #52]	; 0x34
 8004be6:	e105      	b.n	8004df4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d110      	bne.n	8004c1a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	0151      	lsls	r1, r2, #5
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	440a      	add	r2, r1
 8004c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	e00f      	b.n	8004c3a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	015a      	lsls	r2, r3, #5
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	4413      	add	r3, r2
 8004c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	0151      	lsls	r1, r2, #5
 8004c2c:	69fa      	ldr	r2, [r7, #28]
 8004c2e:	440a      	add	r2, r1
 8004c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c38:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	68d9      	ldr	r1, [r3, #12]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	781a      	ldrb	r2, [r3, #0]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	b298      	uxth	r0, r3
 8004c48:	79fb      	ldrb	r3, [r7, #7]
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 fa2b 	bl	80050aa <USB_WritePacket>
 8004c54:	e0ce      	b.n	8004df4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	0151      	lsls	r1, r2, #5
 8004c68:	69fa      	ldr	r2, [r7, #28]
 8004c6a:	440a      	add	r2, r1
 8004c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c70:	0cdb      	lsrs	r3, r3, #19
 8004c72:	04db      	lsls	r3, r3, #19
 8004c74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	0151      	lsls	r1, r2, #5
 8004c88:	69fa      	ldr	r2, [r7, #28]
 8004c8a:	440a      	add	r2, r1
 8004c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c98:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d126      	bne.n	8004cf0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb8:	69b9      	ldr	r1, [r7, #24]
 8004cba:	0148      	lsls	r0, r1, #5
 8004cbc:	69f9      	ldr	r1, [r7, #28]
 8004cbe:	4401      	add	r1, r0
 8004cc0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	0151      	lsls	r1, r2, #5
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	440a      	add	r2, r1
 8004cde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ce2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ce6:	6113      	str	r3, [r2, #16]
 8004ce8:	e036      	b.n	8004d58 <USB_EPStartXfer+0x3dc>
 8004cea:	bf00      	nop
 8004cec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	695a      	ldr	r2, [r3, #20]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	1e5a      	subs	r2, r3, #1
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d04:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	8afb      	ldrh	r3, [r7, #22]
 8004d16:	04d9      	lsls	r1, r3, #19
 8004d18:	4b39      	ldr	r3, [pc, #228]	; (8004e00 <USB_EPStartXfer+0x484>)
 8004d1a:	400b      	ands	r3, r1
 8004d1c:	69b9      	ldr	r1, [r7, #24]
 8004d1e:	0148      	lsls	r0, r1, #5
 8004d20:	69f9      	ldr	r1, [r7, #28]
 8004d22:	4401      	add	r1, r0
 8004d24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d38:	691a      	ldr	r2, [r3, #16]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	8af9      	ldrh	r1, [r7, #22]
 8004d40:	fb01 f303 	mul.w	r3, r1, r3
 8004d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d48:	69b9      	ldr	r1, [r7, #24]
 8004d4a:	0148      	lsls	r0, r1, #5
 8004d4c:	69f9      	ldr	r1, [r7, #28]
 8004d4e:	4401      	add	r1, r0
 8004d50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d54:	4313      	orrs	r3, r2
 8004d56:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d10d      	bne.n	8004d7a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d009      	beq.n	8004d7a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	68d9      	ldr	r1, [r3, #12]
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d76:	460a      	mov	r2, r1
 8004d78:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	78db      	ldrb	r3, [r3, #3]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d128      	bne.n	8004dd4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d110      	bne.n	8004db4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	0151      	lsls	r1, r2, #5
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	440a      	add	r2, r1
 8004da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	e00f      	b.n	8004dd4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	0151      	lsls	r1, r2, #5
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	440a      	add	r2, r1
 8004dca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	0151      	lsls	r1, r2, #5
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	440a      	add	r2, r1
 8004dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004df2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3720      	adds	r7, #32
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	1ff80000 	.word	0x1ff80000

08004e04 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	785b      	ldrb	r3, [r3, #1]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	f040 80cd 	bne.w	8004fc0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d132      	bne.n	8004e94 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	015a      	lsls	r2, r3, #5
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	0151      	lsls	r1, r2, #5
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	440a      	add	r2, r1
 8004e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	0151      	lsls	r1, r2, #5
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	440a      	add	r2, r1
 8004e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	0151      	lsls	r1, r2, #5
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	440a      	add	r2, r1
 8004e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e8c:	0cdb      	lsrs	r3, r3, #19
 8004e8e:	04db      	lsls	r3, r3, #19
 8004e90:	6113      	str	r3, [r2, #16]
 8004e92:	e04e      	b.n	8004f32 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	0151      	lsls	r1, r2, #5
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	440a      	add	r2, r1
 8004eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eae:	0cdb      	lsrs	r3, r3, #19
 8004eb0:	04db      	lsls	r3, r3, #19
 8004eb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	0151      	lsls	r1, r2, #5
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	440a      	add	r2, r1
 8004eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ece:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ed2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ed6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	695a      	ldr	r2, [r3, #20]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d903      	bls.n	8004eec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	0151      	lsls	r1, r2, #5
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	440a      	add	r2, r1
 8004f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f22:	6939      	ldr	r1, [r7, #16]
 8004f24:	0148      	lsls	r0, r1, #5
 8004f26:	6979      	ldr	r1, [r7, #20]
 8004f28:	4401      	add	r1, r0
 8004f2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f32:	79fb      	ldrb	r3, [r7, #7]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d11e      	bne.n	8004f76 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d009      	beq.n	8004f54 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	0151      	lsls	r1, r2, #5
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	440a      	add	r2, r1
 8004f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f72:	6013      	str	r3, [r2, #0]
 8004f74:	e092      	b.n	800509c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	0151      	lsls	r1, r2, #5
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	440a      	add	r2, r1
 8004f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f94:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d07e      	beq.n	800509c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	2101      	movs	r1, #1
 8004fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb4:	6979      	ldr	r1, [r7, #20]
 8004fb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	634b      	str	r3, [r1, #52]	; 0x34
 8004fbe:	e06d      	b.n	800509c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	0151      	lsls	r1, r2, #5
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	440a      	add	r2, r1
 8004fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fda:	0cdb      	lsrs	r3, r3, #19
 8004fdc:	04db      	lsls	r3, r3, #19
 8004fde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	0151      	lsls	r1, r2, #5
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	440a      	add	r2, r1
 8004ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ffa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ffe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005002:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	4413      	add	r3, r2
 800501c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	0151      	lsls	r1, r2, #5
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	440a      	add	r2, r1
 800502a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800502e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005032:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005040:	691a      	ldr	r2, [r3, #16]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800504a:	6939      	ldr	r1, [r7, #16]
 800504c:	0148      	lsls	r0, r1, #5
 800504e:	6979      	ldr	r1, [r7, #20]
 8005050:	4401      	add	r1, r0
 8005052:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005056:	4313      	orrs	r3, r2
 8005058:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d10d      	bne.n	800507c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d009      	beq.n	800507c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	68d9      	ldr	r1, [r3, #12]
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005078:	460a      	mov	r2, r1
 800507a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	0151      	lsls	r1, r2, #5
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	440a      	add	r2, r1
 8005092:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005096:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800509a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b089      	sub	sp, #36	; 0x24
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	60f8      	str	r0, [r7, #12]
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	4611      	mov	r1, r2
 80050b6:	461a      	mov	r2, r3
 80050b8:	460b      	mov	r3, r1
 80050ba:	71fb      	strb	r3, [r7, #7]
 80050bc:	4613      	mov	r3, r2
 80050be:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80050c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d11a      	bne.n	8005106 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050d0:	88bb      	ldrh	r3, [r7, #4]
 80050d2:	3303      	adds	r3, #3
 80050d4:	089b      	lsrs	r3, r3, #2
 80050d6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80050d8:	2300      	movs	r3, #0
 80050da:	61bb      	str	r3, [r7, #24]
 80050dc:	e00f      	b.n	80050fe <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050de:	79fb      	ldrb	r3, [r7, #7]
 80050e0:	031a      	lsls	r2, r3, #12
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ea:	461a      	mov	r2, r3
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	3304      	adds	r3, #4
 80050f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	3301      	adds	r3, #1
 80050fc:	61bb      	str	r3, [r7, #24]
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	429a      	cmp	r2, r3
 8005104:	d3eb      	bcc.n	80050de <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3724      	adds	r7, #36	; 0x24
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005114:	b480      	push	{r7}
 8005116:	b089      	sub	sp, #36	; 0x24
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	4613      	mov	r3, r2
 8005120:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	3303      	adds	r3, #3
 800512e:	089b      	lsrs	r3, r3, #2
 8005130:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005132:	2300      	movs	r3, #0
 8005134:	61bb      	str	r3, [r7, #24]
 8005136:	e00b      	b.n	8005150 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	601a      	str	r2, [r3, #0]
    pDest++;
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	3304      	adds	r3, #4
 8005148:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	3301      	adds	r3, #1
 800514e:	61bb      	str	r3, [r7, #24]
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	429a      	cmp	r2, r3
 8005156:	d3ef      	bcc.n	8005138 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005158:	69fb      	ldr	r3, [r7, #28]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3724      	adds	r7, #36	; 0x24
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005166:	b480      	push	{r7}
 8005168:	b085      	sub	sp, #20
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	785b      	ldrb	r3, [r3, #1]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d12c      	bne.n	80051dc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	db12      	blt.n	80051ba <USB_EPSetStall+0x54>
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00f      	beq.n	80051ba <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	0151      	lsls	r1, r2, #5
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	440a      	add	r2, r1
 80051b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051b8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	0151      	lsls	r1, r2, #5
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	440a      	add	r2, r1
 80051d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	e02b      	b.n	8005234 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	db12      	blt.n	8005214 <USB_EPSetStall+0xae>
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00f      	beq.n	8005214 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	0151      	lsls	r1, r2, #5
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	440a      	add	r2, r1
 800520a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800520e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005212:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	0151      	lsls	r1, r2, #5
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	440a      	add	r2, r1
 800522a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800522e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005232:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005242:	b480      	push	{r7}
 8005244:	b085      	sub	sp, #20
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	785b      	ldrb	r3, [r3, #1]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d128      	bne.n	80052b0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	0151      	lsls	r1, r2, #5
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	440a      	add	r2, r1
 8005274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005278:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800527c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	78db      	ldrb	r3, [r3, #3]
 8005282:	2b03      	cmp	r3, #3
 8005284:	d003      	beq.n	800528e <USB_EPClearStall+0x4c>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	78db      	ldrb	r3, [r3, #3]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d138      	bne.n	8005300 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	0151      	lsls	r1, r2, #5
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	440a      	add	r2, r1
 80052a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	e027      	b.n	8005300 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	0151      	lsls	r1, r2, #5
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	440a      	add	r2, r1
 80052c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	78db      	ldrb	r3, [r3, #3]
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	d003      	beq.n	80052e0 <USB_EPClearStall+0x9e>
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	78db      	ldrb	r3, [r3, #3]
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d10f      	bne.n	8005300 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	0151      	lsls	r1, r2, #5
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	440a      	add	r2, r1
 80052f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052fe:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800530e:	b480      	push	{r7}
 8005310:	b085      	sub	sp, #20
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	460b      	mov	r3, r1
 8005318:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800532c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005330:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	78fb      	ldrb	r3, [r7, #3]
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005342:	68f9      	ldr	r1, [r7, #12]
 8005344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005348:	4313      	orrs	r3, r2
 800534a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800535a:	b480      	push	{r7}
 800535c:	b085      	sub	sp, #20
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005374:	f023 0303 	bic.w	r3, r3, #3
 8005378:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005388:	f023 0302 	bic.w	r3, r3, #2
 800538c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053b6:	f023 0303 	bic.w	r3, r3, #3
 80053ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ca:	f043 0302 	orr.w	r3, r3, #2
 80053ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80053de:	b480      	push	{r7}
 80053e0:	b085      	sub	sp, #20
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4013      	ands	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80053f6:	68fb      	ldr	r3, [r7, #12]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	4013      	ands	r3, r2
 8005426:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	0c1b      	lsrs	r3, r3, #16
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	4013      	ands	r3, r2
 800545a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	b29b      	uxth	r3, r3
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	460b      	mov	r3, r1
 8005476:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800547c:	78fb      	ldrb	r3, [r7, #3]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	4013      	ands	r3, r2
 8005498:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800549a:	68bb      	ldr	r3, [r7, #8]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ca:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80054cc:	78fb      	ldrb	r3, [r7, #3]
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	fa22 f303 	lsr.w	r3, r2, r3
 80054d8:	01db      	lsls	r3, r3, #7
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80054e2:	78fb      	ldrb	r3, [r7, #3]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4013      	ands	r3, r2
 80054f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054f6:	68bb      	ldr	r3, [r7, #8]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	371c      	adds	r7, #28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	f003 0301 	and.w	r3, r3, #1
}
 8005514:	4618      	mov	r0, r3
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800553a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800553e:	f023 0307 	bic.w	r3, r3, #7
 8005542:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005556:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
	...

08005568 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	460b      	mov	r3, r1
 8005572:	607a      	str	r2, [r7, #4]
 8005574:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	333c      	adds	r3, #60	; 0x3c
 800557e:	3304      	adds	r3, #4
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	4a26      	ldr	r2, [pc, #152]	; (8005620 <USB_EP0_OutStart+0xb8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d90a      	bls.n	80055a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800559c:	d101      	bne.n	80055a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	e037      	b.n	8005612 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a8:	461a      	mov	r2, r3
 80055aa:	2300      	movs	r3, #0
 80055ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d0:	f043 0318 	orr.w	r3, r3, #24
 80055d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80055e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80055ea:	7afb      	ldrb	r3, [r7, #11]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d10f      	bne.n	8005610 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f6:	461a      	mov	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800560a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800560e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	4f54300a 	.word	0x4f54300a

08005624 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	3301      	adds	r3, #1
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	4a13      	ldr	r2, [pc, #76]	; (8005688 <USB_CoreReset+0x64>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d901      	bls.n	8005642 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e01b      	b.n	800567a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	daf2      	bge.n	8005630 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f043 0201 	orr.w	r2, r3, #1
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	3301      	adds	r3, #1
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4a09      	ldr	r2, [pc, #36]	; (8005688 <USB_CoreReset+0x64>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d901      	bls.n	800566c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e006      	b.n	800567a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b01      	cmp	r3, #1
 8005676:	d0f0      	beq.n	800565a <USB_CoreReset+0x36>

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	00030d40 	.word	0x00030d40

0800568c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	460b      	mov	r3, r1
 8005696:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005698:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800569c:	f002 f96a 	bl	8007974 <USBD_static_malloc>
 80056a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d105      	bne.n	80056b4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80056b0:	2302      	movs	r3, #2
 80056b2:	e066      	b.n	8005782 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	7c1b      	ldrb	r3, [r3, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d119      	bne.n	80056f8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80056c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056c8:	2202      	movs	r2, #2
 80056ca:	2181      	movs	r1, #129	; 0x81
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f002 f82e 	bl	800772e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80056d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056dc:	2202      	movs	r2, #2
 80056de:	2101      	movs	r1, #1
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f002 f824 	bl	800772e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2210      	movs	r2, #16
 80056f2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80056f6:	e016      	b.n	8005726 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80056f8:	2340      	movs	r3, #64	; 0x40
 80056fa:	2202      	movs	r2, #2
 80056fc:	2181      	movs	r1, #129	; 0x81
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f002 f815 	bl	800772e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800570a:	2340      	movs	r3, #64	; 0x40
 800570c:	2202      	movs	r2, #2
 800570e:	2101      	movs	r1, #1
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f002 f80c 	bl	800772e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2210      	movs	r2, #16
 8005722:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005726:	2308      	movs	r3, #8
 8005728:	2203      	movs	r2, #3
 800572a:	2182      	movs	r1, #130	; 0x82
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f001 fffe 	bl	800772e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	7c1b      	ldrb	r3, [r3, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d109      	bne.n	8005770 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005762:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005766:	2101      	movs	r1, #1
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f002 f8cf 	bl	800790c <USBD_LL_PrepareReceive>
 800576e:	e007      	b.n	8005780 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005776:	2340      	movs	r3, #64	; 0x40
 8005778:	2101      	movs	r1, #1
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f002 f8c6 	bl	800790c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b082      	sub	sp, #8
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	460b      	mov	r3, r1
 8005794:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005796:	2181      	movs	r1, #129	; 0x81
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f001 ffee 	bl	800777a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80057a4:	2101      	movs	r1, #1
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f001 ffe7 	bl	800777a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80057b4:	2182      	movs	r1, #130	; 0x82
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f001 ffdf 	bl	800777a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00e      	beq.n	80057f4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057e6:	4618      	mov	r0, r3
 80057e8:	f002 f8d2 	bl	8007990 <USBD_static_free>
    pdev->pClassData = NULL;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005810:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005824:	2303      	movs	r3, #3
 8005826:	e0af      	b.n	8005988 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005830:	2b00      	cmp	r3, #0
 8005832:	d03f      	beq.n	80058b4 <USBD_CDC_Setup+0xb4>
 8005834:	2b20      	cmp	r3, #32
 8005836:	f040 809f 	bne.w	8005978 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	88db      	ldrh	r3, [r3, #6]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d02e      	beq.n	80058a0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	b25b      	sxtb	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	da16      	bge.n	800587a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005858:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	88d2      	ldrh	r2, [r2, #6]
 800585e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	88db      	ldrh	r3, [r3, #6]
 8005864:	2b07      	cmp	r3, #7
 8005866:	bf28      	it	cs
 8005868:	2307      	movcs	r3, #7
 800586a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	89fa      	ldrh	r2, [r7, #14]
 8005870:	4619      	mov	r1, r3
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f001 fb19 	bl	8006eaa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005878:	e085      	b.n	8005986 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	785a      	ldrb	r2, [r3, #1]
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	88db      	ldrh	r3, [r3, #6]
 8005888:	b2da      	uxtb	r2, r3
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005890:	6939      	ldr	r1, [r7, #16]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	88db      	ldrh	r3, [r3, #6]
 8005896:	461a      	mov	r2, r3
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f001 fb32 	bl	8006f02 <USBD_CtlPrepareRx>
      break;
 800589e:	e072      	b.n	8005986 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	7850      	ldrb	r0, [r2, #1]
 80058ac:	2200      	movs	r2, #0
 80058ae:	6839      	ldr	r1, [r7, #0]
 80058b0:	4798      	blx	r3
      break;
 80058b2:	e068      	b.n	8005986 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	785b      	ldrb	r3, [r3, #1]
 80058b8:	2b0b      	cmp	r3, #11
 80058ba:	d852      	bhi.n	8005962 <USBD_CDC_Setup+0x162>
 80058bc:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <USBD_CDC_Setup+0xc4>)
 80058be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c2:	bf00      	nop
 80058c4:	080058f5 	.word	0x080058f5
 80058c8:	08005971 	.word	0x08005971
 80058cc:	08005963 	.word	0x08005963
 80058d0:	08005963 	.word	0x08005963
 80058d4:	08005963 	.word	0x08005963
 80058d8:	08005963 	.word	0x08005963
 80058dc:	08005963 	.word	0x08005963
 80058e0:	08005963 	.word	0x08005963
 80058e4:	08005963 	.word	0x08005963
 80058e8:	08005963 	.word	0x08005963
 80058ec:	0800591f 	.word	0x0800591f
 80058f0:	08005949 	.word	0x08005949
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d107      	bne.n	8005910 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005900:	f107 030a 	add.w	r3, r7, #10
 8005904:	2202      	movs	r2, #2
 8005906:	4619      	mov	r1, r3
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f001 face 	bl	8006eaa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800590e:	e032      	b.n	8005976 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005910:	6839      	ldr	r1, [r7, #0]
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f001 fa58 	bl	8006dc8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005918:	2303      	movs	r3, #3
 800591a:	75fb      	strb	r3, [r7, #23]
          break;
 800591c:	e02b      	b.n	8005976 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b03      	cmp	r3, #3
 8005928:	d107      	bne.n	800593a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800592a:	f107 030d 	add.w	r3, r7, #13
 800592e:	2201      	movs	r2, #1
 8005930:	4619      	mov	r1, r3
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f001 fab9 	bl	8006eaa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005938:	e01d      	b.n	8005976 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800593a:	6839      	ldr	r1, [r7, #0]
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f001 fa43 	bl	8006dc8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005942:	2303      	movs	r3, #3
 8005944:	75fb      	strb	r3, [r7, #23]
          break;
 8005946:	e016      	b.n	8005976 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b03      	cmp	r3, #3
 8005952:	d00f      	beq.n	8005974 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005954:	6839      	ldr	r1, [r7, #0]
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f001 fa36 	bl	8006dc8 <USBD_CtlError>
            ret = USBD_FAIL;
 800595c:	2303      	movs	r3, #3
 800595e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005960:	e008      	b.n	8005974 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005962:	6839      	ldr	r1, [r7, #0]
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f001 fa2f 	bl	8006dc8 <USBD_CtlError>
          ret = USBD_FAIL;
 800596a:	2303      	movs	r3, #3
 800596c:	75fb      	strb	r3, [r7, #23]
          break;
 800596e:	e002      	b.n	8005976 <USBD_CDC_Setup+0x176>
          break;
 8005970:	bf00      	nop
 8005972:	e008      	b.n	8005986 <USBD_CDC_Setup+0x186>
          break;
 8005974:	bf00      	nop
      }
      break;
 8005976:	e006      	b.n	8005986 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005978:	6839      	ldr	r1, [r7, #0]
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f001 fa24 	bl	8006dc8 <USBD_CtlError>
      ret = USBD_FAIL;
 8005980:	2303      	movs	r3, #3
 8005982:	75fb      	strb	r3, [r7, #23]
      break;
 8005984:	bf00      	nop
  }

  return (uint8_t)ret;
 8005986:	7dfb      	ldrb	r3, [r7, #23]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3718      	adds	r7, #24
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	460b      	mov	r3, r1
 800599a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80059a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e04f      	b.n	8005a52 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80059ba:	78fa      	ldrb	r2, [r7, #3]
 80059bc:	6879      	ldr	r1, [r7, #4]
 80059be:	4613      	mov	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	440b      	add	r3, r1
 80059c8:	3318      	adds	r3, #24
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d029      	beq.n	8005a24 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80059d0:	78fa      	ldrb	r2, [r7, #3]
 80059d2:	6879      	ldr	r1, [r7, #4]
 80059d4:	4613      	mov	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	440b      	add	r3, r1
 80059de:	3318      	adds	r3, #24
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	78f9      	ldrb	r1, [r7, #3]
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	460b      	mov	r3, r1
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	1a5b      	subs	r3, r3, r1
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4403      	add	r3, r0
 80059f0:	3344      	adds	r3, #68	; 0x44
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80059f8:	fb01 f303 	mul.w	r3, r1, r3
 80059fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d110      	bne.n	8005a24 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005a02:	78fa      	ldrb	r2, [r7, #3]
 8005a04:	6879      	ldr	r1, [r7, #4]
 8005a06:	4613      	mov	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	440b      	add	r3, r1
 8005a10:	3318      	adds	r3, #24
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a16:	78f9      	ldrb	r1, [r7, #3]
 8005a18:	2300      	movs	r3, #0
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f001 ff54 	bl	80078ca <USBD_LL_Transmit>
 8005a22:	e015      	b.n	8005a50 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00b      	beq.n	8005a50 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005a4c:	78fa      	ldrb	r2, [r7, #3]
 8005a4e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b084      	sub	sp, #16
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
 8005a62:	460b      	mov	r3, r1
 8005a64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a6c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e015      	b.n	8005aa8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005a7c:	78fb      	ldrb	r3, [r7, #3]
 8005a7e:	4619      	mov	r1, r3
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f001 ff64 	bl	800794e <USBD_LL_GetRxDataSize>
 8005a86:	4602      	mov	r2, r0
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005abe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e01b      	b.n	8005b02 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d015      	beq.n	8005b00 <USBD_CDC_EP0_RxReady+0x50>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005ada:	2bff      	cmp	r3, #255	; 0xff
 8005adc:	d010      	beq.n	8005b00 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005aec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005af4:	b292      	uxth	r2, r2
 8005af6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	22ff      	movs	r2, #255	; 0xff
 8005afc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
	...

08005b0c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2243      	movs	r2, #67	; 0x43
 8005b18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005b1a:	4b03      	ldr	r3, [pc, #12]	; (8005b28 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	20000094 	.word	0x20000094

08005b2c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2243      	movs	r2, #67	; 0x43
 8005b38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005b3a:	4b03      	ldr	r3, [pc, #12]	; (8005b48 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	20000050 	.word	0x20000050

08005b4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2243      	movs	r2, #67	; 0x43
 8005b58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005b5a:	4b03      	ldr	r3, [pc, #12]	; (8005b68 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	200000d8 	.word	0x200000d8

08005b6c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	220a      	movs	r2, #10
 8005b78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005b7a:	4b03      	ldr	r3, [pc, #12]	; (8005b88 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr
 8005b88:	2000000c 	.word	0x2000000c

08005b8c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e004      	b.n	8005baa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b087      	sub	sp, #28
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bc8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e008      	b.n	8005be6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	371c      	adds	r7, #28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b085      	sub	sp, #20
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c02:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e004      	b.n	8005c18 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c32:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005c34:	2301      	movs	r3, #1
 8005c36:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e01a      	b.n	8005c7c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d114      	bne.n	8005c7a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005c6e:	2181      	movs	r1, #129	; 0x81
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f001 fe2a 	bl	80078ca <USBD_LL_Transmit>

    ret = USBD_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e016      	b.n	8005cd0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	7c1b      	ldrb	r3, [r3, #16]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d109      	bne.n	8005cbe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f001 fe28 	bl	800790c <USBD_LL_PrepareReceive>
 8005cbc:	e007      	b.n	8005cce <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cc4:	2340      	movs	r3, #64	; 0x40
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f001 fe1f 	bl	800790c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e01f      	b.n	8005d30 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	79fa      	ldrb	r2, [r7, #7]
 8005d22:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f001 fc9b 	bl	8007660 <USBD_LL_Init>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e016      	b.n	8005d7e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00b      	beq.n	8005d7c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	f107 020e 	add.w	r2, r7, #14
 8005d70:	4610      	mov	r0, r2
 8005d72:	4798      	blx	r3
 8005d74:	4602      	mov	r2, r0
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b082      	sub	sp, #8
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f001 fcb2 	bl	80076f8 <USBD_LL_Start>
 8005d94:	4603      	mov	r3, r0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d009      	beq.n	8005de2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	78fa      	ldrb	r2, [r7, #3]
 8005dd8:	4611      	mov	r1, r2
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	4798      	blx	r3
 8005dde:	4603      	mov	r3, r0
 8005de0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d007      	beq.n	8005e12 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	78fa      	ldrb	r2, [r7, #3]
 8005e0c:	4611      	mov	r1, r2
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	4798      	blx	r3
  }

  return USBD_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e2c:	6839      	ldr	r1, [r7, #0]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 ff90 	bl	8006d54 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005e42:	461a      	mov	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e50:	f003 031f 	and.w	r3, r3, #31
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d01a      	beq.n	8005e8e <USBD_LL_SetupStage+0x72>
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d822      	bhi.n	8005ea2 <USBD_LL_SetupStage+0x86>
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d002      	beq.n	8005e66 <USBD_LL_SetupStage+0x4a>
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d00a      	beq.n	8005e7a <USBD_LL_SetupStage+0x5e>
 8005e64:	e01d      	b.n	8005ea2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fa62 	bl	8006338 <USBD_StdDevReq>
 8005e74:	4603      	mov	r3, r0
 8005e76:	73fb      	strb	r3, [r7, #15]
      break;
 8005e78:	e020      	b.n	8005ebc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e80:	4619      	mov	r1, r3
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fac6 	bl	8006414 <USBD_StdItfReq>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e8c:	e016      	b.n	8005ebc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e94:	4619      	mov	r1, r3
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fb05 	bl	80064a6 <USBD_StdEPReq>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005ea0:	e00c      	b.n	8005ebc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ea8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f001 fc81 	bl	80077b8 <USBD_LL_StallEP>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	73fb      	strb	r3, [r7, #15]
      break;
 8005eba:	bf00      	nop
  }

  return ret;
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b086      	sub	sp, #24
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	460b      	mov	r3, r1
 8005ed0:	607a      	str	r2, [r7, #4]
 8005ed2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005ed4:	7afb      	ldrb	r3, [r7, #11]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d138      	bne.n	8005f4c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005ee0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ee8:	2b03      	cmp	r3, #3
 8005eea:	d14a      	bne.n	8005f82 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d913      	bls.n	8005f20 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	1ad2      	subs	r2, r2, r3
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	68da      	ldr	r2, [r3, #12]
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	bf28      	it	cs
 8005f12:	4613      	movcs	r3, r2
 8005f14:	461a      	mov	r2, r3
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f001 f80f 	bl	8006f3c <USBD_CtlContinueRx>
 8005f1e:	e030      	b.n	8005f82 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	d10b      	bne.n	8005f44 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d005      	beq.n	8005f44 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f001 f80a 	bl	8006f5e <USBD_CtlSendStatus>
 8005f4a:	e01a      	b.n	8005f82 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d114      	bne.n	8005f82 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00e      	beq.n	8005f82 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	7afa      	ldrb	r2, [r7, #11]
 8005f6e:	4611      	mov	r1, r2
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	4798      	blx	r3
 8005f74:	4603      	mov	r3, r0
 8005f76:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005f78:	7dfb      	ldrb	r3, [r7, #23]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005f7e:	7dfb      	ldrb	r3, [r7, #23]
 8005f80:	e000      	b.n	8005f84 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3718      	adds	r7, #24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	460b      	mov	r3, r1
 8005f96:	607a      	str	r2, [r7, #4]
 8005f98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005f9a:	7afb      	ldrb	r3, [r7, #11]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d16b      	bne.n	8006078 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	3314      	adds	r3, #20
 8005fa4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d156      	bne.n	800605e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	689a      	ldr	r2, [r3, #8]
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d914      	bls.n	8005fe6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	689a      	ldr	r2, [r3, #8]
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	1ad2      	subs	r2, r2, r3
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	6879      	ldr	r1, [r7, #4]
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 ff84 	bl	8006ee0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fd8:	2300      	movs	r3, #0
 8005fda:	2200      	movs	r2, #0
 8005fdc:	2100      	movs	r1, #0
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f001 fc94 	bl	800790c <USBD_LL_PrepareReceive>
 8005fe4:	e03b      	b.n	800605e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d11c      	bne.n	800602c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d316      	bcc.n	800602c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006008:	429a      	cmp	r2, r3
 800600a:	d20f      	bcs.n	800602c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800600c:	2200      	movs	r2, #0
 800600e:	2100      	movs	r1, #0
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 ff65 	bl	8006ee0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800601e:	2300      	movs	r3, #0
 8006020:	2200      	movs	r2, #0
 8006022:	2100      	movs	r1, #0
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f001 fc71 	bl	800790c <USBD_LL_PrepareReceive>
 800602a:	e018      	b.n	800605e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b03      	cmp	r3, #3
 8006036:	d10b      	bne.n	8006050 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d005      	beq.n	8006050 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006050:	2180      	movs	r1, #128	; 0x80
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f001 fbb0 	bl	80077b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 ff93 	bl	8006f84 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006064:	2b01      	cmp	r3, #1
 8006066:	d122      	bne.n	80060ae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f7ff fe98 	bl	8005d9e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006076:	e01a      	b.n	80060ae <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b03      	cmp	r3, #3
 8006082:	d114      	bne.n	80060ae <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00e      	beq.n	80060ae <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	7afa      	ldrb	r2, [r7, #11]
 800609a:	4611      	mov	r1, r2
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	4798      	blx	r3
 80060a0:	4603      	mov	r3, r0
 80060a2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80060a4:	7dfb      	ldrb	r3, [r7, #23]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
 80060ac:	e000      	b.n	80060b0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e02f      	b.n	800614c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00f      	beq.n	8006116 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d009      	beq.n	8006116 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	6852      	ldr	r2, [r2, #4]
 800610e:	b2d2      	uxtb	r2, r2
 8006110:	4611      	mov	r1, r2
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006116:	2340      	movs	r3, #64	; 0x40
 8006118:	2200      	movs	r2, #0
 800611a:	2100      	movs	r1, #0
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f001 fb06 	bl	800772e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2240      	movs	r2, #64	; 0x40
 800612e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006132:	2340      	movs	r3, #64	; 0x40
 8006134:	2200      	movs	r2, #0
 8006136:	2180      	movs	r1, #128	; 0x80
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f001 faf8 	bl	800772e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2240      	movs	r2, #64	; 0x40
 8006148:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	78fa      	ldrb	r2, [r7, #3]
 8006164:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006182:	b2da      	uxtb	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2204      	movs	r2, #4
 800618e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b04      	cmp	r3, #4
 80061b2:	d106      	bne.n	80061c2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80061ba:	b2da      	uxtb	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e012      	b.n	800620c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b03      	cmp	r3, #3
 80061f0:	d10b      	bne.n	800620a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d005      	beq.n	800620a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	460b      	mov	r3, r1
 800621e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800622a:	2303      	movs	r3, #3
 800622c:	e014      	b.n	8006258 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b03      	cmp	r3, #3
 8006238:	d10d      	bne.n	8006256 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d007      	beq.n	8006256 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	78fa      	ldrb	r2, [r7, #3]
 8006250:	4611      	mov	r1, r2
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006276:	2303      	movs	r3, #3
 8006278:	e014      	b.n	80062a4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b03      	cmp	r3, #3
 8006284:	d10d      	bne.n	80062a2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	2b00      	cmp	r3, #0
 8006290:	d007      	beq.n	80062a2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	78fa      	ldrb	r2, [r7, #3]
 800629c:	4611      	mov	r1, r2
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b082      	sub	sp, #8
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d009      	beq.n	80062f0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	6852      	ldr	r2, [r2, #4]
 80062e8:	b2d2      	uxtb	r2, r2
 80062ea:	4611      	mov	r1, r2
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	4798      	blx	r3
  }

  return USBD_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b087      	sub	sp, #28
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	3301      	adds	r3, #1
 8006310:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006318:	8a3b      	ldrh	r3, [r7, #16]
 800631a:	021b      	lsls	r3, r3, #8
 800631c:	b21a      	sxth	r2, r3
 800631e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006322:	4313      	orrs	r3, r2
 8006324:	b21b      	sxth	r3, r3
 8006326:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006328:	89fb      	ldrh	r3, [r7, #14]
}
 800632a:	4618      	mov	r0, r3
 800632c:	371c      	adds	r7, #28
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
	...

08006338 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800634e:	2b40      	cmp	r3, #64	; 0x40
 8006350:	d005      	beq.n	800635e <USBD_StdDevReq+0x26>
 8006352:	2b40      	cmp	r3, #64	; 0x40
 8006354:	d853      	bhi.n	80063fe <USBD_StdDevReq+0xc6>
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00b      	beq.n	8006372 <USBD_StdDevReq+0x3a>
 800635a:	2b20      	cmp	r3, #32
 800635c:	d14f      	bne.n	80063fe <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	6839      	ldr	r1, [r7, #0]
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	4798      	blx	r3
 800636c:	4603      	mov	r3, r0
 800636e:	73fb      	strb	r3, [r7, #15]
      break;
 8006370:	e04a      	b.n	8006408 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	785b      	ldrb	r3, [r3, #1]
 8006376:	2b09      	cmp	r3, #9
 8006378:	d83b      	bhi.n	80063f2 <USBD_StdDevReq+0xba>
 800637a:	a201      	add	r2, pc, #4	; (adr r2, 8006380 <USBD_StdDevReq+0x48>)
 800637c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006380:	080063d5 	.word	0x080063d5
 8006384:	080063e9 	.word	0x080063e9
 8006388:	080063f3 	.word	0x080063f3
 800638c:	080063df 	.word	0x080063df
 8006390:	080063f3 	.word	0x080063f3
 8006394:	080063b3 	.word	0x080063b3
 8006398:	080063a9 	.word	0x080063a9
 800639c:	080063f3 	.word	0x080063f3
 80063a0:	080063cb 	.word	0x080063cb
 80063a4:	080063bd 	.word	0x080063bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80063a8:	6839      	ldr	r1, [r7, #0]
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f9de 	bl	800676c <USBD_GetDescriptor>
          break;
 80063b0:	e024      	b.n	80063fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80063b2:	6839      	ldr	r1, [r7, #0]
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fb43 	bl	8006a40 <USBD_SetAddress>
          break;
 80063ba:	e01f      	b.n	80063fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80063bc:	6839      	ldr	r1, [r7, #0]
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fb82 	bl	8006ac8 <USBD_SetConfig>
 80063c4:	4603      	mov	r3, r0
 80063c6:	73fb      	strb	r3, [r7, #15]
          break;
 80063c8:	e018      	b.n	80063fc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fc21 	bl	8006c14 <USBD_GetConfig>
          break;
 80063d2:	e013      	b.n	80063fc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fc52 	bl	8006c80 <USBD_GetStatus>
          break;
 80063dc:	e00e      	b.n	80063fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fc81 	bl	8006ce8 <USBD_SetFeature>
          break;
 80063e6:	e009      	b.n	80063fc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80063e8:	6839      	ldr	r1, [r7, #0]
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fc90 	bl	8006d10 <USBD_ClrFeature>
          break;
 80063f0:	e004      	b.n	80063fc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fce7 	bl	8006dc8 <USBD_CtlError>
          break;
 80063fa:	bf00      	nop
      }
      break;
 80063fc:	e004      	b.n	8006408 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80063fe:	6839      	ldr	r1, [r7, #0]
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fce1 	bl	8006dc8 <USBD_CtlError>
      break;
 8006406:	bf00      	nop
  }

  return ret;
 8006408:	7bfb      	ldrb	r3, [r7, #15]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop

08006414 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800642a:	2b40      	cmp	r3, #64	; 0x40
 800642c:	d005      	beq.n	800643a <USBD_StdItfReq+0x26>
 800642e:	2b40      	cmp	r3, #64	; 0x40
 8006430:	d82f      	bhi.n	8006492 <USBD_StdItfReq+0x7e>
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <USBD_StdItfReq+0x26>
 8006436:	2b20      	cmp	r3, #32
 8006438:	d12b      	bne.n	8006492 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006440:	b2db      	uxtb	r3, r3
 8006442:	3b01      	subs	r3, #1
 8006444:	2b02      	cmp	r3, #2
 8006446:	d81d      	bhi.n	8006484 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	889b      	ldrh	r3, [r3, #4]
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b01      	cmp	r3, #1
 8006450:	d813      	bhi.n	800647a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	6839      	ldr	r1, [r7, #0]
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	4798      	blx	r3
 8006460:	4603      	mov	r3, r0
 8006462:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	88db      	ldrh	r3, [r3, #6]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d110      	bne.n	800648e <USBD_StdItfReq+0x7a>
 800646c:	7bfb      	ldrb	r3, [r7, #15]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10d      	bne.n	800648e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fd73 	bl	8006f5e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006478:	e009      	b.n	800648e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fca3 	bl	8006dc8 <USBD_CtlError>
          break;
 8006482:	e004      	b.n	800648e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006484:	6839      	ldr	r1, [r7, #0]
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fc9e 	bl	8006dc8 <USBD_CtlError>
          break;
 800648c:	e000      	b.n	8006490 <USBD_StdItfReq+0x7c>
          break;
 800648e:	bf00      	nop
      }
      break;
 8006490:	e004      	b.n	800649c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006492:	6839      	ldr	r1, [r7, #0]
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 fc97 	bl	8006dc8 <USBD_CtlError>
      break;
 800649a:	bf00      	nop
  }

  return ret;
 800649c:	7bfb      	ldrb	r3, [r7, #15]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b084      	sub	sp, #16
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	889b      	ldrh	r3, [r3, #4]
 80064b8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064c2:	2b40      	cmp	r3, #64	; 0x40
 80064c4:	d007      	beq.n	80064d6 <USBD_StdEPReq+0x30>
 80064c6:	2b40      	cmp	r3, #64	; 0x40
 80064c8:	f200 8145 	bhi.w	8006756 <USBD_StdEPReq+0x2b0>
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00c      	beq.n	80064ea <USBD_StdEPReq+0x44>
 80064d0:	2b20      	cmp	r3, #32
 80064d2:	f040 8140 	bne.w	8006756 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	6839      	ldr	r1, [r7, #0]
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	4798      	blx	r3
 80064e4:	4603      	mov	r3, r0
 80064e6:	73fb      	strb	r3, [r7, #15]
      break;
 80064e8:	e13a      	b.n	8006760 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	785b      	ldrb	r3, [r3, #1]
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d007      	beq.n	8006502 <USBD_StdEPReq+0x5c>
 80064f2:	2b03      	cmp	r3, #3
 80064f4:	f300 8129 	bgt.w	800674a <USBD_StdEPReq+0x2a4>
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d07f      	beq.n	80065fc <USBD_StdEPReq+0x156>
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d03c      	beq.n	800657a <USBD_StdEPReq+0xd4>
 8006500:	e123      	b.n	800674a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b02      	cmp	r3, #2
 800650c:	d002      	beq.n	8006514 <USBD_StdEPReq+0x6e>
 800650e:	2b03      	cmp	r3, #3
 8006510:	d016      	beq.n	8006540 <USBD_StdEPReq+0x9a>
 8006512:	e02c      	b.n	800656e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006514:	7bbb      	ldrb	r3, [r7, #14]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00d      	beq.n	8006536 <USBD_StdEPReq+0x90>
 800651a:	7bbb      	ldrb	r3, [r7, #14]
 800651c:	2b80      	cmp	r3, #128	; 0x80
 800651e:	d00a      	beq.n	8006536 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006520:	7bbb      	ldrb	r3, [r7, #14]
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f001 f947 	bl	80077b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800652a:	2180      	movs	r1, #128	; 0x80
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f001 f943 	bl	80077b8 <USBD_LL_StallEP>
 8006532:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006534:	e020      	b.n	8006578 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006536:	6839      	ldr	r1, [r7, #0]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fc45 	bl	8006dc8 <USBD_CtlError>
              break;
 800653e:	e01b      	b.n	8006578 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	885b      	ldrh	r3, [r3, #2]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10e      	bne.n	8006566 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006548:	7bbb      	ldrb	r3, [r7, #14]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00b      	beq.n	8006566 <USBD_StdEPReq+0xc0>
 800654e:	7bbb      	ldrb	r3, [r7, #14]
 8006550:	2b80      	cmp	r3, #128	; 0x80
 8006552:	d008      	beq.n	8006566 <USBD_StdEPReq+0xc0>
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	88db      	ldrh	r3, [r3, #6]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d104      	bne.n	8006566 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800655c:	7bbb      	ldrb	r3, [r7, #14]
 800655e:	4619      	mov	r1, r3
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f001 f929 	bl	80077b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fcf9 	bl	8006f5e <USBD_CtlSendStatus>

              break;
 800656c:	e004      	b.n	8006578 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800656e:	6839      	ldr	r1, [r7, #0]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fc29 	bl	8006dc8 <USBD_CtlError>
              break;
 8006576:	bf00      	nop
          }
          break;
 8006578:	e0ec      	b.n	8006754 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b02      	cmp	r3, #2
 8006584:	d002      	beq.n	800658c <USBD_StdEPReq+0xe6>
 8006586:	2b03      	cmp	r3, #3
 8006588:	d016      	beq.n	80065b8 <USBD_StdEPReq+0x112>
 800658a:	e030      	b.n	80065ee <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800658c:	7bbb      	ldrb	r3, [r7, #14]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00d      	beq.n	80065ae <USBD_StdEPReq+0x108>
 8006592:	7bbb      	ldrb	r3, [r7, #14]
 8006594:	2b80      	cmp	r3, #128	; 0x80
 8006596:	d00a      	beq.n	80065ae <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006598:	7bbb      	ldrb	r3, [r7, #14]
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f001 f90b 	bl	80077b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80065a2:	2180      	movs	r1, #128	; 0x80
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f001 f907 	bl	80077b8 <USBD_LL_StallEP>
 80065aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80065ac:	e025      	b.n	80065fa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fc09 	bl	8006dc8 <USBD_CtlError>
              break;
 80065b6:	e020      	b.n	80065fa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	885b      	ldrh	r3, [r3, #2]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d11b      	bne.n	80065f8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80065c0:	7bbb      	ldrb	r3, [r7, #14]
 80065c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d004      	beq.n	80065d4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80065ca:	7bbb      	ldrb	r3, [r7, #14]
 80065cc:	4619      	mov	r1, r3
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f001 f911 	bl	80077f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 fcc2 	bl	8006f5e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	6839      	ldr	r1, [r7, #0]
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	4798      	blx	r3
 80065e8:	4603      	mov	r3, r0
 80065ea:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80065ec:	e004      	b.n	80065f8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80065ee:	6839      	ldr	r1, [r7, #0]
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fbe9 	bl	8006dc8 <USBD_CtlError>
              break;
 80065f6:	e000      	b.n	80065fa <USBD_StdEPReq+0x154>
              break;
 80065f8:	bf00      	nop
          }
          break;
 80065fa:	e0ab      	b.n	8006754 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b02      	cmp	r3, #2
 8006606:	d002      	beq.n	800660e <USBD_StdEPReq+0x168>
 8006608:	2b03      	cmp	r3, #3
 800660a:	d032      	beq.n	8006672 <USBD_StdEPReq+0x1cc>
 800660c:	e097      	b.n	800673e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800660e:	7bbb      	ldrb	r3, [r7, #14]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d007      	beq.n	8006624 <USBD_StdEPReq+0x17e>
 8006614:	7bbb      	ldrb	r3, [r7, #14]
 8006616:	2b80      	cmp	r3, #128	; 0x80
 8006618:	d004      	beq.n	8006624 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fbd3 	bl	8006dc8 <USBD_CtlError>
                break;
 8006622:	e091      	b.n	8006748 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006624:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006628:	2b00      	cmp	r3, #0
 800662a:	da0b      	bge.n	8006644 <USBD_StdEPReq+0x19e>
 800662c:	7bbb      	ldrb	r3, [r7, #14]
 800662e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006632:	4613      	mov	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	3310      	adds	r3, #16
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	4413      	add	r3, r2
 8006640:	3304      	adds	r3, #4
 8006642:	e00b      	b.n	800665c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006644:	7bbb      	ldrb	r3, [r7, #14]
 8006646:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800664a:	4613      	mov	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	4413      	add	r3, r2
 800665a:	3304      	adds	r3, #4
 800665c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2200      	movs	r2, #0
 8006662:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2202      	movs	r2, #2
 8006668:	4619      	mov	r1, r3
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fc1d 	bl	8006eaa <USBD_CtlSendData>
              break;
 8006670:	e06a      	b.n	8006748 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006672:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006676:	2b00      	cmp	r3, #0
 8006678:	da11      	bge.n	800669e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800667a:	7bbb      	ldrb	r3, [r7, #14]
 800667c:	f003 020f 	and.w	r2, r3, #15
 8006680:	6879      	ldr	r1, [r7, #4]
 8006682:	4613      	mov	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	440b      	add	r3, r1
 800668c:	3324      	adds	r3, #36	; 0x24
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d117      	bne.n	80066c4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006694:	6839      	ldr	r1, [r7, #0]
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fb96 	bl	8006dc8 <USBD_CtlError>
                  break;
 800669c:	e054      	b.n	8006748 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800669e:	7bbb      	ldrb	r3, [r7, #14]
 80066a0:	f003 020f 	and.w	r2, r3, #15
 80066a4:	6879      	ldr	r1, [r7, #4]
 80066a6:	4613      	mov	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	440b      	add	r3, r1
 80066b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d104      	bne.n	80066c4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80066ba:	6839      	ldr	r1, [r7, #0]
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fb83 	bl	8006dc8 <USBD_CtlError>
                  break;
 80066c2:	e041      	b.n	8006748 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	da0b      	bge.n	80066e4 <USBD_StdEPReq+0x23e>
 80066cc:	7bbb      	ldrb	r3, [r7, #14]
 80066ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066d2:	4613      	mov	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	3310      	adds	r3, #16
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	4413      	add	r3, r2
 80066e0:	3304      	adds	r3, #4
 80066e2:	e00b      	b.n	80066fc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80066e4:	7bbb      	ldrb	r3, [r7, #14]
 80066e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066ea:	4613      	mov	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	4413      	add	r3, r2
 80066fa:	3304      	adds	r3, #4
 80066fc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80066fe:	7bbb      	ldrb	r3, [r7, #14]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d002      	beq.n	800670a <USBD_StdEPReq+0x264>
 8006704:	7bbb      	ldrb	r3, [r7, #14]
 8006706:	2b80      	cmp	r3, #128	; 0x80
 8006708:	d103      	bne.n	8006712 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	2200      	movs	r2, #0
 800670e:	601a      	str	r2, [r3, #0]
 8006710:	e00e      	b.n	8006730 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006712:	7bbb      	ldrb	r3, [r7, #14]
 8006714:	4619      	mov	r1, r3
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f001 f88c 	bl	8007834 <USBD_LL_IsStallEP>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2201      	movs	r2, #1
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	e002      	b.n	8006730 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2200      	movs	r2, #0
 800672e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2202      	movs	r2, #2
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fbb7 	bl	8006eaa <USBD_CtlSendData>
              break;
 800673c:	e004      	b.n	8006748 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800673e:	6839      	ldr	r1, [r7, #0]
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fb41 	bl	8006dc8 <USBD_CtlError>
              break;
 8006746:	bf00      	nop
          }
          break;
 8006748:	e004      	b.n	8006754 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800674a:	6839      	ldr	r1, [r7, #0]
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fb3b 	bl	8006dc8 <USBD_CtlError>
          break;
 8006752:	bf00      	nop
      }
      break;
 8006754:	e004      	b.n	8006760 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006756:	6839      	ldr	r1, [r7, #0]
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fb35 	bl	8006dc8 <USBD_CtlError>
      break;
 800675e:	bf00      	nop
  }

  return ret;
 8006760:	7bfb      	ldrb	r3, [r7, #15]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
	...

0800676c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006776:	2300      	movs	r3, #0
 8006778:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800677a:	2300      	movs	r3, #0
 800677c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800677e:	2300      	movs	r3, #0
 8006780:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	885b      	ldrh	r3, [r3, #2]
 8006786:	0a1b      	lsrs	r3, r3, #8
 8006788:	b29b      	uxth	r3, r3
 800678a:	3b01      	subs	r3, #1
 800678c:	2b06      	cmp	r3, #6
 800678e:	f200 8128 	bhi.w	80069e2 <USBD_GetDescriptor+0x276>
 8006792:	a201      	add	r2, pc, #4	; (adr r2, 8006798 <USBD_GetDescriptor+0x2c>)
 8006794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006798:	080067b5 	.word	0x080067b5
 800679c:	080067cd 	.word	0x080067cd
 80067a0:	0800680d 	.word	0x0800680d
 80067a4:	080069e3 	.word	0x080069e3
 80067a8:	080069e3 	.word	0x080069e3
 80067ac:	08006983 	.word	0x08006983
 80067b0:	080069af 	.word	0x080069af
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	7c12      	ldrb	r2, [r2, #16]
 80067c0:	f107 0108 	add.w	r1, r7, #8
 80067c4:	4610      	mov	r0, r2
 80067c6:	4798      	blx	r3
 80067c8:	60f8      	str	r0, [r7, #12]
      break;
 80067ca:	e112      	b.n	80069f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	7c1b      	ldrb	r3, [r3, #16]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10d      	bne.n	80067f0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067dc:	f107 0208 	add.w	r2, r7, #8
 80067e0:	4610      	mov	r0, r2
 80067e2:	4798      	blx	r3
 80067e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	3301      	adds	r3, #1
 80067ea:	2202      	movs	r2, #2
 80067ec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80067ee:	e100      	b.n	80069f2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f8:	f107 0208 	add.w	r2, r7, #8
 80067fc:	4610      	mov	r0, r2
 80067fe:	4798      	blx	r3
 8006800:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3301      	adds	r3, #1
 8006806:	2202      	movs	r2, #2
 8006808:	701a      	strb	r2, [r3, #0]
      break;
 800680a:	e0f2      	b.n	80069f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	885b      	ldrh	r3, [r3, #2]
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b05      	cmp	r3, #5
 8006814:	f200 80ac 	bhi.w	8006970 <USBD_GetDescriptor+0x204>
 8006818:	a201      	add	r2, pc, #4	; (adr r2, 8006820 <USBD_GetDescriptor+0xb4>)
 800681a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681e:	bf00      	nop
 8006820:	08006839 	.word	0x08006839
 8006824:	0800686d 	.word	0x0800686d
 8006828:	080068a1 	.word	0x080068a1
 800682c:	080068d5 	.word	0x080068d5
 8006830:	08006909 	.word	0x08006909
 8006834:	0800693d 	.word	0x0800693d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00b      	beq.n	800685c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	7c12      	ldrb	r2, [r2, #16]
 8006850:	f107 0108 	add.w	r1, r7, #8
 8006854:	4610      	mov	r0, r2
 8006856:	4798      	blx	r3
 8006858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800685a:	e091      	b.n	8006980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800685c:	6839      	ldr	r1, [r7, #0]
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fab2 	bl	8006dc8 <USBD_CtlError>
            err++;
 8006864:	7afb      	ldrb	r3, [r7, #11]
 8006866:	3301      	adds	r3, #1
 8006868:	72fb      	strb	r3, [r7, #11]
          break;
 800686a:	e089      	b.n	8006980 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00b      	beq.n	8006890 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	7c12      	ldrb	r2, [r2, #16]
 8006884:	f107 0108 	add.w	r1, r7, #8
 8006888:	4610      	mov	r0, r2
 800688a:	4798      	blx	r3
 800688c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800688e:	e077      	b.n	8006980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006890:	6839      	ldr	r1, [r7, #0]
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fa98 	bl	8006dc8 <USBD_CtlError>
            err++;
 8006898:	7afb      	ldrb	r3, [r7, #11]
 800689a:	3301      	adds	r3, #1
 800689c:	72fb      	strb	r3, [r7, #11]
          break;
 800689e:	e06f      	b.n	8006980 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00b      	beq.n	80068c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	7c12      	ldrb	r2, [r2, #16]
 80068b8:	f107 0108 	add.w	r1, r7, #8
 80068bc:	4610      	mov	r0, r2
 80068be:	4798      	blx	r3
 80068c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068c2:	e05d      	b.n	8006980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068c4:	6839      	ldr	r1, [r7, #0]
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fa7e 	bl	8006dc8 <USBD_CtlError>
            err++;
 80068cc:	7afb      	ldrb	r3, [r7, #11]
 80068ce:	3301      	adds	r3, #1
 80068d0:	72fb      	strb	r3, [r7, #11]
          break;
 80068d2:	e055      	b.n	8006980 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00b      	beq.n	80068f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	7c12      	ldrb	r2, [r2, #16]
 80068ec:	f107 0108 	add.w	r1, r7, #8
 80068f0:	4610      	mov	r0, r2
 80068f2:	4798      	blx	r3
 80068f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068f6:	e043      	b.n	8006980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068f8:	6839      	ldr	r1, [r7, #0]
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fa64 	bl	8006dc8 <USBD_CtlError>
            err++;
 8006900:	7afb      	ldrb	r3, [r7, #11]
 8006902:	3301      	adds	r3, #1
 8006904:	72fb      	strb	r3, [r7, #11]
          break;
 8006906:	e03b      	b.n	8006980 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00b      	beq.n	800692c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	7c12      	ldrb	r2, [r2, #16]
 8006920:	f107 0108 	add.w	r1, r7, #8
 8006924:	4610      	mov	r0, r2
 8006926:	4798      	blx	r3
 8006928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800692a:	e029      	b.n	8006980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800692c:	6839      	ldr	r1, [r7, #0]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fa4a 	bl	8006dc8 <USBD_CtlError>
            err++;
 8006934:	7afb      	ldrb	r3, [r7, #11]
 8006936:	3301      	adds	r3, #1
 8006938:	72fb      	strb	r3, [r7, #11]
          break;
 800693a:	e021      	b.n	8006980 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00b      	beq.n	8006960 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	7c12      	ldrb	r2, [r2, #16]
 8006954:	f107 0108 	add.w	r1, r7, #8
 8006958:	4610      	mov	r0, r2
 800695a:	4798      	blx	r3
 800695c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800695e:	e00f      	b.n	8006980 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fa30 	bl	8006dc8 <USBD_CtlError>
            err++;
 8006968:	7afb      	ldrb	r3, [r7, #11]
 800696a:	3301      	adds	r3, #1
 800696c:	72fb      	strb	r3, [r7, #11]
          break;
 800696e:	e007      	b.n	8006980 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fa28 	bl	8006dc8 <USBD_CtlError>
          err++;
 8006978:	7afb      	ldrb	r3, [r7, #11]
 800697a:	3301      	adds	r3, #1
 800697c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800697e:	bf00      	nop
      }
      break;
 8006980:	e037      	b.n	80069f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	7c1b      	ldrb	r3, [r3, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d109      	bne.n	800699e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006992:	f107 0208 	add.w	r2, r7, #8
 8006996:	4610      	mov	r0, r2
 8006998:	4798      	blx	r3
 800699a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800699c:	e029      	b.n	80069f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fa11 	bl	8006dc8 <USBD_CtlError>
        err++;
 80069a6:	7afb      	ldrb	r3, [r7, #11]
 80069a8:	3301      	adds	r3, #1
 80069aa:	72fb      	strb	r3, [r7, #11]
      break;
 80069ac:	e021      	b.n	80069f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	7c1b      	ldrb	r3, [r3, #16]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10d      	bne.n	80069d2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069be:	f107 0208 	add.w	r2, r7, #8
 80069c2:	4610      	mov	r0, r2
 80069c4:	4798      	blx	r3
 80069c6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	3301      	adds	r3, #1
 80069cc:	2207      	movs	r2, #7
 80069ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069d0:	e00f      	b.n	80069f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f9f7 	bl	8006dc8 <USBD_CtlError>
        err++;
 80069da:	7afb      	ldrb	r3, [r7, #11]
 80069dc:	3301      	adds	r3, #1
 80069de:	72fb      	strb	r3, [r7, #11]
      break;
 80069e0:	e007      	b.n	80069f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80069e2:	6839      	ldr	r1, [r7, #0]
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f9ef 	bl	8006dc8 <USBD_CtlError>
      err++;
 80069ea:	7afb      	ldrb	r3, [r7, #11]
 80069ec:	3301      	adds	r3, #1
 80069ee:	72fb      	strb	r3, [r7, #11]
      break;
 80069f0:	bf00      	nop
  }

  if (err != 0U)
 80069f2:	7afb      	ldrb	r3, [r7, #11]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d11e      	bne.n	8006a36 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	88db      	ldrh	r3, [r3, #6]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d016      	beq.n	8006a2e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006a00:	893b      	ldrh	r3, [r7, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00e      	beq.n	8006a24 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	88da      	ldrh	r2, [r3, #6]
 8006a0a:	893b      	ldrh	r3, [r7, #8]
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	bf28      	it	cs
 8006a10:	4613      	movcs	r3, r2
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a16:	893b      	ldrh	r3, [r7, #8]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	68f9      	ldr	r1, [r7, #12]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fa44 	bl	8006eaa <USBD_CtlSendData>
 8006a22:	e009      	b.n	8006a38 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f9ce 	bl	8006dc8 <USBD_CtlError>
 8006a2c:	e004      	b.n	8006a38 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fa95 	bl	8006f5e <USBD_CtlSendStatus>
 8006a34:	e000      	b.n	8006a38 <USBD_GetDescriptor+0x2cc>
    return;
 8006a36:	bf00      	nop
  }
}
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop

08006a40 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	889b      	ldrh	r3, [r3, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d131      	bne.n	8006ab6 <USBD_SetAddress+0x76>
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	88db      	ldrh	r3, [r3, #6]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d12d      	bne.n	8006ab6 <USBD_SetAddress+0x76>
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	885b      	ldrh	r3, [r3, #2]
 8006a5e:	2b7f      	cmp	r3, #127	; 0x7f
 8006a60:	d829      	bhi.n	8006ab6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	885b      	ldrh	r3, [r3, #2]
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d104      	bne.n	8006a84 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006a7a:	6839      	ldr	r1, [r7, #0]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f9a3 	bl	8006dc8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a82:	e01d      	b.n	8006ac0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	7bfa      	ldrb	r2, [r7, #15]
 8006a88:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fefb 	bl	800788c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fa61 	bl	8006f5e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d004      	beq.n	8006aac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aaa:	e009      	b.n	8006ac0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ab4:	e004      	b.n	8006ac0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006ab6:	6839      	ldr	r1, [r7, #0]
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f985 	bl	8006dc8 <USBD_CtlError>
  }
}
 8006abe:	bf00      	nop
 8006ac0:	bf00      	nop
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	885b      	ldrh	r3, [r3, #2]
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	4b4c      	ldr	r3, [pc, #304]	; (8006c10 <USBD_SetConfig+0x148>)
 8006ade:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ae0:	4b4b      	ldr	r3, [pc, #300]	; (8006c10 <USBD_SetConfig+0x148>)
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d905      	bls.n	8006af4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006ae8:	6839      	ldr	r1, [r7, #0]
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f96c 	bl	8006dc8 <USBD_CtlError>
    return USBD_FAIL;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e088      	b.n	8006c06 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d002      	beq.n	8006b06 <USBD_SetConfig+0x3e>
 8006b00:	2b03      	cmp	r3, #3
 8006b02:	d025      	beq.n	8006b50 <USBD_SetConfig+0x88>
 8006b04:	e071      	b.n	8006bea <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006b06:	4b42      	ldr	r3, [pc, #264]	; (8006c10 <USBD_SetConfig+0x148>)
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d01c      	beq.n	8006b48 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006b0e:	4b40      	ldr	r3, [pc, #256]	; (8006c10 <USBD_SetConfig+0x148>)
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	461a      	mov	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b18:	4b3d      	ldr	r3, [pc, #244]	; (8006c10 <USBD_SetConfig+0x148>)
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7ff f948 	bl	8005db4 <USBD_SetClassConfig>
 8006b24:	4603      	mov	r3, r0
 8006b26:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d004      	beq.n	8006b38 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006b2e:	6839      	ldr	r1, [r7, #0]
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f949 	bl	8006dc8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006b36:	e065      	b.n	8006c04 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fa10 	bl	8006f5e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2203      	movs	r2, #3
 8006b42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006b46:	e05d      	b.n	8006c04 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fa08 	bl	8006f5e <USBD_CtlSendStatus>
      break;
 8006b4e:	e059      	b.n	8006c04 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006b50:	4b2f      	ldr	r3, [pc, #188]	; (8006c10 <USBD_SetConfig+0x148>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d112      	bne.n	8006b7e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006b60:	4b2b      	ldr	r3, [pc, #172]	; (8006c10 <USBD_SetConfig+0x148>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	461a      	mov	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b6a:	4b29      	ldr	r3, [pc, #164]	; (8006c10 <USBD_SetConfig+0x148>)
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	4619      	mov	r1, r3
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7ff f93b 	bl	8005dec <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f9f1 	bl	8006f5e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006b7c:	e042      	b.n	8006c04 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006b7e:	4b24      	ldr	r3, [pc, #144]	; (8006c10 <USBD_SetConfig+0x148>)
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d02a      	beq.n	8006be2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7ff f929 	bl	8005dec <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006b9a:	4b1d      	ldr	r3, [pc, #116]	; (8006c10 <USBD_SetConfig+0x148>)
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ba4:	4b1a      	ldr	r3, [pc, #104]	; (8006c10 <USBD_SetConfig+0x148>)
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7ff f902 	bl	8005db4 <USBD_SetClassConfig>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00f      	beq.n	8006bda <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 f903 	bl	8006dc8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7ff f90e 	bl	8005dec <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006bd8:	e014      	b.n	8006c04 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f9bf 	bl	8006f5e <USBD_CtlSendStatus>
      break;
 8006be0:	e010      	b.n	8006c04 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f9bb 	bl	8006f5e <USBD_CtlSendStatus>
      break;
 8006be8:	e00c      	b.n	8006c04 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006bea:	6839      	ldr	r1, [r7, #0]
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f8eb 	bl	8006dc8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006bf2:	4b07      	ldr	r3, [pc, #28]	; (8006c10 <USBD_SetConfig+0x148>)
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff f8f7 	bl	8005dec <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	73fb      	strb	r3, [r7, #15]
      break;
 8006c02:	bf00      	nop
  }

  return ret;
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	200003e8 	.word	0x200003e8

08006c14 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	88db      	ldrh	r3, [r3, #6]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d004      	beq.n	8006c30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f8cd 	bl	8006dc8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006c2e:	e023      	b.n	8006c78 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	dc02      	bgt.n	8006c42 <USBD_GetConfig+0x2e>
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	dc03      	bgt.n	8006c48 <USBD_GetConfig+0x34>
 8006c40:	e015      	b.n	8006c6e <USBD_GetConfig+0x5a>
 8006c42:	2b03      	cmp	r3, #3
 8006c44:	d00b      	beq.n	8006c5e <USBD_GetConfig+0x4a>
 8006c46:	e012      	b.n	8006c6e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	3308      	adds	r3, #8
 8006c52:	2201      	movs	r2, #1
 8006c54:	4619      	mov	r1, r3
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f927 	bl	8006eaa <USBD_CtlSendData>
        break;
 8006c5c:	e00c      	b.n	8006c78 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	3304      	adds	r3, #4
 8006c62:	2201      	movs	r2, #1
 8006c64:	4619      	mov	r1, r3
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f91f 	bl	8006eaa <USBD_CtlSendData>
        break;
 8006c6c:	e004      	b.n	8006c78 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006c6e:	6839      	ldr	r1, [r7, #0]
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 f8a9 	bl	8006dc8 <USBD_CtlError>
        break;
 8006c76:	bf00      	nop
}
 8006c78:	bf00      	nop
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	3b01      	subs	r3, #1
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d81e      	bhi.n	8006cd6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	88db      	ldrh	r3, [r3, #6]
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d004      	beq.n	8006caa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006ca0:	6839      	ldr	r1, [r7, #0]
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f890 	bl	8006dc8 <USBD_CtlError>
        break;
 8006ca8:	e01a      	b.n	8006ce0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d005      	beq.n	8006cc6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f043 0202 	orr.w	r2, r3, #2
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	330c      	adds	r3, #12
 8006cca:	2202      	movs	r2, #2
 8006ccc:	4619      	mov	r1, r3
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f8eb 	bl	8006eaa <USBD_CtlSendData>
      break;
 8006cd4:	e004      	b.n	8006ce0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f875 	bl	8006dc8 <USBD_CtlError>
      break;
 8006cde:	bf00      	nop
  }
}
 8006ce0:	bf00      	nop
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	885b      	ldrh	r3, [r3, #2]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d106      	bne.n	8006d08 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f92b 	bl	8006f5e <USBD_CtlSendStatus>
  }
}
 8006d08:	bf00      	nop
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	3b01      	subs	r3, #1
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d80b      	bhi.n	8006d40 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	885b      	ldrh	r3, [r3, #2]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d10c      	bne.n	8006d4a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f910 	bl	8006f5e <USBD_CtlSendStatus>
      }
      break;
 8006d3e:	e004      	b.n	8006d4a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006d40:	6839      	ldr	r1, [r7, #0]
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f840 	bl	8006dc8 <USBD_CtlError>
      break;
 8006d48:	e000      	b.n	8006d4c <USBD_ClrFeature+0x3c>
      break;
 8006d4a:	bf00      	nop
  }
}
 8006d4c:	bf00      	nop
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	781a      	ldrb	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	781a      	ldrb	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f7ff fabb 	bl	80062fa <SWAPBYTE>
 8006d84:	4603      	mov	r3, r0
 8006d86:	461a      	mov	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3301      	adds	r3, #1
 8006d96:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f7ff faae 	bl	80062fa <SWAPBYTE>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	461a      	mov	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	3301      	adds	r3, #1
 8006daa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	3301      	adds	r3, #1
 8006db0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f7ff faa1 	bl	80062fa <SWAPBYTE>
 8006db8:	4603      	mov	r3, r0
 8006dba:	461a      	mov	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	80da      	strh	r2, [r3, #6]
}
 8006dc0:	bf00      	nop
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dd2:	2180      	movs	r1, #128	; 0x80
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fcef 	bl	80077b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006dda:	2100      	movs	r1, #0
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fceb 	bl	80077b8 <USBD_LL_StallEP>
}
 8006de2:	bf00      	nop
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b086      	sub	sp, #24
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	60b9      	str	r1, [r7, #8]
 8006df4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d036      	beq.n	8006e6e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006e04:	6938      	ldr	r0, [r7, #16]
 8006e06:	f000 f836 	bl	8006e76 <USBD_GetLen>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	005b      	lsls	r3, r3, #1
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	7812      	ldrb	r2, [r2, #0]
 8006e22:	701a      	strb	r2, [r3, #0]
  idx++;
 8006e24:	7dfb      	ldrb	r3, [r7, #23]
 8006e26:	3301      	adds	r3, #1
 8006e28:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006e2a:	7dfb      	ldrb	r3, [r7, #23]
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	4413      	add	r3, r2
 8006e30:	2203      	movs	r2, #3
 8006e32:	701a      	strb	r2, [r3, #0]
  idx++;
 8006e34:	7dfb      	ldrb	r3, [r7, #23]
 8006e36:	3301      	adds	r3, #1
 8006e38:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006e3a:	e013      	b.n	8006e64 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006e3c:	7dfb      	ldrb	r3, [r7, #23]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	4413      	add	r3, r2
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	7812      	ldrb	r2, [r2, #0]
 8006e46:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	613b      	str	r3, [r7, #16]
    idx++;
 8006e4e:	7dfb      	ldrb	r3, [r7, #23]
 8006e50:	3301      	adds	r3, #1
 8006e52:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006e54:	7dfb      	ldrb	r3, [r7, #23]
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	4413      	add	r3, r2
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	701a      	strb	r2, [r3, #0]
    idx++;
 8006e5e:	7dfb      	ldrb	r3, [r7, #23]
 8006e60:	3301      	adds	r3, #1
 8006e62:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1e7      	bne.n	8006e3c <USBD_GetString+0x52>
 8006e6c:	e000      	b.n	8006e70 <USBD_GetString+0x86>
    return;
 8006e6e:	bf00      	nop
  }
}
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b085      	sub	sp, #20
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006e86:	e005      	b.n	8006e94 <USBD_GetLen+0x1e>
  {
    len++;
 8006e88:	7bfb      	ldrb	r3, [r7, #15]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	3301      	adds	r3, #1
 8006e92:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1f5      	bne.n	8006e88 <USBD_GetLen+0x12>
  }

  return len;
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	60f8      	str	r0, [r7, #12]
 8006eb2:	60b9      	str	r1, [r7, #8]
 8006eb4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2202      	movs	r2, #2
 8006eba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	2100      	movs	r1, #0
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f000 fcfa 	bl	80078ca <USBD_LL_Transmit>

  return USBD_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f000 fce9 	bl	80078ca <USBD_LL_Transmit>

  return USBD_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b084      	sub	sp, #16
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	60f8      	str	r0, [r7, #12]
 8006f0a:	60b9      	str	r1, [r7, #8]
 8006f0c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2203      	movs	r2, #3
 8006f12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f000 fced 	bl	800790c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 fcdc 	bl	800790c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b082      	sub	sp, #8
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2204      	movs	r2, #4
 8006f6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006f6e:	2300      	movs	r3, #0
 8006f70:	2200      	movs	r2, #0
 8006f72:	2100      	movs	r1, #0
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fca8 	bl	80078ca <USBD_LL_Transmit>

  return USBD_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2205      	movs	r2, #5
 8006f90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f94:	2300      	movs	r3, #0
 8006f96:	2200      	movs	r2, #0
 8006f98:	2100      	movs	r1, #0
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fcb6 	bl	800790c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
	...

08006fac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	4912      	ldr	r1, [pc, #72]	; (8006ffc <MX_USB_DEVICE_Init+0x50>)
 8006fb4:	4812      	ldr	r0, [pc, #72]	; (8007000 <MX_USB_DEVICE_Init+0x54>)
 8006fb6:	f7fe fe8f 	bl	8005cd8 <USBD_Init>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d001      	beq.n	8006fc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006fc0:	f7f9 fd46 	bl	8000a50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006fc4:	490f      	ldr	r1, [pc, #60]	; (8007004 <MX_USB_DEVICE_Init+0x58>)
 8006fc6:	480e      	ldr	r0, [pc, #56]	; (8007000 <MX_USB_DEVICE_Init+0x54>)
 8006fc8:	f7fe feb6 	bl	8005d38 <USBD_RegisterClass>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006fd2:	f7f9 fd3d 	bl	8000a50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006fd6:	490c      	ldr	r1, [pc, #48]	; (8007008 <MX_USB_DEVICE_Init+0x5c>)
 8006fd8:	4809      	ldr	r0, [pc, #36]	; (8007000 <MX_USB_DEVICE_Init+0x54>)
 8006fda:	f7fe fdd7 	bl	8005b8c <USBD_CDC_RegisterInterface>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006fe4:	f7f9 fd34 	bl	8000a50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006fe8:	4805      	ldr	r0, [pc, #20]	; (8007000 <MX_USB_DEVICE_Init+0x54>)
 8006fea:	f7fe fecc 	bl	8005d86 <USBD_Start>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006ff4:	f7f9 fd2c 	bl	8000a50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006ff8:	bf00      	nop
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	20000130 	.word	0x20000130
 8007000:	200003ec 	.word	0x200003ec
 8007004:	20000018 	.word	0x20000018
 8007008:	2000011c 	.word	0x2000011c

0800700c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007010:	2200      	movs	r2, #0
 8007012:	4905      	ldr	r1, [pc, #20]	; (8007028 <CDC_Init_FS+0x1c>)
 8007014:	4805      	ldr	r0, [pc, #20]	; (800702c <CDC_Init_FS+0x20>)
 8007016:	f7fe fdce 	bl	8005bb6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800701a:	4905      	ldr	r1, [pc, #20]	; (8007030 <CDC_Init_FS+0x24>)
 800701c:	4803      	ldr	r0, [pc, #12]	; (800702c <CDC_Init_FS+0x20>)
 800701e:	f7fe fde8 	bl	8005bf2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007022:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007024:	4618      	mov	r0, r3
 8007026:	bd80      	pop	{r7, pc}
 8007028:	20000ebc 	.word	0x20000ebc
 800702c:	200003ec 	.word	0x200003ec
 8007030:	200006bc 	.word	0x200006bc

08007034 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007034:	b480      	push	{r7}
 8007036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007038:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800703a:	4618      	mov	r0, r3
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	4603      	mov	r3, r0
 800704c:	6039      	str	r1, [r7, #0]
 800704e:	71fb      	strb	r3, [r7, #7]
 8007050:	4613      	mov	r3, r2
 8007052:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007054:	79fb      	ldrb	r3, [r7, #7]
 8007056:	2b23      	cmp	r3, #35	; 0x23
 8007058:	d84a      	bhi.n	80070f0 <CDC_Control_FS+0xac>
 800705a:	a201      	add	r2, pc, #4	; (adr r2, 8007060 <CDC_Control_FS+0x1c>)
 800705c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007060:	080070f1 	.word	0x080070f1
 8007064:	080070f1 	.word	0x080070f1
 8007068:	080070f1 	.word	0x080070f1
 800706c:	080070f1 	.word	0x080070f1
 8007070:	080070f1 	.word	0x080070f1
 8007074:	080070f1 	.word	0x080070f1
 8007078:	080070f1 	.word	0x080070f1
 800707c:	080070f1 	.word	0x080070f1
 8007080:	080070f1 	.word	0x080070f1
 8007084:	080070f1 	.word	0x080070f1
 8007088:	080070f1 	.word	0x080070f1
 800708c:	080070f1 	.word	0x080070f1
 8007090:	080070f1 	.word	0x080070f1
 8007094:	080070f1 	.word	0x080070f1
 8007098:	080070f1 	.word	0x080070f1
 800709c:	080070f1 	.word	0x080070f1
 80070a0:	080070f1 	.word	0x080070f1
 80070a4:	080070f1 	.word	0x080070f1
 80070a8:	080070f1 	.word	0x080070f1
 80070ac:	080070f1 	.word	0x080070f1
 80070b0:	080070f1 	.word	0x080070f1
 80070b4:	080070f1 	.word	0x080070f1
 80070b8:	080070f1 	.word	0x080070f1
 80070bc:	080070f1 	.word	0x080070f1
 80070c0:	080070f1 	.word	0x080070f1
 80070c4:	080070f1 	.word	0x080070f1
 80070c8:	080070f1 	.word	0x080070f1
 80070cc:	080070f1 	.word	0x080070f1
 80070d0:	080070f1 	.word	0x080070f1
 80070d4:	080070f1 	.word	0x080070f1
 80070d8:	080070f1 	.word	0x080070f1
 80070dc:	080070f1 	.word	0x080070f1
 80070e0:	080070f1 	.word	0x080070f1
 80070e4:	080070f1 	.word	0x080070f1
 80070e8:	080070f1 	.word	0x080070f1
 80070ec:	080070f1 	.word	0x080070f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80070f0:	bf00      	nop
  }

  return (USBD_OK);
 80070f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800710a:	6879      	ldr	r1, [r7, #4]
 800710c:	4805      	ldr	r0, [pc, #20]	; (8007124 <CDC_Receive_FS+0x24>)
 800710e:	f7fe fd70 	bl	8005bf2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007112:	4804      	ldr	r0, [pc, #16]	; (8007124 <CDC_Receive_FS+0x24>)
 8007114:	f7fe fdb6 	bl	8005c84 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007118:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800711a:	4618      	mov	r0, r3
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	200003ec 	.word	0x200003ec

08007128 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	460b      	mov	r3, r1
 8007132:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007138:	4b0d      	ldr	r3, [pc, #52]	; (8007170 <CDC_Transmit_FS+0x48>)
 800713a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800713e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007146:	2b00      	cmp	r3, #0
 8007148:	d001      	beq.n	800714e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800714a:	2301      	movs	r3, #1
 800714c:	e00b      	b.n	8007166 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800714e:	887b      	ldrh	r3, [r7, #2]
 8007150:	461a      	mov	r2, r3
 8007152:	6879      	ldr	r1, [r7, #4]
 8007154:	4806      	ldr	r0, [pc, #24]	; (8007170 <CDC_Transmit_FS+0x48>)
 8007156:	f7fe fd2e 	bl	8005bb6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800715a:	4805      	ldr	r0, [pc, #20]	; (8007170 <CDC_Transmit_FS+0x48>)
 800715c:	f7fe fd62 	bl	8005c24 <USBD_CDC_TransmitPacket>
 8007160:	4603      	mov	r3, r0
 8007162:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007164:	7bfb      	ldrb	r3, [r7, #15]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	200003ec 	.word	0x200003ec

08007174 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	4613      	mov	r3, r2
 8007180:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007186:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800718a:	4618      	mov	r0, r3
 800718c:	371c      	adds	r7, #28
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
	...

08007198 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	4603      	mov	r3, r0
 80071a0:	6039      	str	r1, [r7, #0]
 80071a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	2212      	movs	r2, #18
 80071a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80071aa:	4b03      	ldr	r3, [pc, #12]	; (80071b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	2000014c 	.word	0x2000014c

080071bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	4603      	mov	r3, r0
 80071c4:	6039      	str	r1, [r7, #0]
 80071c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2204      	movs	r2, #4
 80071cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80071ce:	4b03      	ldr	r3, [pc, #12]	; (80071dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	20000160 	.word	0x20000160

080071e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	4603      	mov	r3, r0
 80071e8:	6039      	str	r1, [r7, #0]
 80071ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071ec:	79fb      	ldrb	r3, [r7, #7]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d105      	bne.n	80071fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	4907      	ldr	r1, [pc, #28]	; (8007214 <USBD_FS_ProductStrDescriptor+0x34>)
 80071f6:	4808      	ldr	r0, [pc, #32]	; (8007218 <USBD_FS_ProductStrDescriptor+0x38>)
 80071f8:	f7ff fdf7 	bl	8006dea <USBD_GetString>
 80071fc:	e004      	b.n	8007208 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	4904      	ldr	r1, [pc, #16]	; (8007214 <USBD_FS_ProductStrDescriptor+0x34>)
 8007202:	4805      	ldr	r0, [pc, #20]	; (8007218 <USBD_FS_ProductStrDescriptor+0x38>)
 8007204:	f7ff fdf1 	bl	8006dea <USBD_GetString>
  }
  return USBD_StrDesc;
 8007208:	4b02      	ldr	r3, [pc, #8]	; (8007214 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800720a:	4618      	mov	r0, r3
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	200016bc 	.word	0x200016bc
 8007218:	08008394 	.word	0x08008394

0800721c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	4603      	mov	r3, r0
 8007224:	6039      	str	r1, [r7, #0]
 8007226:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	4904      	ldr	r1, [pc, #16]	; (800723c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800722c:	4804      	ldr	r0, [pc, #16]	; (8007240 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800722e:	f7ff fddc 	bl	8006dea <USBD_GetString>
  return USBD_StrDesc;
 8007232:	4b02      	ldr	r3, [pc, #8]	; (800723c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007234:	4618      	mov	r0, r3
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	200016bc 	.word	0x200016bc
 8007240:	080083ac 	.word	0x080083ac

08007244 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	4603      	mov	r3, r0
 800724c:	6039      	str	r1, [r7, #0]
 800724e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	221a      	movs	r2, #26
 8007254:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007256:	f000 f843 	bl	80072e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800725a:	4b02      	ldr	r3, [pc, #8]	; (8007264 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800725c:	4618      	mov	r0, r3
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	20000164 	.word	0x20000164

08007268 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	4603      	mov	r3, r0
 8007270:	6039      	str	r1, [r7, #0]
 8007272:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007274:	79fb      	ldrb	r3, [r7, #7]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d105      	bne.n	8007286 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800727a:	683a      	ldr	r2, [r7, #0]
 800727c:	4907      	ldr	r1, [pc, #28]	; (800729c <USBD_FS_ConfigStrDescriptor+0x34>)
 800727e:	4808      	ldr	r0, [pc, #32]	; (80072a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007280:	f7ff fdb3 	bl	8006dea <USBD_GetString>
 8007284:	e004      	b.n	8007290 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	4904      	ldr	r1, [pc, #16]	; (800729c <USBD_FS_ConfigStrDescriptor+0x34>)
 800728a:	4805      	ldr	r0, [pc, #20]	; (80072a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800728c:	f7ff fdad 	bl	8006dea <USBD_GetString>
  }
  return USBD_StrDesc;
 8007290:	4b02      	ldr	r3, [pc, #8]	; (800729c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007292:	4618      	mov	r0, r3
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	200016bc 	.word	0x200016bc
 80072a0:	080083c0 	.word	0x080083c0

080072a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	4603      	mov	r3, r0
 80072ac:	6039      	str	r1, [r7, #0]
 80072ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80072b0:	79fb      	ldrb	r3, [r7, #7]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d105      	bne.n	80072c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	4907      	ldr	r1, [pc, #28]	; (80072d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072ba:	4808      	ldr	r0, [pc, #32]	; (80072dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072bc:	f7ff fd95 	bl	8006dea <USBD_GetString>
 80072c0:	e004      	b.n	80072cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	4904      	ldr	r1, [pc, #16]	; (80072d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072c6:	4805      	ldr	r0, [pc, #20]	; (80072dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072c8:	f7ff fd8f 	bl	8006dea <USBD_GetString>
  }
  return USBD_StrDesc;
 80072cc:	4b02      	ldr	r3, [pc, #8]	; (80072d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	200016bc 	.word	0x200016bc
 80072dc:	080083cc 	.word	0x080083cc

080072e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80072e6:	4b0f      	ldr	r3, [pc, #60]	; (8007324 <Get_SerialNum+0x44>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80072ec:	4b0e      	ldr	r3, [pc, #56]	; (8007328 <Get_SerialNum+0x48>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80072f2:	4b0e      	ldr	r3, [pc, #56]	; (800732c <Get_SerialNum+0x4c>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4413      	add	r3, r2
 80072fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d009      	beq.n	800731a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007306:	2208      	movs	r2, #8
 8007308:	4909      	ldr	r1, [pc, #36]	; (8007330 <Get_SerialNum+0x50>)
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f000 f814 	bl	8007338 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007310:	2204      	movs	r2, #4
 8007312:	4908      	ldr	r1, [pc, #32]	; (8007334 <Get_SerialNum+0x54>)
 8007314:	68b8      	ldr	r0, [r7, #8]
 8007316:	f000 f80f 	bl	8007338 <IntToUnicode>
  }
}
 800731a:	bf00      	nop
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	1fff7a10 	.word	0x1fff7a10
 8007328:	1fff7a14 	.word	0x1fff7a14
 800732c:	1fff7a18 	.word	0x1fff7a18
 8007330:	20000166 	.word	0x20000166
 8007334:	20000176 	.word	0x20000176

08007338 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007338:	b480      	push	{r7}
 800733a:	b087      	sub	sp, #28
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	4613      	mov	r3, r2
 8007344:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007346:	2300      	movs	r3, #0
 8007348:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800734a:	2300      	movs	r3, #0
 800734c:	75fb      	strb	r3, [r7, #23]
 800734e:	e027      	b.n	80073a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	0f1b      	lsrs	r3, r3, #28
 8007354:	2b09      	cmp	r3, #9
 8007356:	d80b      	bhi.n	8007370 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	0f1b      	lsrs	r3, r3, #28
 800735c:	b2da      	uxtb	r2, r3
 800735e:	7dfb      	ldrb	r3, [r7, #23]
 8007360:	005b      	lsls	r3, r3, #1
 8007362:	4619      	mov	r1, r3
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	440b      	add	r3, r1
 8007368:	3230      	adds	r2, #48	; 0x30
 800736a:	b2d2      	uxtb	r2, r2
 800736c:	701a      	strb	r2, [r3, #0]
 800736e:	e00a      	b.n	8007386 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	0f1b      	lsrs	r3, r3, #28
 8007374:	b2da      	uxtb	r2, r3
 8007376:	7dfb      	ldrb	r3, [r7, #23]
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	4619      	mov	r1, r3
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	440b      	add	r3, r1
 8007380:	3237      	adds	r2, #55	; 0x37
 8007382:	b2d2      	uxtb	r2, r2
 8007384:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	011b      	lsls	r3, r3, #4
 800738a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800738c:	7dfb      	ldrb	r3, [r7, #23]
 800738e:	005b      	lsls	r3, r3, #1
 8007390:	3301      	adds	r3, #1
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	4413      	add	r3, r2
 8007396:	2200      	movs	r2, #0
 8007398:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800739a:	7dfb      	ldrb	r3, [r7, #23]
 800739c:	3301      	adds	r3, #1
 800739e:	75fb      	strb	r3, [r7, #23]
 80073a0:	7dfa      	ldrb	r2, [r7, #23]
 80073a2:	79fb      	ldrb	r3, [r7, #7]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d3d3      	bcc.n	8007350 <IntToUnicode+0x18>
  }
}
 80073a8:	bf00      	nop
 80073aa:	bf00      	nop
 80073ac:	371c      	adds	r7, #28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
	...

080073b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b08a      	sub	sp, #40	; 0x28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073c0:	f107 0314 	add.w	r3, r7, #20
 80073c4:	2200      	movs	r2, #0
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	605a      	str	r2, [r3, #4]
 80073ca:	609a      	str	r2, [r3, #8]
 80073cc:	60da      	str	r2, [r3, #12]
 80073ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073d8:	d147      	bne.n	800746a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073da:	2300      	movs	r3, #0
 80073dc:	613b      	str	r3, [r7, #16]
 80073de:	4b25      	ldr	r3, [pc, #148]	; (8007474 <HAL_PCD_MspInit+0xbc>)
 80073e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e2:	4a24      	ldr	r2, [pc, #144]	; (8007474 <HAL_PCD_MspInit+0xbc>)
 80073e4:	f043 0301 	orr.w	r3, r3, #1
 80073e8:	6313      	str	r3, [r2, #48]	; 0x30
 80073ea:	4b22      	ldr	r3, [pc, #136]	; (8007474 <HAL_PCD_MspInit+0xbc>)
 80073ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	613b      	str	r3, [r7, #16]
 80073f4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80073f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80073fc:	2300      	movs	r3, #0
 80073fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007400:	2300      	movs	r3, #0
 8007402:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007404:	f107 0314 	add.w	r3, r7, #20
 8007408:	4619      	mov	r1, r3
 800740a:	481b      	ldr	r0, [pc, #108]	; (8007478 <HAL_PCD_MspInit+0xc0>)
 800740c:	f7f9 fe94 	bl	8001138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007410:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007416:	2302      	movs	r3, #2
 8007418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800741a:	2300      	movs	r3, #0
 800741c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800741e:	2300      	movs	r3, #0
 8007420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007422:	230a      	movs	r3, #10
 8007424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007426:	f107 0314 	add.w	r3, r7, #20
 800742a:	4619      	mov	r1, r3
 800742c:	4812      	ldr	r0, [pc, #72]	; (8007478 <HAL_PCD_MspInit+0xc0>)
 800742e:	f7f9 fe83 	bl	8001138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007432:	4b10      	ldr	r3, [pc, #64]	; (8007474 <HAL_PCD_MspInit+0xbc>)
 8007434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007436:	4a0f      	ldr	r2, [pc, #60]	; (8007474 <HAL_PCD_MspInit+0xbc>)
 8007438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800743c:	6353      	str	r3, [r2, #52]	; 0x34
 800743e:	2300      	movs	r3, #0
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	4b0c      	ldr	r3, [pc, #48]	; (8007474 <HAL_PCD_MspInit+0xbc>)
 8007444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007446:	4a0b      	ldr	r2, [pc, #44]	; (8007474 <HAL_PCD_MspInit+0xbc>)
 8007448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800744c:	6453      	str	r3, [r2, #68]	; 0x44
 800744e:	4b09      	ldr	r3, [pc, #36]	; (8007474 <HAL_PCD_MspInit+0xbc>)
 8007450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007456:	60fb      	str	r3, [r7, #12]
 8007458:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800745a:	2200      	movs	r2, #0
 800745c:	2100      	movs	r1, #0
 800745e:	2043      	movs	r0, #67	; 0x43
 8007460:	f7f9 fe33 	bl	80010ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007464:	2043      	movs	r0, #67	; 0x43
 8007466:	f7f9 fe4c 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800746a:	bf00      	nop
 800746c:	3728      	adds	r7, #40	; 0x28
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	40023800 	.word	0x40023800
 8007478:	40020000 	.word	0x40020000

0800747c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007490:	4619      	mov	r1, r3
 8007492:	4610      	mov	r0, r2
 8007494:	f7fe fcc2 	bl	8005e1c <USBD_LL_SetupStage>
}
 8007498:	bf00      	nop
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	460b      	mov	r3, r1
 80074aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80074b2:	78fa      	ldrb	r2, [r7, #3]
 80074b4:	6879      	ldr	r1, [r7, #4]
 80074b6:	4613      	mov	r3, r2
 80074b8:	00db      	lsls	r3, r3, #3
 80074ba:	1a9b      	subs	r3, r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	440b      	add	r3, r1
 80074c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	78fb      	ldrb	r3, [r7, #3]
 80074c8:	4619      	mov	r1, r3
 80074ca:	f7fe fcfc 	bl	8005ec6 <USBD_LL_DataOutStage>
}
 80074ce:	bf00      	nop
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b082      	sub	sp, #8
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	460b      	mov	r3, r1
 80074e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80074e8:	78fa      	ldrb	r2, [r7, #3]
 80074ea:	6879      	ldr	r1, [r7, #4]
 80074ec:	4613      	mov	r3, r2
 80074ee:	00db      	lsls	r3, r3, #3
 80074f0:	1a9b      	subs	r3, r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	440b      	add	r3, r1
 80074f6:	3348      	adds	r3, #72	; 0x48
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	78fb      	ldrb	r3, [r7, #3]
 80074fc:	4619      	mov	r1, r3
 80074fe:	f7fe fd45 	bl	8005f8c <USBD_LL_DataInStage>
}
 8007502:	bf00      	nop
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b082      	sub	sp, #8
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007518:	4618      	mov	r0, r3
 800751a:	f7fe fe59 	bl	80061d0 <USBD_LL_SOF>
}
 800751e:	bf00      	nop
 8007520:	3708      	adds	r7, #8
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b084      	sub	sp, #16
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800752e:	2301      	movs	r3, #1
 8007530:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d102      	bne.n	8007540 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800753a:	2300      	movs	r3, #0
 800753c:	73fb      	strb	r3, [r7, #15]
 800753e:	e008      	b.n	8007552 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	2b02      	cmp	r3, #2
 8007546:	d102      	bne.n	800754e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007548:	2301      	movs	r3, #1
 800754a:	73fb      	strb	r3, [r7, #15]
 800754c:	e001      	b.n	8007552 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800754e:	f7f9 fa7f 	bl	8000a50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007558:	7bfa      	ldrb	r2, [r7, #15]
 800755a:	4611      	mov	r1, r2
 800755c:	4618      	mov	r0, r3
 800755e:	f7fe fdf9 	bl	8006154 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007568:	4618      	mov	r0, r3
 800756a:	f7fe fda5 	bl	80060b8 <USBD_LL_Reset>
}
 800756e:	bf00      	nop
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
	...

08007578 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007586:	4618      	mov	r0, r3
 8007588:	f7fe fdf4 	bl	8006174 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	6812      	ldr	r2, [r2, #0]
 800759a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800759e:	f043 0301 	orr.w	r3, r3, #1
 80075a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a1b      	ldr	r3, [r3, #32]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d005      	beq.n	80075b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075ac:	4b04      	ldr	r3, [pc, #16]	; (80075c0 <HAL_PCD_SuspendCallback+0x48>)
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	4a03      	ldr	r2, [pc, #12]	; (80075c0 <HAL_PCD_SuspendCallback+0x48>)
 80075b2:	f043 0306 	orr.w	r3, r3, #6
 80075b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80075b8:	bf00      	nop
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	e000ed00 	.word	0xe000ed00

080075c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7fe fde4 	bl	80061a0 <USBD_LL_Resume>
}
 80075d8:	bf00      	nop
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	460b      	mov	r3, r1
 80075ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075f2:	78fa      	ldrb	r2, [r7, #3]
 80075f4:	4611      	mov	r1, r2
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fe fe32 	bl	8006260 <USBD_LL_IsoOUTIncomplete>
}
 80075fc:	bf00      	nop
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	460b      	mov	r3, r1
 800760e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007616:	78fa      	ldrb	r2, [r7, #3]
 8007618:	4611      	mov	r1, r2
 800761a:	4618      	mov	r0, r3
 800761c:	f7fe fdfa 	bl	8006214 <USBD_LL_IsoINIncomplete>
}
 8007620:	bf00      	nop
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007636:	4618      	mov	r0, r3
 8007638:	f7fe fe38 	bl	80062ac <USBD_LL_DevConnected>
}
 800763c:	bf00      	nop
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007652:	4618      	mov	r0, r3
 8007654:	f7fe fe35 	bl	80062c2 <USBD_LL_DevDisconnected>
}
 8007658:	bf00      	nop
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d13c      	bne.n	80076ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007670:	4a20      	ldr	r2, [pc, #128]	; (80076f4 <USBD_LL_Init+0x94>)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a1e      	ldr	r2, [pc, #120]	; (80076f4 <USBD_LL_Init+0x94>)
 800767c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007680:	4b1c      	ldr	r3, [pc, #112]	; (80076f4 <USBD_LL_Init+0x94>)
 8007682:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007686:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007688:	4b1a      	ldr	r3, [pc, #104]	; (80076f4 <USBD_LL_Init+0x94>)
 800768a:	2204      	movs	r2, #4
 800768c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800768e:	4b19      	ldr	r3, [pc, #100]	; (80076f4 <USBD_LL_Init+0x94>)
 8007690:	2202      	movs	r2, #2
 8007692:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007694:	4b17      	ldr	r3, [pc, #92]	; (80076f4 <USBD_LL_Init+0x94>)
 8007696:	2200      	movs	r2, #0
 8007698:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800769a:	4b16      	ldr	r3, [pc, #88]	; (80076f4 <USBD_LL_Init+0x94>)
 800769c:	2202      	movs	r2, #2
 800769e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80076a0:	4b14      	ldr	r3, [pc, #80]	; (80076f4 <USBD_LL_Init+0x94>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80076a6:	4b13      	ldr	r3, [pc, #76]	; (80076f4 <USBD_LL_Init+0x94>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80076ac:	4b11      	ldr	r3, [pc, #68]	; (80076f4 <USBD_LL_Init+0x94>)
 80076ae:	2200      	movs	r2, #0
 80076b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80076b2:	4b10      	ldr	r3, [pc, #64]	; (80076f4 <USBD_LL_Init+0x94>)
 80076b4:	2201      	movs	r2, #1
 80076b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80076b8:	4b0e      	ldr	r3, [pc, #56]	; (80076f4 <USBD_LL_Init+0x94>)
 80076ba:	2200      	movs	r2, #0
 80076bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80076be:	480d      	ldr	r0, [pc, #52]	; (80076f4 <USBD_LL_Init+0x94>)
 80076c0:	f7fa fcee 	bl	80020a0 <HAL_PCD_Init>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d001      	beq.n	80076ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80076ca:	f7f9 f9c1 	bl	8000a50 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80076ce:	2180      	movs	r1, #128	; 0x80
 80076d0:	4808      	ldr	r0, [pc, #32]	; (80076f4 <USBD_LL_Init+0x94>)
 80076d2:	f7fb fe4c 	bl	800336e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80076d6:	2240      	movs	r2, #64	; 0x40
 80076d8:	2100      	movs	r1, #0
 80076da:	4806      	ldr	r0, [pc, #24]	; (80076f4 <USBD_LL_Init+0x94>)
 80076dc:	f7fb fe00 	bl	80032e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80076e0:	2280      	movs	r2, #128	; 0x80
 80076e2:	2101      	movs	r1, #1
 80076e4:	4803      	ldr	r0, [pc, #12]	; (80076f4 <USBD_LL_Init+0x94>)
 80076e6:	f7fb fdfb 	bl	80032e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	200018bc 	.word	0x200018bc

080076f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007704:	2300      	movs	r3, #0
 8007706:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800770e:	4618      	mov	r0, r3
 8007710:	f7fa fde3 	bl	80022da <HAL_PCD_Start>
 8007714:	4603      	mov	r3, r0
 8007716:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007718:	7bfb      	ldrb	r3, [r7, #15]
 800771a:	4618      	mov	r0, r3
 800771c:	f000 f942 	bl	80079a4 <USBD_Get_USB_Status>
 8007720:	4603      	mov	r3, r0
 8007722:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007724:	7bbb      	ldrb	r3, [r7, #14]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b084      	sub	sp, #16
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	4608      	mov	r0, r1
 8007738:	4611      	mov	r1, r2
 800773a:	461a      	mov	r2, r3
 800773c:	4603      	mov	r3, r0
 800773e:	70fb      	strb	r3, [r7, #3]
 8007740:	460b      	mov	r3, r1
 8007742:	70bb      	strb	r3, [r7, #2]
 8007744:	4613      	mov	r3, r2
 8007746:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007748:	2300      	movs	r3, #0
 800774a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007756:	78bb      	ldrb	r3, [r7, #2]
 8007758:	883a      	ldrh	r2, [r7, #0]
 800775a:	78f9      	ldrb	r1, [r7, #3]
 800775c:	f7fb f9c7 	bl	8002aee <HAL_PCD_EP_Open>
 8007760:	4603      	mov	r3, r0
 8007762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007764:	7bfb      	ldrb	r3, [r7, #15]
 8007766:	4618      	mov	r0, r3
 8007768:	f000 f91c 	bl	80079a4 <USBD_Get_USB_Status>
 800776c:	4603      	mov	r3, r0
 800776e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007770:	7bbb      	ldrb	r3, [r7, #14]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b084      	sub	sp, #16
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	460b      	mov	r3, r1
 8007784:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007794:	78fa      	ldrb	r2, [r7, #3]
 8007796:	4611      	mov	r1, r2
 8007798:	4618      	mov	r0, r3
 800779a:	f7fb fa10 	bl	8002bbe <HAL_PCD_EP_Close>
 800779e:	4603      	mov	r3, r0
 80077a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077a2:	7bfb      	ldrb	r3, [r7, #15]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f000 f8fd 	bl	80079a4 <USBD_Get_USB_Status>
 80077aa:	4603      	mov	r3, r0
 80077ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	460b      	mov	r3, r1
 80077c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077c4:	2300      	movs	r3, #0
 80077c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077c8:	2300      	movs	r3, #0
 80077ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077d2:	78fa      	ldrb	r2, [r7, #3]
 80077d4:	4611      	mov	r1, r2
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fb fae8 	bl	8002dac <HAL_PCD_EP_SetStall>
 80077dc:	4603      	mov	r3, r0
 80077de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 f8de 	bl	80079a4 <USBD_Get_USB_Status>
 80077e8:	4603      	mov	r3, r0
 80077ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b084      	sub	sp, #16
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	460b      	mov	r3, r1
 8007800:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007810:	78fa      	ldrb	r2, [r7, #3]
 8007812:	4611      	mov	r1, r2
 8007814:	4618      	mov	r0, r3
 8007816:	f7fb fb2d 	bl	8002e74 <HAL_PCD_EP_ClrStall>
 800781a:	4603      	mov	r3, r0
 800781c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800781e:	7bfb      	ldrb	r3, [r7, #15]
 8007820:	4618      	mov	r0, r3
 8007822:	f000 f8bf 	bl	80079a4 <USBD_Get_USB_Status>
 8007826:	4603      	mov	r3, r0
 8007828:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800782a:	7bbb      	ldrb	r3, [r7, #14]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	460b      	mov	r3, r1
 800783e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007846:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007848:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800784c:	2b00      	cmp	r3, #0
 800784e:	da0b      	bge.n	8007868 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007850:	78fb      	ldrb	r3, [r7, #3]
 8007852:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007856:	68f9      	ldr	r1, [r7, #12]
 8007858:	4613      	mov	r3, r2
 800785a:	00db      	lsls	r3, r3, #3
 800785c:	1a9b      	subs	r3, r3, r2
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	440b      	add	r3, r1
 8007862:	333e      	adds	r3, #62	; 0x3e
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	e00b      	b.n	8007880 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007868:	78fb      	ldrb	r3, [r7, #3]
 800786a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800786e:	68f9      	ldr	r1, [r7, #12]
 8007870:	4613      	mov	r3, r2
 8007872:	00db      	lsls	r3, r3, #3
 8007874:	1a9b      	subs	r3, r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	440b      	add	r3, r1
 800787a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800787e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007880:	4618      	mov	r0, r3
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	460b      	mov	r3, r1
 8007896:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007898:	2300      	movs	r3, #0
 800789a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078a6:	78fa      	ldrb	r2, [r7, #3]
 80078a8:	4611      	mov	r1, r2
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fb f8fa 	bl	8002aa4 <HAL_PCD_SetAddress>
 80078b0:	4603      	mov	r3, r0
 80078b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 f874 	bl	80079a4 <USBD_Get_USB_Status>
 80078bc:	4603      	mov	r3, r0
 80078be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b086      	sub	sp, #24
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	60f8      	str	r0, [r7, #12]
 80078d2:	607a      	str	r2, [r7, #4]
 80078d4:	603b      	str	r3, [r7, #0]
 80078d6:	460b      	mov	r3, r1
 80078d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078de:	2300      	movs	r3, #0
 80078e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80078e8:	7af9      	ldrb	r1, [r7, #11]
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	f7fb fa13 	bl	8002d18 <HAL_PCD_EP_Transmit>
 80078f2:	4603      	mov	r3, r0
 80078f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078f6:	7dfb      	ldrb	r3, [r7, #23]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 f853 	bl	80079a4 <USBD_Get_USB_Status>
 80078fe:	4603      	mov	r3, r0
 8007900:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007902:	7dbb      	ldrb	r3, [r7, #22]
}
 8007904:	4618      	mov	r0, r3
 8007906:	3718      	adds	r7, #24
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	607a      	str	r2, [r7, #4]
 8007916:	603b      	str	r3, [r7, #0]
 8007918:	460b      	mov	r3, r1
 800791a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007920:	2300      	movs	r3, #0
 8007922:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800792a:	7af9      	ldrb	r1, [r7, #11]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	f7fb f98f 	bl	8002c52 <HAL_PCD_EP_Receive>
 8007934:	4603      	mov	r3, r0
 8007936:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007938:	7dfb      	ldrb	r3, [r7, #23]
 800793a:	4618      	mov	r0, r3
 800793c:	f000 f832 	bl	80079a4 <USBD_Get_USB_Status>
 8007940:	4603      	mov	r3, r0
 8007942:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007944:	7dbb      	ldrb	r3, [r7, #22]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3718      	adds	r7, #24
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b082      	sub	sp, #8
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	460b      	mov	r3, r1
 8007958:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007960:	78fa      	ldrb	r2, [r7, #3]
 8007962:	4611      	mov	r1, r2
 8007964:	4618      	mov	r0, r3
 8007966:	f7fb f9bf 	bl	8002ce8 <HAL_PCD_EP_GetRxCount>
 800796a:	4603      	mov	r3, r0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800797c:	4b03      	ldr	r3, [pc, #12]	; (800798c <USBD_static_malloc+0x18>)
}
 800797e:	4618      	mov	r0, r3
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	20001cc4 	.word	0x20001cc4

08007990 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]

}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	4603      	mov	r3, r0
 80079ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80079b2:	79fb      	ldrb	r3, [r7, #7]
 80079b4:	2b03      	cmp	r3, #3
 80079b6:	d817      	bhi.n	80079e8 <USBD_Get_USB_Status+0x44>
 80079b8:	a201      	add	r2, pc, #4	; (adr r2, 80079c0 <USBD_Get_USB_Status+0x1c>)
 80079ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079be:	bf00      	nop
 80079c0:	080079d1 	.word	0x080079d1
 80079c4:	080079d7 	.word	0x080079d7
 80079c8:	080079dd 	.word	0x080079dd
 80079cc:	080079e3 	.word	0x080079e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80079d0:	2300      	movs	r3, #0
 80079d2:	73fb      	strb	r3, [r7, #15]
    break;
 80079d4:	e00b      	b.n	80079ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80079d6:	2303      	movs	r3, #3
 80079d8:	73fb      	strb	r3, [r7, #15]
    break;
 80079da:	e008      	b.n	80079ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80079dc:	2301      	movs	r3, #1
 80079de:	73fb      	strb	r3, [r7, #15]
    break;
 80079e0:	e005      	b.n	80079ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80079e2:	2303      	movs	r3, #3
 80079e4:	73fb      	strb	r3, [r7, #15]
    break;
 80079e6:	e002      	b.n	80079ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80079e8:	2303      	movs	r3, #3
 80079ea:	73fb      	strb	r3, [r7, #15]
    break;
 80079ec:	bf00      	nop
  }
  return usb_status;
 80079ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <sniprintf>:
 80079fc:	b40c      	push	{r2, r3}
 80079fe:	b530      	push	{r4, r5, lr}
 8007a00:	4b17      	ldr	r3, [pc, #92]	; (8007a60 <sniprintf+0x64>)
 8007a02:	1e0c      	subs	r4, r1, #0
 8007a04:	681d      	ldr	r5, [r3, #0]
 8007a06:	b09d      	sub	sp, #116	; 0x74
 8007a08:	da08      	bge.n	8007a1c <sniprintf+0x20>
 8007a0a:	238b      	movs	r3, #139	; 0x8b
 8007a0c:	602b      	str	r3, [r5, #0]
 8007a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a12:	b01d      	add	sp, #116	; 0x74
 8007a14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a18:	b002      	add	sp, #8
 8007a1a:	4770      	bx	lr
 8007a1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007a20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007a24:	bf14      	ite	ne
 8007a26:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007a2a:	4623      	moveq	r3, r4
 8007a2c:	9304      	str	r3, [sp, #16]
 8007a2e:	9307      	str	r3, [sp, #28]
 8007a30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a34:	9002      	str	r0, [sp, #8]
 8007a36:	9006      	str	r0, [sp, #24]
 8007a38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007a3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007a3e:	ab21      	add	r3, sp, #132	; 0x84
 8007a40:	a902      	add	r1, sp, #8
 8007a42:	4628      	mov	r0, r5
 8007a44:	9301      	str	r3, [sp, #4]
 8007a46:	f000 f993 	bl	8007d70 <_svfiprintf_r>
 8007a4a:	1c43      	adds	r3, r0, #1
 8007a4c:	bfbc      	itt	lt
 8007a4e:	238b      	movlt	r3, #139	; 0x8b
 8007a50:	602b      	strlt	r3, [r5, #0]
 8007a52:	2c00      	cmp	r4, #0
 8007a54:	d0dd      	beq.n	8007a12 <sniprintf+0x16>
 8007a56:	9b02      	ldr	r3, [sp, #8]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	701a      	strb	r2, [r3, #0]
 8007a5c:	e7d9      	b.n	8007a12 <sniprintf+0x16>
 8007a5e:	bf00      	nop
 8007a60:	200001cc 	.word	0x200001cc

08007a64 <memset>:
 8007a64:	4402      	add	r2, r0
 8007a66:	4603      	mov	r3, r0
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d100      	bne.n	8007a6e <memset+0xa>
 8007a6c:	4770      	bx	lr
 8007a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8007a72:	e7f9      	b.n	8007a68 <memset+0x4>

08007a74 <__errno>:
 8007a74:	4b01      	ldr	r3, [pc, #4]	; (8007a7c <__errno+0x8>)
 8007a76:	6818      	ldr	r0, [r3, #0]
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	200001cc 	.word	0x200001cc

08007a80 <__libc_init_array>:
 8007a80:	b570      	push	{r4, r5, r6, lr}
 8007a82:	4d0d      	ldr	r5, [pc, #52]	; (8007ab8 <__libc_init_array+0x38>)
 8007a84:	4c0d      	ldr	r4, [pc, #52]	; (8007abc <__libc_init_array+0x3c>)
 8007a86:	1b64      	subs	r4, r4, r5
 8007a88:	10a4      	asrs	r4, r4, #2
 8007a8a:	2600      	movs	r6, #0
 8007a8c:	42a6      	cmp	r6, r4
 8007a8e:	d109      	bne.n	8007aa4 <__libc_init_array+0x24>
 8007a90:	4d0b      	ldr	r5, [pc, #44]	; (8007ac0 <__libc_init_array+0x40>)
 8007a92:	4c0c      	ldr	r4, [pc, #48]	; (8007ac4 <__libc_init_array+0x44>)
 8007a94:	f000 fc6a 	bl	800836c <_init>
 8007a98:	1b64      	subs	r4, r4, r5
 8007a9a:	10a4      	asrs	r4, r4, #2
 8007a9c:	2600      	movs	r6, #0
 8007a9e:	42a6      	cmp	r6, r4
 8007aa0:	d105      	bne.n	8007aae <__libc_init_array+0x2e>
 8007aa2:	bd70      	pop	{r4, r5, r6, pc}
 8007aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aa8:	4798      	blx	r3
 8007aaa:	3601      	adds	r6, #1
 8007aac:	e7ee      	b.n	8007a8c <__libc_init_array+0xc>
 8007aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ab2:	4798      	blx	r3
 8007ab4:	3601      	adds	r6, #1
 8007ab6:	e7f2      	b.n	8007a9e <__libc_init_array+0x1e>
 8007ab8:	08008430 	.word	0x08008430
 8007abc:	08008430 	.word	0x08008430
 8007ac0:	08008430 	.word	0x08008430
 8007ac4:	08008434 	.word	0x08008434

08007ac8 <__retarget_lock_acquire_recursive>:
 8007ac8:	4770      	bx	lr

08007aca <__retarget_lock_release_recursive>:
 8007aca:	4770      	bx	lr

08007acc <_free_r>:
 8007acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ace:	2900      	cmp	r1, #0
 8007ad0:	d044      	beq.n	8007b5c <_free_r+0x90>
 8007ad2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ad6:	9001      	str	r0, [sp, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f1a1 0404 	sub.w	r4, r1, #4
 8007ade:	bfb8      	it	lt
 8007ae0:	18e4      	addlt	r4, r4, r3
 8007ae2:	f000 f8df 	bl	8007ca4 <__malloc_lock>
 8007ae6:	4a1e      	ldr	r2, [pc, #120]	; (8007b60 <_free_r+0x94>)
 8007ae8:	9801      	ldr	r0, [sp, #4]
 8007aea:	6813      	ldr	r3, [r2, #0]
 8007aec:	b933      	cbnz	r3, 8007afc <_free_r+0x30>
 8007aee:	6063      	str	r3, [r4, #4]
 8007af0:	6014      	str	r4, [r2, #0]
 8007af2:	b003      	add	sp, #12
 8007af4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007af8:	f000 b8da 	b.w	8007cb0 <__malloc_unlock>
 8007afc:	42a3      	cmp	r3, r4
 8007afe:	d908      	bls.n	8007b12 <_free_r+0x46>
 8007b00:	6825      	ldr	r5, [r4, #0]
 8007b02:	1961      	adds	r1, r4, r5
 8007b04:	428b      	cmp	r3, r1
 8007b06:	bf01      	itttt	eq
 8007b08:	6819      	ldreq	r1, [r3, #0]
 8007b0a:	685b      	ldreq	r3, [r3, #4]
 8007b0c:	1949      	addeq	r1, r1, r5
 8007b0e:	6021      	streq	r1, [r4, #0]
 8007b10:	e7ed      	b.n	8007aee <_free_r+0x22>
 8007b12:	461a      	mov	r2, r3
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	b10b      	cbz	r3, 8007b1c <_free_r+0x50>
 8007b18:	42a3      	cmp	r3, r4
 8007b1a:	d9fa      	bls.n	8007b12 <_free_r+0x46>
 8007b1c:	6811      	ldr	r1, [r2, #0]
 8007b1e:	1855      	adds	r5, r2, r1
 8007b20:	42a5      	cmp	r5, r4
 8007b22:	d10b      	bne.n	8007b3c <_free_r+0x70>
 8007b24:	6824      	ldr	r4, [r4, #0]
 8007b26:	4421      	add	r1, r4
 8007b28:	1854      	adds	r4, r2, r1
 8007b2a:	42a3      	cmp	r3, r4
 8007b2c:	6011      	str	r1, [r2, #0]
 8007b2e:	d1e0      	bne.n	8007af2 <_free_r+0x26>
 8007b30:	681c      	ldr	r4, [r3, #0]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	6053      	str	r3, [r2, #4]
 8007b36:	440c      	add	r4, r1
 8007b38:	6014      	str	r4, [r2, #0]
 8007b3a:	e7da      	b.n	8007af2 <_free_r+0x26>
 8007b3c:	d902      	bls.n	8007b44 <_free_r+0x78>
 8007b3e:	230c      	movs	r3, #12
 8007b40:	6003      	str	r3, [r0, #0]
 8007b42:	e7d6      	b.n	8007af2 <_free_r+0x26>
 8007b44:	6825      	ldr	r5, [r4, #0]
 8007b46:	1961      	adds	r1, r4, r5
 8007b48:	428b      	cmp	r3, r1
 8007b4a:	bf04      	itt	eq
 8007b4c:	6819      	ldreq	r1, [r3, #0]
 8007b4e:	685b      	ldreq	r3, [r3, #4]
 8007b50:	6063      	str	r3, [r4, #4]
 8007b52:	bf04      	itt	eq
 8007b54:	1949      	addeq	r1, r1, r5
 8007b56:	6021      	streq	r1, [r4, #0]
 8007b58:	6054      	str	r4, [r2, #4]
 8007b5a:	e7ca      	b.n	8007af2 <_free_r+0x26>
 8007b5c:	b003      	add	sp, #12
 8007b5e:	bd30      	pop	{r4, r5, pc}
 8007b60:	20002024 	.word	0x20002024

08007b64 <sbrk_aligned>:
 8007b64:	b570      	push	{r4, r5, r6, lr}
 8007b66:	4e0e      	ldr	r6, [pc, #56]	; (8007ba0 <sbrk_aligned+0x3c>)
 8007b68:	460c      	mov	r4, r1
 8007b6a:	6831      	ldr	r1, [r6, #0]
 8007b6c:	4605      	mov	r5, r0
 8007b6e:	b911      	cbnz	r1, 8007b76 <sbrk_aligned+0x12>
 8007b70:	f000 fba6 	bl	80082c0 <_sbrk_r>
 8007b74:	6030      	str	r0, [r6, #0]
 8007b76:	4621      	mov	r1, r4
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f000 fba1 	bl	80082c0 <_sbrk_r>
 8007b7e:	1c43      	adds	r3, r0, #1
 8007b80:	d00a      	beq.n	8007b98 <sbrk_aligned+0x34>
 8007b82:	1cc4      	adds	r4, r0, #3
 8007b84:	f024 0403 	bic.w	r4, r4, #3
 8007b88:	42a0      	cmp	r0, r4
 8007b8a:	d007      	beq.n	8007b9c <sbrk_aligned+0x38>
 8007b8c:	1a21      	subs	r1, r4, r0
 8007b8e:	4628      	mov	r0, r5
 8007b90:	f000 fb96 	bl	80082c0 <_sbrk_r>
 8007b94:	3001      	adds	r0, #1
 8007b96:	d101      	bne.n	8007b9c <sbrk_aligned+0x38>
 8007b98:	f04f 34ff 	mov.w	r4, #4294967295
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ba0:	20002028 	.word	0x20002028

08007ba4 <_malloc_r>:
 8007ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ba8:	1ccd      	adds	r5, r1, #3
 8007baa:	f025 0503 	bic.w	r5, r5, #3
 8007bae:	3508      	adds	r5, #8
 8007bb0:	2d0c      	cmp	r5, #12
 8007bb2:	bf38      	it	cc
 8007bb4:	250c      	movcc	r5, #12
 8007bb6:	2d00      	cmp	r5, #0
 8007bb8:	4607      	mov	r7, r0
 8007bba:	db01      	blt.n	8007bc0 <_malloc_r+0x1c>
 8007bbc:	42a9      	cmp	r1, r5
 8007bbe:	d905      	bls.n	8007bcc <_malloc_r+0x28>
 8007bc0:	230c      	movs	r3, #12
 8007bc2:	603b      	str	r3, [r7, #0]
 8007bc4:	2600      	movs	r6, #0
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007ca0 <_malloc_r+0xfc>
 8007bd0:	f000 f868 	bl	8007ca4 <__malloc_lock>
 8007bd4:	f8d8 3000 	ldr.w	r3, [r8]
 8007bd8:	461c      	mov	r4, r3
 8007bda:	bb5c      	cbnz	r4, 8007c34 <_malloc_r+0x90>
 8007bdc:	4629      	mov	r1, r5
 8007bde:	4638      	mov	r0, r7
 8007be0:	f7ff ffc0 	bl	8007b64 <sbrk_aligned>
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	4604      	mov	r4, r0
 8007be8:	d155      	bne.n	8007c96 <_malloc_r+0xf2>
 8007bea:	f8d8 4000 	ldr.w	r4, [r8]
 8007bee:	4626      	mov	r6, r4
 8007bf0:	2e00      	cmp	r6, #0
 8007bf2:	d145      	bne.n	8007c80 <_malloc_r+0xdc>
 8007bf4:	2c00      	cmp	r4, #0
 8007bf6:	d048      	beq.n	8007c8a <_malloc_r+0xe6>
 8007bf8:	6823      	ldr	r3, [r4, #0]
 8007bfa:	4631      	mov	r1, r6
 8007bfc:	4638      	mov	r0, r7
 8007bfe:	eb04 0903 	add.w	r9, r4, r3
 8007c02:	f000 fb5d 	bl	80082c0 <_sbrk_r>
 8007c06:	4581      	cmp	r9, r0
 8007c08:	d13f      	bne.n	8007c8a <_malloc_r+0xe6>
 8007c0a:	6821      	ldr	r1, [r4, #0]
 8007c0c:	1a6d      	subs	r5, r5, r1
 8007c0e:	4629      	mov	r1, r5
 8007c10:	4638      	mov	r0, r7
 8007c12:	f7ff ffa7 	bl	8007b64 <sbrk_aligned>
 8007c16:	3001      	adds	r0, #1
 8007c18:	d037      	beq.n	8007c8a <_malloc_r+0xe6>
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	442b      	add	r3, r5
 8007c1e:	6023      	str	r3, [r4, #0]
 8007c20:	f8d8 3000 	ldr.w	r3, [r8]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d038      	beq.n	8007c9a <_malloc_r+0xf6>
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	42a2      	cmp	r2, r4
 8007c2c:	d12b      	bne.n	8007c86 <_malloc_r+0xe2>
 8007c2e:	2200      	movs	r2, #0
 8007c30:	605a      	str	r2, [r3, #4]
 8007c32:	e00f      	b.n	8007c54 <_malloc_r+0xb0>
 8007c34:	6822      	ldr	r2, [r4, #0]
 8007c36:	1b52      	subs	r2, r2, r5
 8007c38:	d41f      	bmi.n	8007c7a <_malloc_r+0xd6>
 8007c3a:	2a0b      	cmp	r2, #11
 8007c3c:	d917      	bls.n	8007c6e <_malloc_r+0xca>
 8007c3e:	1961      	adds	r1, r4, r5
 8007c40:	42a3      	cmp	r3, r4
 8007c42:	6025      	str	r5, [r4, #0]
 8007c44:	bf18      	it	ne
 8007c46:	6059      	strne	r1, [r3, #4]
 8007c48:	6863      	ldr	r3, [r4, #4]
 8007c4a:	bf08      	it	eq
 8007c4c:	f8c8 1000 	streq.w	r1, [r8]
 8007c50:	5162      	str	r2, [r4, r5]
 8007c52:	604b      	str	r3, [r1, #4]
 8007c54:	4638      	mov	r0, r7
 8007c56:	f104 060b 	add.w	r6, r4, #11
 8007c5a:	f000 f829 	bl	8007cb0 <__malloc_unlock>
 8007c5e:	f026 0607 	bic.w	r6, r6, #7
 8007c62:	1d23      	adds	r3, r4, #4
 8007c64:	1af2      	subs	r2, r6, r3
 8007c66:	d0ae      	beq.n	8007bc6 <_malloc_r+0x22>
 8007c68:	1b9b      	subs	r3, r3, r6
 8007c6a:	50a3      	str	r3, [r4, r2]
 8007c6c:	e7ab      	b.n	8007bc6 <_malloc_r+0x22>
 8007c6e:	42a3      	cmp	r3, r4
 8007c70:	6862      	ldr	r2, [r4, #4]
 8007c72:	d1dd      	bne.n	8007c30 <_malloc_r+0x8c>
 8007c74:	f8c8 2000 	str.w	r2, [r8]
 8007c78:	e7ec      	b.n	8007c54 <_malloc_r+0xb0>
 8007c7a:	4623      	mov	r3, r4
 8007c7c:	6864      	ldr	r4, [r4, #4]
 8007c7e:	e7ac      	b.n	8007bda <_malloc_r+0x36>
 8007c80:	4634      	mov	r4, r6
 8007c82:	6876      	ldr	r6, [r6, #4]
 8007c84:	e7b4      	b.n	8007bf0 <_malloc_r+0x4c>
 8007c86:	4613      	mov	r3, r2
 8007c88:	e7cc      	b.n	8007c24 <_malloc_r+0x80>
 8007c8a:	230c      	movs	r3, #12
 8007c8c:	603b      	str	r3, [r7, #0]
 8007c8e:	4638      	mov	r0, r7
 8007c90:	f000 f80e 	bl	8007cb0 <__malloc_unlock>
 8007c94:	e797      	b.n	8007bc6 <_malloc_r+0x22>
 8007c96:	6025      	str	r5, [r4, #0]
 8007c98:	e7dc      	b.n	8007c54 <_malloc_r+0xb0>
 8007c9a:	605b      	str	r3, [r3, #4]
 8007c9c:	deff      	udf	#255	; 0xff
 8007c9e:	bf00      	nop
 8007ca0:	20002024 	.word	0x20002024

08007ca4 <__malloc_lock>:
 8007ca4:	4801      	ldr	r0, [pc, #4]	; (8007cac <__malloc_lock+0x8>)
 8007ca6:	f7ff bf0f 	b.w	8007ac8 <__retarget_lock_acquire_recursive>
 8007caa:	bf00      	nop
 8007cac:	20002020 	.word	0x20002020

08007cb0 <__malloc_unlock>:
 8007cb0:	4801      	ldr	r0, [pc, #4]	; (8007cb8 <__malloc_unlock+0x8>)
 8007cb2:	f7ff bf0a 	b.w	8007aca <__retarget_lock_release_recursive>
 8007cb6:	bf00      	nop
 8007cb8:	20002020 	.word	0x20002020

08007cbc <__ssputs_r>:
 8007cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cc0:	688e      	ldr	r6, [r1, #8]
 8007cc2:	461f      	mov	r7, r3
 8007cc4:	42be      	cmp	r6, r7
 8007cc6:	680b      	ldr	r3, [r1, #0]
 8007cc8:	4682      	mov	sl, r0
 8007cca:	460c      	mov	r4, r1
 8007ccc:	4690      	mov	r8, r2
 8007cce:	d82c      	bhi.n	8007d2a <__ssputs_r+0x6e>
 8007cd0:	898a      	ldrh	r2, [r1, #12]
 8007cd2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007cd6:	d026      	beq.n	8007d26 <__ssputs_r+0x6a>
 8007cd8:	6965      	ldr	r5, [r4, #20]
 8007cda:	6909      	ldr	r1, [r1, #16]
 8007cdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ce0:	eba3 0901 	sub.w	r9, r3, r1
 8007ce4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ce8:	1c7b      	adds	r3, r7, #1
 8007cea:	444b      	add	r3, r9
 8007cec:	106d      	asrs	r5, r5, #1
 8007cee:	429d      	cmp	r5, r3
 8007cf0:	bf38      	it	cc
 8007cf2:	461d      	movcc	r5, r3
 8007cf4:	0553      	lsls	r3, r2, #21
 8007cf6:	d527      	bpl.n	8007d48 <__ssputs_r+0x8c>
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	f7ff ff53 	bl	8007ba4 <_malloc_r>
 8007cfe:	4606      	mov	r6, r0
 8007d00:	b360      	cbz	r0, 8007d5c <__ssputs_r+0xa0>
 8007d02:	6921      	ldr	r1, [r4, #16]
 8007d04:	464a      	mov	r2, r9
 8007d06:	f000 faeb 	bl	80082e0 <memcpy>
 8007d0a:	89a3      	ldrh	r3, [r4, #12]
 8007d0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d14:	81a3      	strh	r3, [r4, #12]
 8007d16:	6126      	str	r6, [r4, #16]
 8007d18:	6165      	str	r5, [r4, #20]
 8007d1a:	444e      	add	r6, r9
 8007d1c:	eba5 0509 	sub.w	r5, r5, r9
 8007d20:	6026      	str	r6, [r4, #0]
 8007d22:	60a5      	str	r5, [r4, #8]
 8007d24:	463e      	mov	r6, r7
 8007d26:	42be      	cmp	r6, r7
 8007d28:	d900      	bls.n	8007d2c <__ssputs_r+0x70>
 8007d2a:	463e      	mov	r6, r7
 8007d2c:	6820      	ldr	r0, [r4, #0]
 8007d2e:	4632      	mov	r2, r6
 8007d30:	4641      	mov	r1, r8
 8007d32:	f000 faab 	bl	800828c <memmove>
 8007d36:	68a3      	ldr	r3, [r4, #8]
 8007d38:	1b9b      	subs	r3, r3, r6
 8007d3a:	60a3      	str	r3, [r4, #8]
 8007d3c:	6823      	ldr	r3, [r4, #0]
 8007d3e:	4433      	add	r3, r6
 8007d40:	6023      	str	r3, [r4, #0]
 8007d42:	2000      	movs	r0, #0
 8007d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d48:	462a      	mov	r2, r5
 8007d4a:	f000 fad7 	bl	80082fc <_realloc_r>
 8007d4e:	4606      	mov	r6, r0
 8007d50:	2800      	cmp	r0, #0
 8007d52:	d1e0      	bne.n	8007d16 <__ssputs_r+0x5a>
 8007d54:	6921      	ldr	r1, [r4, #16]
 8007d56:	4650      	mov	r0, sl
 8007d58:	f7ff feb8 	bl	8007acc <_free_r>
 8007d5c:	230c      	movs	r3, #12
 8007d5e:	f8ca 3000 	str.w	r3, [sl]
 8007d62:	89a3      	ldrh	r3, [r4, #12]
 8007d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d68:	81a3      	strh	r3, [r4, #12]
 8007d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6e:	e7e9      	b.n	8007d44 <__ssputs_r+0x88>

08007d70 <_svfiprintf_r>:
 8007d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d74:	4698      	mov	r8, r3
 8007d76:	898b      	ldrh	r3, [r1, #12]
 8007d78:	061b      	lsls	r3, r3, #24
 8007d7a:	b09d      	sub	sp, #116	; 0x74
 8007d7c:	4607      	mov	r7, r0
 8007d7e:	460d      	mov	r5, r1
 8007d80:	4614      	mov	r4, r2
 8007d82:	d50e      	bpl.n	8007da2 <_svfiprintf_r+0x32>
 8007d84:	690b      	ldr	r3, [r1, #16]
 8007d86:	b963      	cbnz	r3, 8007da2 <_svfiprintf_r+0x32>
 8007d88:	2140      	movs	r1, #64	; 0x40
 8007d8a:	f7ff ff0b 	bl	8007ba4 <_malloc_r>
 8007d8e:	6028      	str	r0, [r5, #0]
 8007d90:	6128      	str	r0, [r5, #16]
 8007d92:	b920      	cbnz	r0, 8007d9e <_svfiprintf_r+0x2e>
 8007d94:	230c      	movs	r3, #12
 8007d96:	603b      	str	r3, [r7, #0]
 8007d98:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9c:	e0d0      	b.n	8007f40 <_svfiprintf_r+0x1d0>
 8007d9e:	2340      	movs	r3, #64	; 0x40
 8007da0:	616b      	str	r3, [r5, #20]
 8007da2:	2300      	movs	r3, #0
 8007da4:	9309      	str	r3, [sp, #36]	; 0x24
 8007da6:	2320      	movs	r3, #32
 8007da8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dac:	f8cd 800c 	str.w	r8, [sp, #12]
 8007db0:	2330      	movs	r3, #48	; 0x30
 8007db2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007f58 <_svfiprintf_r+0x1e8>
 8007db6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dba:	f04f 0901 	mov.w	r9, #1
 8007dbe:	4623      	mov	r3, r4
 8007dc0:	469a      	mov	sl, r3
 8007dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dc6:	b10a      	cbz	r2, 8007dcc <_svfiprintf_r+0x5c>
 8007dc8:	2a25      	cmp	r2, #37	; 0x25
 8007dca:	d1f9      	bne.n	8007dc0 <_svfiprintf_r+0x50>
 8007dcc:	ebba 0b04 	subs.w	fp, sl, r4
 8007dd0:	d00b      	beq.n	8007dea <_svfiprintf_r+0x7a>
 8007dd2:	465b      	mov	r3, fp
 8007dd4:	4622      	mov	r2, r4
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	4638      	mov	r0, r7
 8007dda:	f7ff ff6f 	bl	8007cbc <__ssputs_r>
 8007dde:	3001      	adds	r0, #1
 8007de0:	f000 80a9 	beq.w	8007f36 <_svfiprintf_r+0x1c6>
 8007de4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007de6:	445a      	add	r2, fp
 8007de8:	9209      	str	r2, [sp, #36]	; 0x24
 8007dea:	f89a 3000 	ldrb.w	r3, [sl]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 80a1 	beq.w	8007f36 <_svfiprintf_r+0x1c6>
 8007df4:	2300      	movs	r3, #0
 8007df6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dfe:	f10a 0a01 	add.w	sl, sl, #1
 8007e02:	9304      	str	r3, [sp, #16]
 8007e04:	9307      	str	r3, [sp, #28]
 8007e06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e0a:	931a      	str	r3, [sp, #104]	; 0x68
 8007e0c:	4654      	mov	r4, sl
 8007e0e:	2205      	movs	r2, #5
 8007e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e14:	4850      	ldr	r0, [pc, #320]	; (8007f58 <_svfiprintf_r+0x1e8>)
 8007e16:	f7f8 f9e3 	bl	80001e0 <memchr>
 8007e1a:	9a04      	ldr	r2, [sp, #16]
 8007e1c:	b9d8      	cbnz	r0, 8007e56 <_svfiprintf_r+0xe6>
 8007e1e:	06d0      	lsls	r0, r2, #27
 8007e20:	bf44      	itt	mi
 8007e22:	2320      	movmi	r3, #32
 8007e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e28:	0711      	lsls	r1, r2, #28
 8007e2a:	bf44      	itt	mi
 8007e2c:	232b      	movmi	r3, #43	; 0x2b
 8007e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e32:	f89a 3000 	ldrb.w	r3, [sl]
 8007e36:	2b2a      	cmp	r3, #42	; 0x2a
 8007e38:	d015      	beq.n	8007e66 <_svfiprintf_r+0xf6>
 8007e3a:	9a07      	ldr	r2, [sp, #28]
 8007e3c:	4654      	mov	r4, sl
 8007e3e:	2000      	movs	r0, #0
 8007e40:	f04f 0c0a 	mov.w	ip, #10
 8007e44:	4621      	mov	r1, r4
 8007e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e4a:	3b30      	subs	r3, #48	; 0x30
 8007e4c:	2b09      	cmp	r3, #9
 8007e4e:	d94d      	bls.n	8007eec <_svfiprintf_r+0x17c>
 8007e50:	b1b0      	cbz	r0, 8007e80 <_svfiprintf_r+0x110>
 8007e52:	9207      	str	r2, [sp, #28]
 8007e54:	e014      	b.n	8007e80 <_svfiprintf_r+0x110>
 8007e56:	eba0 0308 	sub.w	r3, r0, r8
 8007e5a:	fa09 f303 	lsl.w	r3, r9, r3
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	9304      	str	r3, [sp, #16]
 8007e62:	46a2      	mov	sl, r4
 8007e64:	e7d2      	b.n	8007e0c <_svfiprintf_r+0x9c>
 8007e66:	9b03      	ldr	r3, [sp, #12]
 8007e68:	1d19      	adds	r1, r3, #4
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	9103      	str	r1, [sp, #12]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	bfbb      	ittet	lt
 8007e72:	425b      	neglt	r3, r3
 8007e74:	f042 0202 	orrlt.w	r2, r2, #2
 8007e78:	9307      	strge	r3, [sp, #28]
 8007e7a:	9307      	strlt	r3, [sp, #28]
 8007e7c:	bfb8      	it	lt
 8007e7e:	9204      	strlt	r2, [sp, #16]
 8007e80:	7823      	ldrb	r3, [r4, #0]
 8007e82:	2b2e      	cmp	r3, #46	; 0x2e
 8007e84:	d10c      	bne.n	8007ea0 <_svfiprintf_r+0x130>
 8007e86:	7863      	ldrb	r3, [r4, #1]
 8007e88:	2b2a      	cmp	r3, #42	; 0x2a
 8007e8a:	d134      	bne.n	8007ef6 <_svfiprintf_r+0x186>
 8007e8c:	9b03      	ldr	r3, [sp, #12]
 8007e8e:	1d1a      	adds	r2, r3, #4
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	9203      	str	r2, [sp, #12]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	bfb8      	it	lt
 8007e98:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e9c:	3402      	adds	r4, #2
 8007e9e:	9305      	str	r3, [sp, #20]
 8007ea0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007f68 <_svfiprintf_r+0x1f8>
 8007ea4:	7821      	ldrb	r1, [r4, #0]
 8007ea6:	2203      	movs	r2, #3
 8007ea8:	4650      	mov	r0, sl
 8007eaa:	f7f8 f999 	bl	80001e0 <memchr>
 8007eae:	b138      	cbz	r0, 8007ec0 <_svfiprintf_r+0x150>
 8007eb0:	9b04      	ldr	r3, [sp, #16]
 8007eb2:	eba0 000a 	sub.w	r0, r0, sl
 8007eb6:	2240      	movs	r2, #64	; 0x40
 8007eb8:	4082      	lsls	r2, r0
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	3401      	adds	r4, #1
 8007ebe:	9304      	str	r3, [sp, #16]
 8007ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ec4:	4825      	ldr	r0, [pc, #148]	; (8007f5c <_svfiprintf_r+0x1ec>)
 8007ec6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eca:	2206      	movs	r2, #6
 8007ecc:	f7f8 f988 	bl	80001e0 <memchr>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	d038      	beq.n	8007f46 <_svfiprintf_r+0x1d6>
 8007ed4:	4b22      	ldr	r3, [pc, #136]	; (8007f60 <_svfiprintf_r+0x1f0>)
 8007ed6:	bb1b      	cbnz	r3, 8007f20 <_svfiprintf_r+0x1b0>
 8007ed8:	9b03      	ldr	r3, [sp, #12]
 8007eda:	3307      	adds	r3, #7
 8007edc:	f023 0307 	bic.w	r3, r3, #7
 8007ee0:	3308      	adds	r3, #8
 8007ee2:	9303      	str	r3, [sp, #12]
 8007ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee6:	4433      	add	r3, r6
 8007ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8007eea:	e768      	b.n	8007dbe <_svfiprintf_r+0x4e>
 8007eec:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	2001      	movs	r0, #1
 8007ef4:	e7a6      	b.n	8007e44 <_svfiprintf_r+0xd4>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	3401      	adds	r4, #1
 8007efa:	9305      	str	r3, [sp, #20]
 8007efc:	4619      	mov	r1, r3
 8007efe:	f04f 0c0a 	mov.w	ip, #10
 8007f02:	4620      	mov	r0, r4
 8007f04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f08:	3a30      	subs	r2, #48	; 0x30
 8007f0a:	2a09      	cmp	r2, #9
 8007f0c:	d903      	bls.n	8007f16 <_svfiprintf_r+0x1a6>
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d0c6      	beq.n	8007ea0 <_svfiprintf_r+0x130>
 8007f12:	9105      	str	r1, [sp, #20]
 8007f14:	e7c4      	b.n	8007ea0 <_svfiprintf_r+0x130>
 8007f16:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e7f0      	b.n	8007f02 <_svfiprintf_r+0x192>
 8007f20:	ab03      	add	r3, sp, #12
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	462a      	mov	r2, r5
 8007f26:	4b0f      	ldr	r3, [pc, #60]	; (8007f64 <_svfiprintf_r+0x1f4>)
 8007f28:	a904      	add	r1, sp, #16
 8007f2a:	4638      	mov	r0, r7
 8007f2c:	f3af 8000 	nop.w
 8007f30:	1c42      	adds	r2, r0, #1
 8007f32:	4606      	mov	r6, r0
 8007f34:	d1d6      	bne.n	8007ee4 <_svfiprintf_r+0x174>
 8007f36:	89ab      	ldrh	r3, [r5, #12]
 8007f38:	065b      	lsls	r3, r3, #25
 8007f3a:	f53f af2d 	bmi.w	8007d98 <_svfiprintf_r+0x28>
 8007f3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f40:	b01d      	add	sp, #116	; 0x74
 8007f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f46:	ab03      	add	r3, sp, #12
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	462a      	mov	r2, r5
 8007f4c:	4b05      	ldr	r3, [pc, #20]	; (8007f64 <_svfiprintf_r+0x1f4>)
 8007f4e:	a904      	add	r1, sp, #16
 8007f50:	4638      	mov	r0, r7
 8007f52:	f000 f879 	bl	8008048 <_printf_i>
 8007f56:	e7eb      	b.n	8007f30 <_svfiprintf_r+0x1c0>
 8007f58:	080083f4 	.word	0x080083f4
 8007f5c:	080083fe 	.word	0x080083fe
 8007f60:	00000000 	.word	0x00000000
 8007f64:	08007cbd 	.word	0x08007cbd
 8007f68:	080083fa 	.word	0x080083fa

08007f6c <_printf_common>:
 8007f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f70:	4616      	mov	r6, r2
 8007f72:	4699      	mov	r9, r3
 8007f74:	688a      	ldr	r2, [r1, #8]
 8007f76:	690b      	ldr	r3, [r1, #16]
 8007f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	bfb8      	it	lt
 8007f80:	4613      	movlt	r3, r2
 8007f82:	6033      	str	r3, [r6, #0]
 8007f84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f88:	4607      	mov	r7, r0
 8007f8a:	460c      	mov	r4, r1
 8007f8c:	b10a      	cbz	r2, 8007f92 <_printf_common+0x26>
 8007f8e:	3301      	adds	r3, #1
 8007f90:	6033      	str	r3, [r6, #0]
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	0699      	lsls	r1, r3, #26
 8007f96:	bf42      	ittt	mi
 8007f98:	6833      	ldrmi	r3, [r6, #0]
 8007f9a:	3302      	addmi	r3, #2
 8007f9c:	6033      	strmi	r3, [r6, #0]
 8007f9e:	6825      	ldr	r5, [r4, #0]
 8007fa0:	f015 0506 	ands.w	r5, r5, #6
 8007fa4:	d106      	bne.n	8007fb4 <_printf_common+0x48>
 8007fa6:	f104 0a19 	add.w	sl, r4, #25
 8007faa:	68e3      	ldr	r3, [r4, #12]
 8007fac:	6832      	ldr	r2, [r6, #0]
 8007fae:	1a9b      	subs	r3, r3, r2
 8007fb0:	42ab      	cmp	r3, r5
 8007fb2:	dc26      	bgt.n	8008002 <_printf_common+0x96>
 8007fb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fb8:	1e13      	subs	r3, r2, #0
 8007fba:	6822      	ldr	r2, [r4, #0]
 8007fbc:	bf18      	it	ne
 8007fbe:	2301      	movne	r3, #1
 8007fc0:	0692      	lsls	r2, r2, #26
 8007fc2:	d42b      	bmi.n	800801c <_printf_common+0xb0>
 8007fc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fc8:	4649      	mov	r1, r9
 8007fca:	4638      	mov	r0, r7
 8007fcc:	47c0      	blx	r8
 8007fce:	3001      	adds	r0, #1
 8007fd0:	d01e      	beq.n	8008010 <_printf_common+0xa4>
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	6922      	ldr	r2, [r4, #16]
 8007fd6:	f003 0306 	and.w	r3, r3, #6
 8007fda:	2b04      	cmp	r3, #4
 8007fdc:	bf02      	ittt	eq
 8007fde:	68e5      	ldreq	r5, [r4, #12]
 8007fe0:	6833      	ldreq	r3, [r6, #0]
 8007fe2:	1aed      	subeq	r5, r5, r3
 8007fe4:	68a3      	ldr	r3, [r4, #8]
 8007fe6:	bf0c      	ite	eq
 8007fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fec:	2500      	movne	r5, #0
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	bfc4      	itt	gt
 8007ff2:	1a9b      	subgt	r3, r3, r2
 8007ff4:	18ed      	addgt	r5, r5, r3
 8007ff6:	2600      	movs	r6, #0
 8007ff8:	341a      	adds	r4, #26
 8007ffa:	42b5      	cmp	r5, r6
 8007ffc:	d11a      	bne.n	8008034 <_printf_common+0xc8>
 8007ffe:	2000      	movs	r0, #0
 8008000:	e008      	b.n	8008014 <_printf_common+0xa8>
 8008002:	2301      	movs	r3, #1
 8008004:	4652      	mov	r2, sl
 8008006:	4649      	mov	r1, r9
 8008008:	4638      	mov	r0, r7
 800800a:	47c0      	blx	r8
 800800c:	3001      	adds	r0, #1
 800800e:	d103      	bne.n	8008018 <_printf_common+0xac>
 8008010:	f04f 30ff 	mov.w	r0, #4294967295
 8008014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008018:	3501      	adds	r5, #1
 800801a:	e7c6      	b.n	8007faa <_printf_common+0x3e>
 800801c:	18e1      	adds	r1, r4, r3
 800801e:	1c5a      	adds	r2, r3, #1
 8008020:	2030      	movs	r0, #48	; 0x30
 8008022:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008026:	4422      	add	r2, r4
 8008028:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800802c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008030:	3302      	adds	r3, #2
 8008032:	e7c7      	b.n	8007fc4 <_printf_common+0x58>
 8008034:	2301      	movs	r3, #1
 8008036:	4622      	mov	r2, r4
 8008038:	4649      	mov	r1, r9
 800803a:	4638      	mov	r0, r7
 800803c:	47c0      	blx	r8
 800803e:	3001      	adds	r0, #1
 8008040:	d0e6      	beq.n	8008010 <_printf_common+0xa4>
 8008042:	3601      	adds	r6, #1
 8008044:	e7d9      	b.n	8007ffa <_printf_common+0x8e>
	...

08008048 <_printf_i>:
 8008048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800804c:	7e0f      	ldrb	r7, [r1, #24]
 800804e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008050:	2f78      	cmp	r7, #120	; 0x78
 8008052:	4691      	mov	r9, r2
 8008054:	4680      	mov	r8, r0
 8008056:	460c      	mov	r4, r1
 8008058:	469a      	mov	sl, r3
 800805a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800805e:	d807      	bhi.n	8008070 <_printf_i+0x28>
 8008060:	2f62      	cmp	r7, #98	; 0x62
 8008062:	d80a      	bhi.n	800807a <_printf_i+0x32>
 8008064:	2f00      	cmp	r7, #0
 8008066:	f000 80d4 	beq.w	8008212 <_printf_i+0x1ca>
 800806a:	2f58      	cmp	r7, #88	; 0x58
 800806c:	f000 80c0 	beq.w	80081f0 <_printf_i+0x1a8>
 8008070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008078:	e03a      	b.n	80080f0 <_printf_i+0xa8>
 800807a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800807e:	2b15      	cmp	r3, #21
 8008080:	d8f6      	bhi.n	8008070 <_printf_i+0x28>
 8008082:	a101      	add	r1, pc, #4	; (adr r1, 8008088 <_printf_i+0x40>)
 8008084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008088:	080080e1 	.word	0x080080e1
 800808c:	080080f5 	.word	0x080080f5
 8008090:	08008071 	.word	0x08008071
 8008094:	08008071 	.word	0x08008071
 8008098:	08008071 	.word	0x08008071
 800809c:	08008071 	.word	0x08008071
 80080a0:	080080f5 	.word	0x080080f5
 80080a4:	08008071 	.word	0x08008071
 80080a8:	08008071 	.word	0x08008071
 80080ac:	08008071 	.word	0x08008071
 80080b0:	08008071 	.word	0x08008071
 80080b4:	080081f9 	.word	0x080081f9
 80080b8:	08008121 	.word	0x08008121
 80080bc:	080081b3 	.word	0x080081b3
 80080c0:	08008071 	.word	0x08008071
 80080c4:	08008071 	.word	0x08008071
 80080c8:	0800821b 	.word	0x0800821b
 80080cc:	08008071 	.word	0x08008071
 80080d0:	08008121 	.word	0x08008121
 80080d4:	08008071 	.word	0x08008071
 80080d8:	08008071 	.word	0x08008071
 80080dc:	080081bb 	.word	0x080081bb
 80080e0:	682b      	ldr	r3, [r5, #0]
 80080e2:	1d1a      	adds	r2, r3, #4
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	602a      	str	r2, [r5, #0]
 80080e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080f0:	2301      	movs	r3, #1
 80080f2:	e09f      	b.n	8008234 <_printf_i+0x1ec>
 80080f4:	6820      	ldr	r0, [r4, #0]
 80080f6:	682b      	ldr	r3, [r5, #0]
 80080f8:	0607      	lsls	r7, r0, #24
 80080fa:	f103 0104 	add.w	r1, r3, #4
 80080fe:	6029      	str	r1, [r5, #0]
 8008100:	d501      	bpl.n	8008106 <_printf_i+0xbe>
 8008102:	681e      	ldr	r6, [r3, #0]
 8008104:	e003      	b.n	800810e <_printf_i+0xc6>
 8008106:	0646      	lsls	r6, r0, #25
 8008108:	d5fb      	bpl.n	8008102 <_printf_i+0xba>
 800810a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800810e:	2e00      	cmp	r6, #0
 8008110:	da03      	bge.n	800811a <_printf_i+0xd2>
 8008112:	232d      	movs	r3, #45	; 0x2d
 8008114:	4276      	negs	r6, r6
 8008116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800811a:	485a      	ldr	r0, [pc, #360]	; (8008284 <_printf_i+0x23c>)
 800811c:	230a      	movs	r3, #10
 800811e:	e012      	b.n	8008146 <_printf_i+0xfe>
 8008120:	682b      	ldr	r3, [r5, #0]
 8008122:	6820      	ldr	r0, [r4, #0]
 8008124:	1d19      	adds	r1, r3, #4
 8008126:	6029      	str	r1, [r5, #0]
 8008128:	0605      	lsls	r5, r0, #24
 800812a:	d501      	bpl.n	8008130 <_printf_i+0xe8>
 800812c:	681e      	ldr	r6, [r3, #0]
 800812e:	e002      	b.n	8008136 <_printf_i+0xee>
 8008130:	0641      	lsls	r1, r0, #25
 8008132:	d5fb      	bpl.n	800812c <_printf_i+0xe4>
 8008134:	881e      	ldrh	r6, [r3, #0]
 8008136:	4853      	ldr	r0, [pc, #332]	; (8008284 <_printf_i+0x23c>)
 8008138:	2f6f      	cmp	r7, #111	; 0x6f
 800813a:	bf0c      	ite	eq
 800813c:	2308      	moveq	r3, #8
 800813e:	230a      	movne	r3, #10
 8008140:	2100      	movs	r1, #0
 8008142:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008146:	6865      	ldr	r5, [r4, #4]
 8008148:	60a5      	str	r5, [r4, #8]
 800814a:	2d00      	cmp	r5, #0
 800814c:	bfa2      	ittt	ge
 800814e:	6821      	ldrge	r1, [r4, #0]
 8008150:	f021 0104 	bicge.w	r1, r1, #4
 8008154:	6021      	strge	r1, [r4, #0]
 8008156:	b90e      	cbnz	r6, 800815c <_printf_i+0x114>
 8008158:	2d00      	cmp	r5, #0
 800815a:	d04b      	beq.n	80081f4 <_printf_i+0x1ac>
 800815c:	4615      	mov	r5, r2
 800815e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008162:	fb03 6711 	mls	r7, r3, r1, r6
 8008166:	5dc7      	ldrb	r7, [r0, r7]
 8008168:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800816c:	4637      	mov	r7, r6
 800816e:	42bb      	cmp	r3, r7
 8008170:	460e      	mov	r6, r1
 8008172:	d9f4      	bls.n	800815e <_printf_i+0x116>
 8008174:	2b08      	cmp	r3, #8
 8008176:	d10b      	bne.n	8008190 <_printf_i+0x148>
 8008178:	6823      	ldr	r3, [r4, #0]
 800817a:	07de      	lsls	r6, r3, #31
 800817c:	d508      	bpl.n	8008190 <_printf_i+0x148>
 800817e:	6923      	ldr	r3, [r4, #16]
 8008180:	6861      	ldr	r1, [r4, #4]
 8008182:	4299      	cmp	r1, r3
 8008184:	bfde      	ittt	le
 8008186:	2330      	movle	r3, #48	; 0x30
 8008188:	f805 3c01 	strble.w	r3, [r5, #-1]
 800818c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008190:	1b52      	subs	r2, r2, r5
 8008192:	6122      	str	r2, [r4, #16]
 8008194:	f8cd a000 	str.w	sl, [sp]
 8008198:	464b      	mov	r3, r9
 800819a:	aa03      	add	r2, sp, #12
 800819c:	4621      	mov	r1, r4
 800819e:	4640      	mov	r0, r8
 80081a0:	f7ff fee4 	bl	8007f6c <_printf_common>
 80081a4:	3001      	adds	r0, #1
 80081a6:	d14a      	bne.n	800823e <_printf_i+0x1f6>
 80081a8:	f04f 30ff 	mov.w	r0, #4294967295
 80081ac:	b004      	add	sp, #16
 80081ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b2:	6823      	ldr	r3, [r4, #0]
 80081b4:	f043 0320 	orr.w	r3, r3, #32
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	4833      	ldr	r0, [pc, #204]	; (8008288 <_printf_i+0x240>)
 80081bc:	2778      	movs	r7, #120	; 0x78
 80081be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	6829      	ldr	r1, [r5, #0]
 80081c6:	061f      	lsls	r7, r3, #24
 80081c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80081cc:	d402      	bmi.n	80081d4 <_printf_i+0x18c>
 80081ce:	065f      	lsls	r7, r3, #25
 80081d0:	bf48      	it	mi
 80081d2:	b2b6      	uxthmi	r6, r6
 80081d4:	07df      	lsls	r7, r3, #31
 80081d6:	bf48      	it	mi
 80081d8:	f043 0320 	orrmi.w	r3, r3, #32
 80081dc:	6029      	str	r1, [r5, #0]
 80081de:	bf48      	it	mi
 80081e0:	6023      	strmi	r3, [r4, #0]
 80081e2:	b91e      	cbnz	r6, 80081ec <_printf_i+0x1a4>
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	f023 0320 	bic.w	r3, r3, #32
 80081ea:	6023      	str	r3, [r4, #0]
 80081ec:	2310      	movs	r3, #16
 80081ee:	e7a7      	b.n	8008140 <_printf_i+0xf8>
 80081f0:	4824      	ldr	r0, [pc, #144]	; (8008284 <_printf_i+0x23c>)
 80081f2:	e7e4      	b.n	80081be <_printf_i+0x176>
 80081f4:	4615      	mov	r5, r2
 80081f6:	e7bd      	b.n	8008174 <_printf_i+0x12c>
 80081f8:	682b      	ldr	r3, [r5, #0]
 80081fa:	6826      	ldr	r6, [r4, #0]
 80081fc:	6961      	ldr	r1, [r4, #20]
 80081fe:	1d18      	adds	r0, r3, #4
 8008200:	6028      	str	r0, [r5, #0]
 8008202:	0635      	lsls	r5, r6, #24
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	d501      	bpl.n	800820c <_printf_i+0x1c4>
 8008208:	6019      	str	r1, [r3, #0]
 800820a:	e002      	b.n	8008212 <_printf_i+0x1ca>
 800820c:	0670      	lsls	r0, r6, #25
 800820e:	d5fb      	bpl.n	8008208 <_printf_i+0x1c0>
 8008210:	8019      	strh	r1, [r3, #0]
 8008212:	2300      	movs	r3, #0
 8008214:	6123      	str	r3, [r4, #16]
 8008216:	4615      	mov	r5, r2
 8008218:	e7bc      	b.n	8008194 <_printf_i+0x14c>
 800821a:	682b      	ldr	r3, [r5, #0]
 800821c:	1d1a      	adds	r2, r3, #4
 800821e:	602a      	str	r2, [r5, #0]
 8008220:	681d      	ldr	r5, [r3, #0]
 8008222:	6862      	ldr	r2, [r4, #4]
 8008224:	2100      	movs	r1, #0
 8008226:	4628      	mov	r0, r5
 8008228:	f7f7 ffda 	bl	80001e0 <memchr>
 800822c:	b108      	cbz	r0, 8008232 <_printf_i+0x1ea>
 800822e:	1b40      	subs	r0, r0, r5
 8008230:	6060      	str	r0, [r4, #4]
 8008232:	6863      	ldr	r3, [r4, #4]
 8008234:	6123      	str	r3, [r4, #16]
 8008236:	2300      	movs	r3, #0
 8008238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800823c:	e7aa      	b.n	8008194 <_printf_i+0x14c>
 800823e:	6923      	ldr	r3, [r4, #16]
 8008240:	462a      	mov	r2, r5
 8008242:	4649      	mov	r1, r9
 8008244:	4640      	mov	r0, r8
 8008246:	47d0      	blx	sl
 8008248:	3001      	adds	r0, #1
 800824a:	d0ad      	beq.n	80081a8 <_printf_i+0x160>
 800824c:	6823      	ldr	r3, [r4, #0]
 800824e:	079b      	lsls	r3, r3, #30
 8008250:	d413      	bmi.n	800827a <_printf_i+0x232>
 8008252:	68e0      	ldr	r0, [r4, #12]
 8008254:	9b03      	ldr	r3, [sp, #12]
 8008256:	4298      	cmp	r0, r3
 8008258:	bfb8      	it	lt
 800825a:	4618      	movlt	r0, r3
 800825c:	e7a6      	b.n	80081ac <_printf_i+0x164>
 800825e:	2301      	movs	r3, #1
 8008260:	4632      	mov	r2, r6
 8008262:	4649      	mov	r1, r9
 8008264:	4640      	mov	r0, r8
 8008266:	47d0      	blx	sl
 8008268:	3001      	adds	r0, #1
 800826a:	d09d      	beq.n	80081a8 <_printf_i+0x160>
 800826c:	3501      	adds	r5, #1
 800826e:	68e3      	ldr	r3, [r4, #12]
 8008270:	9903      	ldr	r1, [sp, #12]
 8008272:	1a5b      	subs	r3, r3, r1
 8008274:	42ab      	cmp	r3, r5
 8008276:	dcf2      	bgt.n	800825e <_printf_i+0x216>
 8008278:	e7eb      	b.n	8008252 <_printf_i+0x20a>
 800827a:	2500      	movs	r5, #0
 800827c:	f104 0619 	add.w	r6, r4, #25
 8008280:	e7f5      	b.n	800826e <_printf_i+0x226>
 8008282:	bf00      	nop
 8008284:	08008405 	.word	0x08008405
 8008288:	08008416 	.word	0x08008416

0800828c <memmove>:
 800828c:	4288      	cmp	r0, r1
 800828e:	b510      	push	{r4, lr}
 8008290:	eb01 0402 	add.w	r4, r1, r2
 8008294:	d902      	bls.n	800829c <memmove+0x10>
 8008296:	4284      	cmp	r4, r0
 8008298:	4623      	mov	r3, r4
 800829a:	d807      	bhi.n	80082ac <memmove+0x20>
 800829c:	1e43      	subs	r3, r0, #1
 800829e:	42a1      	cmp	r1, r4
 80082a0:	d008      	beq.n	80082b4 <memmove+0x28>
 80082a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082aa:	e7f8      	b.n	800829e <memmove+0x12>
 80082ac:	4402      	add	r2, r0
 80082ae:	4601      	mov	r1, r0
 80082b0:	428a      	cmp	r2, r1
 80082b2:	d100      	bne.n	80082b6 <memmove+0x2a>
 80082b4:	bd10      	pop	{r4, pc}
 80082b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082be:	e7f7      	b.n	80082b0 <memmove+0x24>

080082c0 <_sbrk_r>:
 80082c0:	b538      	push	{r3, r4, r5, lr}
 80082c2:	4d06      	ldr	r5, [pc, #24]	; (80082dc <_sbrk_r+0x1c>)
 80082c4:	2300      	movs	r3, #0
 80082c6:	4604      	mov	r4, r0
 80082c8:	4608      	mov	r0, r1
 80082ca:	602b      	str	r3, [r5, #0]
 80082cc:	f7f8 fd1a 	bl	8000d04 <_sbrk>
 80082d0:	1c43      	adds	r3, r0, #1
 80082d2:	d102      	bne.n	80082da <_sbrk_r+0x1a>
 80082d4:	682b      	ldr	r3, [r5, #0]
 80082d6:	b103      	cbz	r3, 80082da <_sbrk_r+0x1a>
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	bd38      	pop	{r3, r4, r5, pc}
 80082dc:	2000201c 	.word	0x2000201c

080082e0 <memcpy>:
 80082e0:	440a      	add	r2, r1
 80082e2:	4291      	cmp	r1, r2
 80082e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80082e8:	d100      	bne.n	80082ec <memcpy+0xc>
 80082ea:	4770      	bx	lr
 80082ec:	b510      	push	{r4, lr}
 80082ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082f6:	4291      	cmp	r1, r2
 80082f8:	d1f9      	bne.n	80082ee <memcpy+0xe>
 80082fa:	bd10      	pop	{r4, pc}

080082fc <_realloc_r>:
 80082fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008300:	4680      	mov	r8, r0
 8008302:	4614      	mov	r4, r2
 8008304:	460e      	mov	r6, r1
 8008306:	b921      	cbnz	r1, 8008312 <_realloc_r+0x16>
 8008308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800830c:	4611      	mov	r1, r2
 800830e:	f7ff bc49 	b.w	8007ba4 <_malloc_r>
 8008312:	b92a      	cbnz	r2, 8008320 <_realloc_r+0x24>
 8008314:	f7ff fbda 	bl	8007acc <_free_r>
 8008318:	4625      	mov	r5, r4
 800831a:	4628      	mov	r0, r5
 800831c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008320:	f000 f81b 	bl	800835a <_malloc_usable_size_r>
 8008324:	4284      	cmp	r4, r0
 8008326:	4607      	mov	r7, r0
 8008328:	d802      	bhi.n	8008330 <_realloc_r+0x34>
 800832a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800832e:	d812      	bhi.n	8008356 <_realloc_r+0x5a>
 8008330:	4621      	mov	r1, r4
 8008332:	4640      	mov	r0, r8
 8008334:	f7ff fc36 	bl	8007ba4 <_malloc_r>
 8008338:	4605      	mov	r5, r0
 800833a:	2800      	cmp	r0, #0
 800833c:	d0ed      	beq.n	800831a <_realloc_r+0x1e>
 800833e:	42bc      	cmp	r4, r7
 8008340:	4622      	mov	r2, r4
 8008342:	4631      	mov	r1, r6
 8008344:	bf28      	it	cs
 8008346:	463a      	movcs	r2, r7
 8008348:	f7ff ffca 	bl	80082e0 <memcpy>
 800834c:	4631      	mov	r1, r6
 800834e:	4640      	mov	r0, r8
 8008350:	f7ff fbbc 	bl	8007acc <_free_r>
 8008354:	e7e1      	b.n	800831a <_realloc_r+0x1e>
 8008356:	4635      	mov	r5, r6
 8008358:	e7df      	b.n	800831a <_realloc_r+0x1e>

0800835a <_malloc_usable_size_r>:
 800835a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800835e:	1f18      	subs	r0, r3, #4
 8008360:	2b00      	cmp	r3, #0
 8008362:	bfbc      	itt	lt
 8008364:	580b      	ldrlt	r3, [r1, r0]
 8008366:	18c0      	addlt	r0, r0, r3
 8008368:	4770      	bx	lr
	...

0800836c <_init>:
 800836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836e:	bf00      	nop
 8008370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008372:	bc08      	pop	{r3}
 8008374:	469e      	mov	lr, r3
 8008376:	4770      	bx	lr

08008378 <_fini>:
 8008378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837a:	bf00      	nop
 800837c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800837e:	bc08      	pop	{r3}
 8008380:	469e      	mov	lr, r3
 8008382:	4770      	bx	lr
